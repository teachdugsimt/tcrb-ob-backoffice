version: 0.2

phases:
    install:
        runtime-versions:
            nodejs: 12
        commands:
            - ASSUME_ROLE_ARN="arn:aws:iam::313571681948:role/SecretAssumeRole"
            - export ASSUME_ROLE_ARN
            - echo $ASSUME_ROLE_ARN
            - TEMP_ROLE=`aws sts assume-role --role-arn $ASSUME_ROLE_ARN --role-session-name codebulid`
            - export TEMP_ROLE
            - echo $TEMP_ROLE
            - export AWS_ACCESS_KEY_ID=$(echo "${TEMP_ROLE}" | jq -r ".Credentials.AccessKeyId")
            - export AWS_SECRET_ACCESS_KEY=$(echo "${TEMP_ROLE}" | jq -r ".Credentials.SecretAccessKey")
            - export AWS_SESSION_TOKEN=$(echo "${TEMP_ROLE}" | jq -r ".Credentials.SessionToken")
            - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            - git config --global credential.helper '!aws codecommit credential-helper $@'
            - git config --global credential.UseHttpPath true
            - npm install
    pre_build:
        commands:
            # Run unit tests
            - npm test
            # Remove all dependencies not needed for the Lambda deployment package (the packages from devDependencies in package.json)
            - npm prune --production
    build:
        commands:
            - echo Building the Node code...
            # Use AWS SAM to package the application by using AWS CloudFormation
            #- aws cloudformation package --template template.yml --s3-bucket $S3_BUCKET --output-template template-export.yml
            - aws cloudformation package --template-file template.yml --s3-bucket tcrb-dev-lambda --output-template-file template-export.yml
            - aws cloudformation deploy --template-file template-export.yml --stack-name tcrb-ob-backoffice --capabilities CAPABILITY_IAM
artifacts:
    type: zip
    files:
        - template-export.yml
