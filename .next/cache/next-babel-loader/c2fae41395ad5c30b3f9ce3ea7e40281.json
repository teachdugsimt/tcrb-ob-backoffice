{"ast":null,"code":"import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './api-integrations/header';\nimport getGeneralApiProblem from './api-integrations/error-handler';\nimport https from 'https';\nimport axios from 'axios';\n\nclass BusinessParameterSetupApi {\n  constructor() {\n    this.getOtpValue = async params => {\n      const api = create(Header());\n      console.log(\"header : \", Header());\n      const response = await api.get('api/backoffice/v1/parameterstore', params);\n      console.log(\"response get OTP  :  \", response);\n      return response;\n    };\n\n    this.setOtpValue = async params => {\n      const api = create(Header());\n      const response = await api.put('api/backoffice/v1/parameterstore', params);\n      return response;\n    };\n\n    this.getProductLimit = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n\n    this.getOtpValueAxios = async params => {\n      const httpsAgent = new https.Agent({\n        rejectUnauthorized: false,\n        requestCert: false\n      });\n      console.log(\"HTTPS AGENT : \", httpsAgent);\n      const response = await axios({\n        url: 'https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore',\n        // url: 'https://api-dev.onlinebanking-backoffice.com/api/backoffice/v1/parameterstore',\n        method: 'GET',\n        params,\n        responseType: 'json',\n        httpsAgent,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          // 'Access-Control-Allow-Origin': \"*\",\n          'x-apigw-api-id': \"dwl8p0fxml\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          // Required for CORS support to work\n          \"Access-Control-Allow-Credentials\": true // Required for cookies, authorization headers with HTTPS\n          // 'x-api-language': \"TH\",\n          // 'x-api-key': '',\n          // 'x-api-signature': 'a94ks02304ldfgkorm1234llgdmfk',\n          // 'uuid': 'YYYYYYYY',\n\n        },\n        timeout: 15000\n      }).then(data => {\n        console.log(\"AXIOS CALLLL : \", data);\n        return data;\n      }).catch(err => {\n        console.log(\"AXIOS ERROR : \", err);\n        return err;\n      });\n      return response;\n    };\n\n    this.getPartnerChannel = async params => {\n      const api = create(header);\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n  } // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n\n}\n\nexport default new BusinessParameterSetupApi(); // HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/business-parameter-setup-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","getGeneralApiProblem","https","axios","BusinessParameterSetupApi","getOtpValue","params","api","console","log","response","get","setOtpValue","put","getProductLimit","getOtpValueAxios","httpsAgent","Agent","rejectUnauthorized","requestCert","url","method","responseType","headers","timeout","then","data","catch","err","getPartnerChannel","header"],"mappings":"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","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './api-integrations/header'\nimport getGeneralApiProblem from './api-integrations/error-handler'\nimport https from 'https';\nimport axios from 'axios'\n\nclass BusinessParameterSetupApi {\n\n  getOtpValue = async (params) => {\n    const api = create(Header())\n    console.log(\"header : \", Header())\n    const response = await api.get('api/backoffice/v1/parameterstore', params)\n    console.log(\"response get OTP  :  \", response)\n    return response\n  }\n\n  setOtpValue = async (params) => {\n    const api = create(Header())\n    const response = await api.put('api/backoffice/v1/parameterstore', params)\n    return response\n  }\n\n  getProductLimit = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  getOtpValueAxios = async (params) => {\n    const httpsAgent = new https.Agent({\n      rejectUnauthorized: false,\n      requestCert: false,\n    })\n    console.log(\"HTTPS AGENT : \", httpsAgent)\n    const response = await axios({\n      url: 'https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore',\n      // url: 'https://api-dev.onlinebanking-backoffice.com/api/backoffice/v1/parameterstore',\n      method: 'GET',\n      params,\n      responseType: 'json',\n      httpsAgent,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n\n        // 'Access-Control-Allow-Origin': \"*\",\n        'x-apigw-api-id': \"dwl8p0fxml\",\n        \"Access-Control-Allow-Origin\" : \"*\", // Required for CORS support to work\n        \"Access-Control-Allow-Credentials\" : true // Required for cookies, authorization headers with HTTPS\n\n        // 'x-api-language': \"TH\",\n        // 'x-api-key': '',\n        // 'x-api-signature': 'a94ks02304ldfgkorm1234llgdmfk',\n        // 'uuid': 'YYYYYYYY',\n      },\n      timeout: 15000\n    }).then(data => {\n      console.log(\"AXIOS CALLLL : \", data)\n      return data\n    }).catch(err => {\n      console.log(\"AXIOS ERROR : \", err)\n      return err\n    })\n    return response\n  }\n\n  getPartnerChannel = async (params) => {\n    const api = create(header)\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n}\nexport default new BusinessParameterSetupApi()\n// HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n"]},"metadata":{},"sourceType":"module"}