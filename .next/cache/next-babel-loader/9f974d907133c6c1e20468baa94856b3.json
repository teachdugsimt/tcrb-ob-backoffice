{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/role/role-list.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleModal from '../../simple-modal';\nimport SimpleInput from '../../simple-input';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility';\nlet roleName = null;\nconst RoleList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore\n  } = props;\n  const {\n    0: mockRoleList,\n    1: setRoleList\n  } = useState([]);\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  useEffect(() => {\n    userAccessManagementStore.getDataRole();\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.roleList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.roleList).then(result => {\n        setRoleList(result);\n      });\n    }\n  }, [userAccessManagementStore.roleList]);\n\n  const roleList = () => {\n    let newArray = [];\n\n    for (let index = 1; index < 6; index++) {\n      newArray.push({\n        id: index,\n        key: index,\n        role_name: \"role_name\" + index,\n        status: '1'\n      });\n    }\n\n    return newArray;\n  };\n\n  const FormAddNewRole = () => {\n    return __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }\n    }, \"Role Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => roleName = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  const openModalAddNewRole = () => {\n    setModalTitle('Add new role');\n    setmodalString(__jsx(FormAddNewRole, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  const addNewRole = () => {\n    //waiting call api\n    setVisible(false);\n    let request = {\n      name: roleName\n    };\n    userAccessManagementStore.submitAddNewRole(request);\n  };\n\n  const columnRole = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Role Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%' // render: (text, record) => renderActionGroup(record)\n\n  }];\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddNewRole(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, \"Add Role\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: mockRoleList,\n    columns: columnRole,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addNewRole(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default RoleList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/role/role-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","SimpleModal","SimpleInput","checkDefaultStatus","addKeyToDataSource","roleName","RoleList","props","userAccessManagementStore","mockRoleList","setRoleList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setVisible","getDataRole","roleList","length","then","result","newArray","index","push","id","key","role_name","status","FormAddNewRole","value","openModalAddNewRole","addNewRole","request","name","submitAddNewRole","columnRole","title","dataIndex","width","render","text","record","request_status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleModal from '../../simple-modal'\nimport SimpleInput from '../../simple-input'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility'\nlet roleName = null\nconst RoleList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [mockRoleList, setRoleList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n\n    useEffect(() => {\n      userAccessManagementStore.getDataRole()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.roleList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.roleList).then(result => {\n          setRoleList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.roleList])\n\n    const roleList = () => {\n      let newArray = []\n      for (let index = 1; index < 6; index++) {\n        newArray.push({\n          id: index,\n          key: index,\n          role_name: \"role_name\" + index,\n          status: '1'\n        })\n      }\n      return newArray\n    }\n\n    const FormAddNewRole = () => {\n      return (\n        <Row>\n          <Col span={10} >\n            <span>\n              Role Name\n            </span>\n          </Col>\n          <Col span={14}>\n            <SimpleInput onChange={(value) => roleName = value} />\n          </Col>\n        </Row>\n      )\n    }\n\n    const openModalAddNewRole = () => {\n      setModalTitle('Add new role')\n      setmodalString(<FormAddNewRole />)\n      setVisible(true)\n    }\n\n    const addNewRole = () => {\n      //waiting call api\n      setVisible(false)\n      let request = {\n        name: roleName\n      }\n      userAccessManagementStore.submitAddNewRole(request)\n    }\n    const columnRole = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Role Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        // render: (text, record) => renderActionGroup(record)\n      }\n    ]\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddNewRole()} >Add Role</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={mockRoleList}\n          columns={columnRole}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewRole()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default RoleList\n"]},"metadata":{},"sourceType":"module"}