{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/customer-services-menu/otp-unlocking.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Input, Row, Col, Layout, Modal, Switch, Alert } from 'antd';\nimport styled from 'styled-components';\nimport SimpleSearch from '../simple-search';\nimport SimpleModal from '../simple-modal';\nimport SimpleSwitch from '../simple-switch';\nimport SimpleAlert from '../simple-alert';\nimport { inject, observer } from 'mobx-react'; // import { useStores } from '../../hooks/use-stores'\n\nimport { StartupApi } from '../../services';\nimport { toJS } from 'mobx'; // import { i18n, withNamespaces } from '../../i18n'\n\nimport { withTranslation } from '../../i18n';\nconst StyledA = styled.a.withConfig({\n  displayName: \"otp-unlocking__StyledA\",\n  componentId: \"r234ff-0\"\n})([\"display:initial;padding-left:\", \"px !important;color:#F88008 !important;text-decoration-color:#F88008;text-decoration-line:underline;\"], ({\n  theme\n}) => theme.spacing.medium);\nconst StyledSpan = styled.span.withConfig({\n  displayName: \"otp-unlocking__StyledSpan\",\n  componentId: \"r234ff-1\"\n})([\"display:initial;padding-left:\", \"px !important;\"], ({\n  theme\n}) => theme.spacing.medium);\nconst StyledSwitch = styled(Switch).withConfig({\n  displayName: \"otp-unlocking__StyledSwitch\",\n  componentId: \"r234ff-2\"\n})([\"\", \"\"], ({\n  defaultChecked\n}) => defaultChecked && `\n      background-color: #F88008 !important;\n  `);\nconst OtpUnlocking = inject('customerServicesMenuStore')(observer(props => {\n  const {\n    0: idCard,\n    1: setIdCard\n  } = useState('');\n  const {\n    0: isSearch,\n    1: setIsSearch\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisble\n  } = useState(false);\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(false);\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState('');\n  const {\n    0: stringSwitch,\n    1: setStringSwitch\n  } = useState([]);\n  const {\n    0: showAlertError,\n    1: setShowAlertError\n  } = useState(false);\n  const mockData = [{\n    accountNumber: '123123123123',\n    accountType: 'Binding to TCRB Mobile Banking',\n    accountStatus: true\n  }, {\n    accountNumber: '00993445123123',\n    accountType: 'Binding to Micro Pay',\n    accountStatus: false\n  }]; // const { customerServicesMenuStore } = useStores()\n\n  const {\n    customerServicesMenuStore,\n    t\n  } = props;\n  useEffect(() => {\n    console.log(toJS(customerServicesMenuStore.accountInfoError)); // if (customerServicesMenuStore.accountInfoError) {\n    //   setShowAlertError(true)\n    // }\n  }, [customerServicesMenuStore.accountInfoError]);\n  useEffect(() => {\n    console.log('eiei2');\n    convertArrayObjectToArray(customerServicesMenuStore.accountInfo).then(result => {\n      customerServicesMenuStore.arrayAccountInfo = result;\n      setStringSwitch(result);\n    });\n  }, [customerServicesMenuStore.accountInfo]);\n\n  const searchIdCardNumber = async value => {\n    setIdCard(value);\n    setIsSearch(true); // customerServicesMenuStore.setCitizenId(value)\n    //call api\n\n    await customerServicesMenuStore.getData(value); // when not found account\n    // when found account\n    // convertArrayObjectToArray(customerServicesMenuStore.accountInfo).then(result => {\n    //   customerServicesMenuStore.arrayAccountInfo = result\n    //   setStringSwitch(result)\n    // })\n  };\n\n  const convertArrayObjectToArray = arrayObject => {\n    return new Promise((resolve, reject) => {\n      let result = arrayObject.map(a => [a.otp_is_locked, a.main_account_no, a.product_name_english]);\n      resolve(result);\n    });\n  };\n\n  const replaceNewDataForSetString = () => {\n    let arrayAccountInfo = toJS(customerServicesMenuStore.getAccountInfo);\n    let accountSelected = toJS(customerServicesMenuStore.accountSelected); // let newArray = stringSwitch.filter(accountInfo => accountInfo.accountNumber !== toJS(customerServicesMenuStore.accountSelected.accountNumber))\n\n    let newArray = arrayAccountInfo.filter(accountInfo => accountInfo.main_account_no !== accountSelected.main_account_no);\n    console.log(newArray, arrayAccountInfo);\n    convertArrayObjectToArray([...newArray, accountSelected]).then(result => {\n      console.log(result);\n      setStringSwitch(result);\n    });\n  };\n\n  const closeModal = () => {\n    setVisble(false);\n    setStringSwitch(toJS(customerServicesMenuStore.arrayAccountInfo));\n  };\n\n  const onChange = (switchSelected, index) => {\n    console.log(switchSelected, index);\n\n    if (switchSelected === true) {\n      customerServicesMenuStore.accountSelected = toJS(customerServicesMenuStore.getAccountInfo)[index];\n      setVisble(true);\n      setModalString(__jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }\n      }, t(\"unlockingOtp\")), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, \" \", t(\"accountNumber\") + \" \" + customerServicesMenuStore.accountSelected.main_account_no)));\n    } else {// setIsChecked(false)\n    }\n  };\n\n  const unlockOTP = () => {\n    setVisble(false); //some action\n\n    customerServicesMenuStore.accountSelected.otp_is_locked = false;\n    replaceNewDataForSetString();\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, __jsx(SimpleSearch, {\n    search: searchIdCardNumber,\n    prefixWording: t(\"idCard\"),\n    loading: customerServicesMenuStore.accountInfoFetching,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  })), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, showAlertError ? __jsx(Alert, {\n    message: customerServicesMenuStore.accountInfoError.responseData.userMessage,\n    type: \"error\",\n    showIcon: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 34\n    }\n  }) : ''), isSearch ? __jsx(SimpleSwitch, {\n    data: stringSwitch,\n    onChange: (switchSelected, index) => onChange(switchSelected, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  }) : '', __jsx(SimpleModal, {\n    onOk: () => unlockOTP(),\n    onCancel: () => closeModal(),\n    okText: t(\"confirm\"),\n    cancelText: t(\"cancel\"),\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default withTranslation('common')(OtpUnlocking);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/customer-services-menu/otp-unlocking.js"],"names":["React","useState","useEffect","Input","Row","Col","Layout","Modal","Switch","Alert","styled","SimpleSearch","SimpleModal","SimpleSwitch","SimpleAlert","inject","observer","StartupApi","toJS","withTranslation","StyledA","a","theme","spacing","medium","StyledSpan","span","StyledSwitch","defaultChecked","OtpUnlocking","props","idCard","setIdCard","isSearch","setIsSearch","visible","setVisble","isChecked","setIsChecked","modalString","setModalString","stringSwitch","setStringSwitch","showAlertError","setShowAlertError","mockData","accountNumber","accountType","accountStatus","customerServicesMenuStore","t","console","log","accountInfoError","convertArrayObjectToArray","accountInfo","then","result","arrayAccountInfo","searchIdCardNumber","value","getData","arrayObject","Promise","resolve","reject","map","otp_is_locked","main_account_no","product_name_english","replaceNewDataForSetString","getAccountInfo","accountSelected","newArray","filter","closeModal","onChange","switchSelected","index","textAlign","unlockOTP","marginTop","accountInfoFetching","responseData","userMessage"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Input, Row, Col, Layout, Modal, Switch, Alert } from 'antd'\nimport styled from 'styled-components';\nimport SimpleSearch from '../simple-search'\nimport SimpleModal from '../simple-modal'\nimport SimpleSwitch from '../simple-switch'\nimport SimpleAlert from '../simple-alert'\nimport { inject, observer } from 'mobx-react'\n// import { useStores } from '../../hooks/use-stores'\nimport { StartupApi } from '../../services'\nimport { toJS } from 'mobx';\n// import { i18n, withNamespaces } from '../../i18n'\nimport { withTranslation } from '../../i18n'\n\n\nconst StyledA = styled.a`\n  display: initial;\n  padding-left: ${({ theme }) => theme.spacing.medium}px !important;\n  color: #F88008 !important;\n  text-decoration-color: #F88008;\n  text-decoration-line: underline;\n`\nconst StyledSpan = styled.span`\n\n  display: initial;\n  padding-left: ${({ theme }) => theme.spacing.medium}px !important;\n`\nconst StyledSwitch = styled(Switch)`\n\n      ${({ defaultChecked }) => defaultChecked && `\n      background-color: #F88008 !important;\n  `}\n`\nconst OtpUnlocking =\n  inject('customerServicesMenuStore')\n    (observer((props) => {\n      const [idCard, setIdCard] = useState('');\n      const [isSearch, setIsSearch] = useState(false);\n      const [visible, setVisble] = useState(false)\n      const [isChecked, setIsChecked] = useState(false)\n      const [modalString, setModalString] = useState('')\n      const [stringSwitch, setStringSwitch] = useState([])\n      const [showAlertError, setShowAlertError] = useState(false)\n\n      const mockData = [\n        { accountNumber: '123123123123', accountType: 'Binding to TCRB Mobile Banking', accountStatus: true },\n        { accountNumber: '00993445123123', accountType: 'Binding to Micro Pay', accountStatus: false }\n      ]\n      // const { customerServicesMenuStore } = useStores()\n      const { customerServicesMenuStore, t } = props\n\n      useEffect(() => {\n        console.log(toJS(customerServicesMenuStore.accountInfoError))\n        // if (customerServicesMenuStore.accountInfoError) {\n        //   setShowAlertError(true)\n        // }\n      }, [customerServicesMenuStore.accountInfoError])\n\n      useEffect(() => {\n        console.log('eiei2')\n        convertArrayObjectToArray(customerServicesMenuStore.accountInfo).then(result => {\n          customerServicesMenuStore.arrayAccountInfo = result\n          setStringSwitch(result)\n        })\n      }, [customerServicesMenuStore.accountInfo])\n\n      const searchIdCardNumber = async (value) => {\n        setIdCard(value)\n        setIsSearch(true)\n        // customerServicesMenuStore.setCitizenId(value)\n        //call api\n        await customerServicesMenuStore.getData(value)\n        // when not found account\n        // when found account\n        // convertArrayObjectToArray(customerServicesMenuStore.accountInfo).then(result => {\n        //   customerServicesMenuStore.arrayAccountInfo = result\n        //   setStringSwitch(result)\n        // })\n      }\n\n      const convertArrayObjectToArray = (arrayObject) => {\n        return new Promise((resolve, reject) => {\n          let result = arrayObject.map(a => [a.otp_is_locked, a.main_account_no, a.product_name_english]);\n          resolve(result)\n        })\n      }\n      const replaceNewDataForSetString = () => {\n        let arrayAccountInfo = toJS(customerServicesMenuStore.getAccountInfo)\n        let accountSelected = toJS(customerServicesMenuStore.accountSelected)\n        // let newArray = stringSwitch.filter(accountInfo => accountInfo.accountNumber !== toJS(customerServicesMenuStore.accountSelected.accountNumber))\n        let newArray = arrayAccountInfo.filter(accountInfo => accountInfo.main_account_no !== accountSelected.main_account_no)\n\n        console.log(newArray, arrayAccountInfo)\n        convertArrayObjectToArray([...newArray, accountSelected]).then(result => {\n          console.log(result)\n          setStringSwitch(result)\n        })\n      }\n\n      const closeModal = () => {\n        setVisble(false)\n        setStringSwitch(toJS(customerServicesMenuStore.arrayAccountInfo))\n      };\n      const onChange = (switchSelected, index) => {\n        console.log(switchSelected, index)\n        if (switchSelected === true) {\n          customerServicesMenuStore.accountSelected = toJS(customerServicesMenuStore.getAccountInfo)[index]\n          setVisble(true)\n          setModalString(\n            <div style={{ textAlign: \"center\" }}>\n              <p>{t(\"unlockingOtp\")}</p>\n              <p> {t(\"accountNumber\") + \" \" + customerServicesMenuStore.accountSelected.main_account_no}</p>\n            </div>\n          )\n        } else {\n          // setIsChecked(false)\n        }\n      }\n\n      const unlockOTP = () => {\n        setVisble(false)\n\n        //some action\n        customerServicesMenuStore.accountSelected.otp_is_locked = false\n        replaceNewDataForSetString()\n      }\n\n\n      return (\n        <div style={{ marginTop: 20 }}>\n          <Row gutter={[4, 24]}>\n            <SimpleSearch search={searchIdCardNumber} prefixWording={t(\"idCard\")} loading={customerServicesMenuStore.accountInfoFetching} />\n          </Row>\n          <Row gutter={[4, 24]}>\n            {(showAlertError) ? (<Alert message={customerServicesMenuStore.accountInfoError.responseData.userMessage} type=\"error\" showIcon />) : ('')}\n          </Row>\n          {(isSearch) ? (\n            <SimpleSwitch\n              data={stringSwitch}\n              onChange={(switchSelected, index) => onChange(switchSelected, index)} />\n          ) : ('')}\n          <SimpleModal\n            onOk={() => unlockOTP()}\n            onCancel={() => closeModal()}\n            okText={t(\"confirm\")}\n            cancelText={t(\"cancel\")}\n            modalString={modalString}\n            visible={visible}\n          />\n        </div>\n      )\n    }))\n\nexport default withTranslation('common')(OtpUnlocking)\n"]},"metadata":{},"sourceType":"module"}