{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/product-limit-setup/manage-partner.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { withTranslation } from '../../../i18n';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Popconfirm } from 'antd';\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { addKeyToDataSource, addCommaInData } from '../../data-utility';\nimport SimpleInput from '../../simple-input';\nimport { toJS } from 'mobx';\nconst managePartner = inject('businessParametersSetupStore')(observer(props => {\n  const {\n    businessParametersSetupStore,\n    t\n  } = props;\n  const [form] = Form.useForm();\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const {\n    0: mockDataPartnerList,\n    1: setMockDataPartnerList\n  } = useState([]);\n  const {\n    0: isEnableEditButton,\n    1: setIsEnableEditButton\n  } = useState(true); // var mockDataPartnerList = []\n\n  useEffect(() => {\n    addKeyToDataSource(businessParametersSetupStore.channelPartnerList).then(result => {\n      // mockDataPartnerList = result\n      setMockDataPartnerList(result);\n    });\n  }, []);\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      partner_code: record.product_type,\n      partner_description: record.product_description,\n      transaction_limit: '',\n      daily_limit: ''\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    const inputNode = inputType === 'number' ? __jsx(InputNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 52\n      }\n    }) : __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 70\n      }\n    });\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex == 'product_type' ? 'product_code' : dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: inputType === 'number' ? true : false,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }\n    }, inputNode) : children);\n  };\n\n  const prepareAllLimitToSubmitAndUpdate = () => {\n    if (viewSpecificProduct) {\n      // submitAddSpecificLimit()\n      setModalString(__jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 15\n        }\n      }, \" Add Partner \", selectPartnerAndProduct.type, \" \")));\n    } else {\n      // submitChangeProductLimitSelect()\n      setModalString( //waiting for confirm task\n      __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 15\n        }\n      }, \" Change Product Code \", selectPartnerAndProduct.partner_code, \" Limit \"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }\n      }, \"for \", selectPartnerAndProduct.partner_code, \"/\", selectPartnerAndProduct.partner_abbreviation, \" Channel/Partner !!!\")));\n    }\n\n    setVisble(true);\n    setTitleModal('Confirm');\n    setModalType(\"confirm\");\n  };\n\n  const goBackToProductList = () => {\n    businessParametersSetupStore.goBack = true;\n  };\n\n  const save = async key => {\n    const row = await form.validateFields();\n    const newData = [...mockDataPartnerList];\n    const index = newData.findIndex(item => key === item.key);\n\n    if (index > -1) {\n      const item = newData[index];\n      console.log(_objectSpread(_objectSpread({}, item), row));\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setMockDataPartnerList(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setMockDataPartnerList(newData);\n      setEditingKey('');\n    }\n    /* try {\n      const row = await form.validateFields();\n      const newData = [...mockDataPartnerList];\n      const index = newData.findIndex(item => key === item.key);\n       if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    } */\n\n  };\n\n  const deletePartnerSelect = record => {\n    console.log(toJS(record)); //waiting call api\n  };\n\n  const setEditEnableLimit = () => {};\n\n  const renderAction = record => {\n    /* if (record.status === '1') {\n      return (\n        <div>\n          <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={(e) => { submitDeleteProduct(record) }} disabled={editingKey !== ''}>\n            <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n          </TcrbPopconfirm>\n          <a onClick={() => selectProductToViewDetail(record)}><SettingOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n          <a onClick={() => selectProductToSpecificLimit(record)}><FormOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n        </div>)\n    } else if (record.status === '2') {\n      return null\n    } else {\n      return (<div>\n        <TcrbPopconfirm title={\"Confirm to Add !!!\"} onConfirm={() => { submitAddnewProduct(record.key) }} >\n          <a>Confirm</a>\n        </TcrbPopconfirm><br />\n        <TcrbPopconfirm title={\"Confirm to Cancel !!!\"} onConfirm={() => { cancelAddNewProduct(record.key) }} >\n          <a>Cancel</a>\n        </TcrbPopconfirm>\n      </div>)\n    } */\n    const editable = isEditing(record);\n    return editable ? __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }\n    }, __jsx(TcrbPopconfirm, {\n      title: \"Sure to Delete?\",\n      disabled: editingKey !== '',\n      onConfirm: () => save(record.key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      style: {\n        marginRight: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 15\n      }\n    }, \"Save\")), __jsx(TcrbPopconfirm, {\n      title: \"Sure to cancel?\",\n      onConfirm: cancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \"Cancel\"))) : __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, __jsx(TcrbPopconfirm, {\n      title: \"Sure to Delete?\",\n      disabled: editingKey !== '',\n      onConfirm: () => deletePartnerSelect(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }\n    }, __jsx(DeleteOutlined, {\n      style: {\n        fontSize: '18px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 20\n      }\n    }))), __jsx(\"a\", {\n      disabled: editingKey !== '',\n      onClick: () => edit(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 15\n      }\n    }, __jsx(EditOutlined, {\n      style: {\n        fontSize: '18px',\n        color: '#FBA928'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 76\n      }\n    })));\n    {\n      /* <EditOutlined /> */\n    }\n  };\n\n  const columnPartnerList = [{\n    title: 'Partner / Channel',\n    dataIndex: 'partner_code',\n    render: (text, record) => addCommaInData(text)\n  }, {\n    title: 'Partner Description',\n    dataIndex: 'partner_abbreviation',\n    render: (text, record) => addCommaInData(text)\n  }, {\n    title: 'Txn Limit',\n    dataIndex: 'transaction_limit',\n    editable: true,\n    render: (text, record) => addCommaInData(text, true)\n  }, {\n    title: ' Daily Limit',\n    dataIndex: 'daily_limit',\n    editable: true,\n    render: (text, record) => addCommaInData(text, true)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '5%',\n    render: (text, record, index) => renderAction(record, index)\n  }];\n  const mergedColumns = columnPartnerList.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'product_description' ? 'text' : 'number',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    style: {\n      padding: 24\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }\n  }, \"Product_Code\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, businessParametersSetupStore.productLimitDetail.product_type), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, \"Product_Description\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 13\n    }\n  }, businessParametersSetupStore.productLimitDetail.product_description)), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, \"All-Channel Txn Limit\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }\n  }, \"   \", __jsx(SimpleInput, {\n    defaultValue: businessParametersSetupStore.productLimitDetail.transaction_limit,\n    isInputNumber: false,\n    onChange: e => console.log(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 30\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 13\n    }\n  }, \"All-Channel Daily Limit\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 13\n    }\n  }, \"   \", __jsx(SimpleInput, {\n    defaultValue: businessParametersSetupStore.productLimitDetail.daily_limit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 30\n    }\n  }))), __jsx(Row, {\n    justify: \"end\",\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackToProductList(),\n    shape: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 15\n    }\n  }, \"Back\")), __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, isEnableEditButton ? __jsx(TcrbButton, {\n    shape: \"round\",\n    className: \"primary\",\n    onClick: () => {\n      setEditEnableLimit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 17\n    }\n  }, \"Edit\") : __jsx(TcrbButton, {\n    shape: \"round\",\n    className: \"primary\",\n    onClick: () => {\n      prepareAllLimitToSubmitAndUpdate();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 19\n    }\n  }, \"Submit\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 11\n    }\n  }), __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 11\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: mockDataPartnerList,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  })));\n}));\nexport default withTranslation('common')(managePartner);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/product-limit-setup/manage-partner.js"],"names":["React","useState","useEffect","inject","observer","withTranslation","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Popconfirm","DeleteOutlined","EditOutlined","FormOutlined","TcrbButton","TcrbPopconfirm","addKeyToDataSource","addCommaInData","SimpleInput","toJS","managePartner","props","businessParametersSetupStore","t","form","useForm","editingKey","setEditingKey","isEditing","record","key","mockDataPartnerList","setMockDataPartnerList","isEnableEditButton","setIsEnableEditButton","channelPartnerList","then","result","edit","setFieldsValue","partner_code","product_type","partner_description","product_description","transaction_limit","daily_limit","cancel","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","inputNode","margin","required","message","prepareAllLimitToSubmitAndUpdate","viewSpecificProduct","setModalString","textAlign","selectPartnerAndProduct","type","partner_abbreviation","setVisble","setTitleModal","setModalType","goBackToProductList","goBack","save","row","validateFields","newData","findIndex","item","console","log","splice","push","deletePartnerSelect","setEditEnableLimit","renderAction","editable","marginRight","fontSize","color","columnPartnerList","render","text","width","mergedColumns","map","col","onCell","padding","productLimitDetail","e","marginTop","body","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withTranslation } from '../../../i18n'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Popconfirm } from 'antd'\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\n\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { addKeyToDataSource, addCommaInData } from '../../data-utility'\nimport SimpleInput from '../../simple-input'\nimport { toJS } from 'mobx';\n\nconst managePartner =\n  inject('businessParametersSetupStore')\n    (observer((props) => {\n      const { businessParametersSetupStore, t } = props\n      const [form] = Form.useForm();\n      const [editingKey, setEditingKey] = useState('')\n      const isEditing = record => record.key === editingKey;\n      const [mockDataPartnerList, setMockDataPartnerList] = useState([])\n      const [isEnableEditButton, setIsEnableEditButton] = useState(true)\n      // var mockDataPartnerList = []\n      useEffect(() => {\n        addKeyToDataSource(businessParametersSetupStore.channelPartnerList).then((result) => {\n          // mockDataPartnerList = result\n          setMockDataPartnerList(result)\n        })\n      }, [])\n\n      const edit = record => {\n        form.setFieldsValue({\n          partner_code: record.product_type,\n          partner_description: record.product_description,\n          transaction_limit: '',\n          daily_limit: '',\n          ...record,\n        });\n        setEditingKey(record.key);\n      };\n\n      const cancel = () => {\n        setEditingKey('');\n      };\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n        return (\n          <td {...restProps}>\n            {editing ? (\n\n              <Form.Item\n                name={dataIndex == 'product_type' ? 'product_code' : dataIndex}\n                style={{\n                  margin: 0,\n                }}\n                rules={[\n                  {\n                    required: (inputType === 'number') ? true : false,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                {inputNode}\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        );\n      };\n\n      const prepareAllLimitToSubmitAndUpdate = () => {\n        if (viewSpecificProduct) {\n          // submitAddSpecificLimit()\n          setModalString(\n            <div style={{ textAlign: \"center\" }}>\n              <p> Add Partner {selectPartnerAndProduct.type} </p>\n              {/* <p>for {selectPartnerAndProduct.partner_code}/{selectPartnerAndProduct.partner_abbreviation} Channel/Partner !!!</p> */}\n            </div>\n          )\n        } else {\n          // submitChangeProductLimitSelect()\n\n          setModalString(\n            //waiting for confirm task\n            <div style={{ textAlign: \"center\" }}>\n              <p> Change Product Code {selectPartnerAndProduct.partner_code} Limit </p>\n              <p>for {selectPartnerAndProduct.partner_code}/{selectPartnerAndProduct.partner_abbreviation} Channel/Partner !!!</p>\n            </div>\n          )\n        }\n        setVisble(true)\n        setTitleModal('Confirm')\n        setModalType(\"confirm\")\n      }\n      const goBackToProductList = () => {\n        businessParametersSetupStore.goBack = true\n      }\n\n      const save = async key => {\n        const row = await form.validateFields();\n        const newData = [...mockDataPartnerList];\n        const index = newData.findIndex(item => key === item.key);\n\n        if (index > -1) {\n          const item = newData[index];\n          console.log({ ...item, ...row })\n          newData.splice(index, 1, { ...item, ...row });\n          setMockDataPartnerList(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setMockDataPartnerList(newData);\n          setEditingKey('');\n        }\n        /* try {\n          const row = await form.validateFields();\n          const newData = [...mockDataPartnerList];\n          const index = newData.findIndex(item => key === item.key);\n\n          if (index > -1) {\n            const item = newData[index];\n            newData.splice(index, 1, { ...item, ...row });\n            setData(newData);\n            setEditingKey('');\n          } else {\n            newData.push(row);\n            setData(newData);\n            setEditingKey('');\n          }\n        } catch (errInfo) {\n          console.log('Validate Failed:', errInfo);\n        } */\n      };\n\n      const deletePartnerSelect = (record) => {\n        console.log(toJS(record))\n        //waiting call api\n      }\n\n      const setEditEnableLimit = () => {\n\n      }\n\n      const renderAction = (record) => {\n        /* if (record.status === '1') {\n          return (\n            <div>\n              <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={(e) => { submitDeleteProduct(record) }} disabled={editingKey !== ''}>\n                <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n              </TcrbPopconfirm>\n              <a onClick={() => selectProductToViewDetail(record)}><SettingOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n              <a onClick={() => selectProductToSpecificLimit(record)}><FormOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n            </div>)\n        } else if (record.status === '2') {\n          return null\n        } else {\n          return (<div>\n            <TcrbPopconfirm title={\"Confirm to Add !!!\"} onConfirm={() => { submitAddnewProduct(record.key) }} >\n              <a>Confirm</a>\n            </TcrbPopconfirm><br />\n            <TcrbPopconfirm title={\"Confirm to Cancel !!!\"} onConfirm={() => { cancelAddNewProduct(record.key) }} >\n              <a>Cancel</a>\n            </TcrbPopconfirm>\n          </div>)\n        } */\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <TcrbPopconfirm title=\"Sure to Delete?\" disabled={editingKey !== ''} onConfirm={() => save(record.key)}>\n              <a\n                style={{\n                  marginRight: 8,\n                }}\n              >\n                Save\n            </a>\n            </TcrbPopconfirm>\n            <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </TcrbPopconfirm>\n          </span>\n        ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <TcrbPopconfirm title=\"Sure to Delete?\" disabled={editingKey !== ''} onConfirm={() => deletePartnerSelect(record)}>\n                <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n              </TcrbPopconfirm>\n              <a disabled={editingKey !== ''} onClick={() => edit(record)}><EditOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n            </div>\n          );\n        {/* <EditOutlined /> */ }\n      }\n      const columnPartnerList = [\n        {\n          title: 'Partner / Channel',\n          dataIndex: 'partner_code',\n          render: (text, record) => addCommaInData(text)\n        },\n        {\n          title: 'Partner Description',\n          dataIndex: 'partner_abbreviation',\n          render: (text, record) => addCommaInData(text)\n        },\n        {\n          title: 'Txn Limit',\n          dataIndex: 'transaction_limit',\n          editable: true,\n          render: (text, record) => addCommaInData(text, true)\n        },\n        {\n          title: ' Daily Limit',\n          dataIndex: 'daily_limit',\n          editable: true,\n          render: (text, record) => addCommaInData(text, true)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '5%',\n          render: (text, record, index) =>\n            renderAction(record, index)\n        },\n      ]\n      const mergedColumns = columnPartnerList.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: col.dataIndex === 'product_description' ? 'text' : 'number',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n\n      return (\n        <div style={{ padding: 24 }}>\n          <Row gutter={[4, 24]}>\n            <Col span={6}>Product_Code</Col>\n            <Col span={6}>{businessParametersSetupStore.productLimitDetail.product_type}</Col>\n            <Col span={6}>Product_Description</Col>\n            <Col span={6}>{businessParametersSetupStore.productLimitDetail.product_description}</Col>\n\n          </Row>\n          <Row gutter={[4, 24]}>\n            <Col span={6}>All-Channel Txn Limit</Col>\n            {/* <Col span={6}>{businessParametersSetupStore.productLimitDetail.transaction_limit}</Col> */}\n            <Col span={6}>   <SimpleInput defaultValue={businessParametersSetupStore.productLimitDetail.transaction_limit} isInputNumber={false} onChange={(e) => console.log(e)} /></Col>\n\n            <Col span={6}>All-Channel Daily Limit</Col>\n            {/* <Col span={6}>{businessParametersSetupStore.productLimitDetail.daily_limit}</Col> */}\n            <Col span={6}>   <SimpleInput defaultValue={businessParametersSetupStore.productLimitDetail.daily_limit} />\n            </Col>\n          </Row>\n          <Row justify=\"end\" style={{ marginTop: 8 }}>\n            <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToProductList()} shape=\"round\">Back</TcrbButton>\n            </Col>\n            <Col span={2}>\n              {isEnableEditButton ? (\n                <TcrbButton shape=\"round\" className=\"primary\" onClick={() => { setEditEnableLimit() }}>Edit</TcrbButton>\n              ) : (\n                  <TcrbButton shape=\"round\" className=\"primary\" onClick={() => { prepareAllLimitToSubmitAndUpdate() }}>Submit</TcrbButton>\n                )}\n            </Col>\n          </Row>\n          <Divider />\n          <Form form={form} component={false}>\n            <Table\n              components={{\n                body: {\n                  cell: EditableCell,\n                },\n              }}\n              bordered\n              dataSource={mockDataPartnerList}\n              columns={mergedColumns}\n              size=\"small\"\n            />\n          </Form>\n        </div>\n      )\n    }))\nexport default withTranslation('common')(managePartner)\n"]},"metadata":{},"sourceType":"module"}