{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/manage-menu.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { addKeyToDataSource, checkDefaultStatus } from '../../../data-utility';\nconst {\n  Option\n} = Select;\nlet menuName = null;\nconst ManageMenu = inject('userAccessManagementStore')(observer(props => {\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const {\n    0: textOk,\n    1: setTextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: setTextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('');\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState('');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: isDisableButtonAddFunction,\n    1: setIsDisableButtonAddFunction\n  } = useState(false);\n  const {\n    0: showEditMenu,\n    1: setShowEditMenu\n  } = useState(false);\n  const {\n    0: dataSourceFunction,\n    1: setDataSourceFunction\n  } = useState([]);\n  const {\n    0: isAddFunctionToMenu,\n    1: setIsAddFunctionToMenu\n  } = useState(false);\n  const {\n    0: functionOptionList,\n    1: setFunctionOptionList\n  } = useState([]);\n  const [form] = Form.useForm();\n  const {\n    userAccessManagementStore,\n    t\n  } = props;\n\n  const isEditing = record => record.key === editingKey;\n\n  useEffect(() => {\n    addKeyToDataSource(userAccessManagementStore.menuSelected.functions).then(result => {\n      setDataSourceFunction(result);\n    });\n    userAccessManagementStore.getDataFunctionList();\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.functionOptionList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.functionOptionList).then(result => {\n        setFunctionOptionList(result);\n      });\n    }\n  }, [userAccessManagementStore.functionOptionList]);\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    })) : children);\n  };\n\n  const goBackToMenuList = () => {\n    userAccessManagementStore.nextPageIsManageMenu = false;\n  };\n\n  const addNewFunction = () => {\n    let newFunction = {\n      key: dataSourceFunction.length + 1,\n      name: ''\n    };\n    setDataSourceFunction([...dataSourceFunction, newFunction]);\n    edit(newFunction);\n    setIsDisableButtonAddFunction(true);\n  };\n\n  const addFunction = () => {};\n\n  const submitEditMenuName = () => {\n    let request = {\n      newData: {\n        name: menuName\n      },\n      currentData: userAccessManagementStore.menuSelected\n    };\n    userAccessManagementStore.updateMenu(request);\n    setShowEditMenu(false);\n  };\n\n  const FormAddNewMenu = () => {\n    return __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 15\n      }\n    }, \"Function Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      onChange: value => console.log(value),\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, functionOptionList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.partner_code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 58\n      }\n    }, item.partner_code, \"/\", item.partner_abbreviation)))));\n  };\n\n  const openModalAddFunction = () => {\n    setModalTitle('Add function to Menu');\n    setModalType('confirm');\n    setIsAddFunctionToMenu(true);\n    setModalString(__jsx(FormAddNewMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 24\n      }\n    }));\n    setVisible(true);\n  };\n\n  const openModalSubmitEditMenuName = () => {\n    setModalTitle('Confirm');\n    setModalType('confirm');\n    setModalString(__jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }\n    }, \"Confirm to Change Menu Name \\\"\", userAccessManagementStore.menuSelected.name, \"\\\" to \\\"\", menuName, \"\\\".\"), __jsx(\"p\", {\n      style: {\n        color: orange[6]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, \"Your changes will take effect after being approved.\")));\n    setVisible(true);\n  };\n\n  const cancelEditMenu = () => {\n    setShowEditMenu(false);\n  };\n\n  const submitModal = () => {\n    if (isAddFunctionToMenu == true) {\n      addFunction();\n      setVisible(false);\n      setIsAddFunctionToMenu(false);\n    } else {\n      submitEditMenuName();\n      setVisible(false);\n    }\n  };\n\n  const renderActionFunction = record => {\n    const editable = isEditing(record);\n\n    if (record.request_status === 'APPROVE') {\n      return editable ? __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: () => submitEditFunction(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: () => cancelEditFunction(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 17\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 17\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: () => deactivateFunctionSelect(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 19\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status === 'PENDING') {\n      return null;\n    } else if (record.request_status === 'REJECT') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const columnFunction = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Function Name',\n    dataIndex: 'name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionFunction(record)\n  }];\n  const mergedColumns = columnFunction.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackToMenuList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 15\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }\n  }, \"Menu\"), __jsx(Col, {\n    span: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 13\n    }\n  }, \" \", showEditMenu ? __jsx(SimpleInput, {\n    defaultValue: userAccessManagementStore.menuSelected.name,\n    onChange: value => menuName = value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 15\n    }\n  }) : userAccessManagementStore.menuSelected.name)), __jsx(Row, {\n    justify: \"center\",\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, showEditMenu ? __jsx(Space, {\n    size: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 17\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => {\n      cancelEditMenu();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 19\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      openModalSubmitEditMenuName();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 19\n    }\n  }, \"Submit\")) : __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      setShowEditMenu(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 17\n    }\n  }, \"Edit\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddFunction(),\n    disabled: isDisableButtonAddFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  }, \"Add Function\"))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    flex: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 13\n    }\n  }, __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 15\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: dataSourceFunction,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 17\n    }\n  })))), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => submitModal(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default ManageMenu;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/manage-menu.js"],"names":["React","useEffect","useState","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","inject","observer","orange","green","gold","TcrbButton","TcrbPopconfirm","SimpleModal","SimpleInput","addKeyToDataSource","checkDefaultStatus","Option","menuName","ManageMenu","props","editingKey","setEditingKey","textOk","setTextOk","textCancel","setTextCancel","modalString","setModalString","modalType","setModalType","modalTitle","setModalTitle","visible","setVisible","isDisableButtonAddFunction","setIsDisableButtonAddFunction","showEditMenu","setShowEditMenu","dataSourceFunction","setDataSourceFunction","isAddFunctionToMenu","setIsAddFunctionToMenu","functionOptionList","setFunctionOptionList","form","useForm","userAccessManagementStore","t","isEditing","record","key","menuSelected","functions","then","result","getDataFunctionList","length","edit","setFieldsValue","name","status","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","margin","required","message","goBackToMenuList","nextPageIsManageMenu","addNewFunction","newFunction","addFunction","submitEditMenuName","request","newData","currentData","updateMenu","FormAddNewMenu","value","console","log","width","map","item","partner_code","partner_abbreviation","openModalAddFunction","openModalSubmitEditMenuName","textAlign","color","cancelEditMenu","submitModal","renderActionFunction","editable","request_status","submitEditFunction","marginRight","cancelEditFunction","deactivateFunctionSelect","columnFunction","render","text","mergedColumns","col","onCell","marginTop","body","cell"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles'\n\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\nimport { addKeyToDataSource, checkDefaultStatus } from '../../../data-utility'\nconst { Option } = Select\nlet menuName = null\n\nconst ManageMenu =\n  inject('userAccessManagementStore')\n    (observer((props) => {\n      const [editingKey, setEditingKey] = useState('')\n      const [textOk, setTextOk] = useState(\"Submit\")\n      const [textCancel, setTextCancel] = useState(\"Cancel\")\n      const [modalString, setModalString] = useState(\"\")\n      const [modalType, setModalType] = useState('')\n      const [modalTitle, setModalTitle] = useState('')\n      const [visible, setVisible] = useState(false)\n      const [isDisableButtonAddFunction, setIsDisableButtonAddFunction] = useState(false)\n      const [showEditMenu, setShowEditMenu] = useState(false)\n      const [dataSourceFunction, setDataSourceFunction] = useState([])\n      const [isAddFunctionToMenu, setIsAddFunctionToMenu] = useState(false)\n      const [functionOptionList, setFunctionOptionList] = useState([])\n\n      const [form] = Form.useForm();\n\n      const { userAccessManagementStore, t } = props\n      const isEditing = record => record.key === editingKey\n\n      useEffect(() => {\n        addKeyToDataSource(userAccessManagementStore.menuSelected.functions).then(result => {\n          setDataSourceFunction(result)\n        })\n        userAccessManagementStore.getDataFunctionList()\n      }, [])\n\n      useEffect(() => {\n        if (userAccessManagementStore.functionOptionList.length >= 0) {\n          addKeyToDataSource(userAccessManagementStore.functionOptionList).then(result => {\n            setFunctionOptionList(result)\n          })\n        }\n\n      }, [userAccessManagementStore.functionOptionList])\n\n      const edit = record => {\n        form.setFieldsValue({\n          name: '',\n          status: record.status,\n          ...record,\n        });\n        setEditingKey(record.key);\n      }\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        return (\n          <td {...restProps}>\n            {editing ? (\n              <Form.Item\n                name={dataIndex}\n                style={{\n                  margin: 0\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        )\n      }\n      const goBackToMenuList = () => {\n        userAccessManagementStore.nextPageIsManageMenu = false\n\n      }\n\n      const addNewFunction = () => {\n        let newFunction = {\n          key: dataSourceFunction.length + 1,\n          name: ''\n        }\n        setDataSourceFunction([...dataSourceFunction, newFunction])\n        edit(newFunction)\n        setIsDisableButtonAddFunction(true)\n      }\n\n      const addFunction = () => {\n\n      }\n\n      const submitEditMenuName = () => {\n        let request = {\n          newData: {\n            name: menuName\n          },\n          currentData: userAccessManagementStore.menuSelected\n        }\n        userAccessManagementStore.updateMenu(request)\n        setShowEditMenu(false)\n      }\n\n      const FormAddNewMenu = () => {\n        return (\n          <Row>\n            <Col span={10} >\n              <span>\n                Function Name\n              </span>\n            </Col>\n            <Col span={14}>\n              {/* <SimpleInput onChange={(value) => functionName = value} /> */}\n              <Select\n                onChange={(value) => console.log(value)}\n                style={{ width: '100%' }}\n              >\n                {functionOptionList.map((item, index) => <Option key={index} value={item.partner_code}>{item.partner_code}/{item.partner_abbreviation}</Option>)}\n              </Select>\n            </Col>\n          </Row>\n        )\n      }\n\n      const openModalAddFunction = () => {\n        setModalTitle('Add function to Menu')\n        setModalType('confirm')\n        setIsAddFunctionToMenu(true)\n        setModalString(<FormAddNewMenu />)\n        setVisible(true)\n      }\n\n      const openModalSubmitEditMenuName = () => {\n        setModalTitle('Confirm')\n        setModalType('confirm')\n        setModalString(\n          <div style={{ textAlign: \"center\" }}>\n            <p>Confirm to Change Menu Name \"{userAccessManagementStore.menuSelected.name}\" to \"{menuName}\".</p>\n            <p style={{ color: orange[6] }}>Your changes will take effect after being approved.</p>\n          </div>\n        )\n        setVisible(true)\n      }\n\n      const cancelEditMenu = () => {\n        setShowEditMenu(false)\n      }\n\n      const submitModal = () => {\n        if (isAddFunctionToMenu == true) {\n          addFunction()\n          setVisible(false)\n          setIsAddFunctionToMenu(false)\n        } else {\n          submitEditMenuName()\n          setVisible(false)\n        }\n      }\n\n      const renderActionFunction = (record) => {\n        const editable = isEditing(record);\n        if (record.request_status === 'APPROVE') {\n          return editable ? (\n            <span>\n              <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => submitEditFunction(record.key)}>\n                <a style={{ marginRight: 8, }}>\n                  Save\n                  </a>\n              </TcrbPopconfirm>\n              <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={() => cancelEditFunction()}>\n                <a style={{ color: '#3e3e3e' }}>Cancel</a>\n              </TcrbPopconfirm>\n            </span>\n          ) : (\n              <div style={{ textAlign: \"center\" }}>\n                <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                  Edit\n                  </a>\n                <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateFunctionSelect(record)}>\n                  <a style={{ color: '#FBA928' }}>Deactivate</a>\n                </TcrbPopconfirm>\n              </div>\n            );\n        } else if (record.request_status === 'PENDING') {\n          return null\n        } else if (record.request_status === 'REJECT') {\n          return null\n        }\n        else {\n          return null\n        }\n      }\n\n      const columnFunction = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n        },\n        {\n          title: 'Function Name',\n          dataIndex: 'name',\n          editable: true,\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '10%',\n          render: (text, record) => renderActionFunction(record)\n        }\n      ]\n\n      const mergedColumns = columnFunction.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: 'text',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToMenuList()}>Back</TcrbButton>\n            </Col>\n          </Row>\n          <Row gutter={[4, 24]}>\n            <Col span={5}>Menu</Col>\n            <Col span={7}> {showEditMenu ?\n              <SimpleInput defaultValue={userAccessManagementStore.menuSelected.name} onChange={(value) => menuName = value} /> : userAccessManagementStore.menuSelected.name\n            }\n            </Col>\n          </Row>\n\n          <Row justify=\"center\" style={{ marginTop: 8 }}>\n            <Col span={4}>\n              {showEditMenu ?\n                <Space size={8}>\n                  <TcrbButton className=\"default\" onClick={() => { cancelEditMenu() }} >Cancel</TcrbButton>\n                  <TcrbButton className=\"primary\" onClick={() => { openModalSubmitEditMenuName() }} >Submit</TcrbButton>\n                </Space>\n                :\n                <TcrbButton className=\"primary\" onClick={() => { setShowEditMenu(true) }} >Edit</TcrbButton>}\n            </Col>\n          </Row>\n          <Divider />\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"primary\" onClick={() => openModalAddFunction()} disabled={isDisableButtonAddFunction}>Add Function</TcrbButton>\n            </Col>\n          </Row>\n          <Row>\n            <Col flex={100}>\n              <Form form={form} component={false}>\n                <Table\n                  components={{\n                    body: {\n                      cell: EditableCell,\n                    },\n                  }}\n                  bordered\n                  dataSource={dataSourceFunction}\n                  columns={mergedColumns}\n                  size=\"small\"\n                />\n              </Form>\n            </Col>\n          </Row>\n          <SimpleModal\n            title={modalTitle}\n            type={modalType}\n            onOk={() => submitModal()}\n            onCancel={() => setVisible(false)}\n            textCancel={textCancel}\n            textOk={textOk}\n            width={600}\n            modalString={modalString}\n            visible={visible}\n          />\n\n        </div>\n      )\n    }))\n\nexport default ManageMenu\n"]},"metadata":{},"sourceType":"module"}