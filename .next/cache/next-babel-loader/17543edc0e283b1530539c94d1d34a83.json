{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './api-integrations/header';\nimport getGeneralApiProblem from './api-integrations/error-handler';\nimport https from 'https';\nimport axios from 'axios';\n\nvar BusinessParameterSetupApi = function BusinessParameterSetupApi() {\n  _classCallCheck(this, BusinessParameterSetupApi);\n\n  this.getOtpValue = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n      var api, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              api = create(Header());\n              console.log(\"header : \", Header());\n              _context.next = 4;\n              return api.get('api/backoffice/v1/parameterstore', params);\n\n            case 4:\n              response = _context.sent;\n              console.log(\"response get OTP  :  \", response);\n              return _context.abrupt(\"return\", response);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  this.setOtpValue = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n      var api, response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              api = create(Header());\n              _context2.next = 3;\n              return api.put('api/backoffice/v1/parameterstore', params);\n\n            case 3:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", response);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  this.getProductLimit = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(params) {\n      var api, response;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              api = create(Header());\n              _context3.next = 3;\n              return api.get('api/backoffice/v1/partnertransactionlimit', params);\n\n            case 3:\n              response = _context3.sent;\n              return _context3.abrupt(\"return\", response);\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  this.getOtpValueAxios = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(params) {\n      var httpsAgent, response;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              httpsAgent = new https.Agent({\n                rejectUnauthorized: false,\n                requestCert: false\n              });\n              console.log(\"HTTPS AGENT : \", httpsAgent);\n              _context4.next = 4;\n              return axios({\n                url: 'https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore',\n                // url: 'https://api-dev.onlinebanking-backoffice.com/api/backoffice/v1/parameterstore',\n                method: 'GET',\n                params: params,\n                responseType: 'json',\n                httpsAgent: httpsAgent,\n                headers: {\n                  'Content-Type': 'application/json',\n                  'Accept': 'application/json',\n                  // 'Access-Control-Allow-Origin': \"*\",\n                  'x-apigw-api-id': \"dwl8p0fxml\",\n                  \"Access-Control-Allow-Origin\": \"*\",\n                  // Required for CORS support to work\n                  \"Access-Control-Allow-Credentials\": true // Required for cookies, authorization headers with HTTPS\n                  // 'x-api-language': \"TH\",\n                  // 'x-api-key': '',\n                  // 'x-api-signature': 'a94ks02304ldfgkorm1234llgdmfk',\n                  // 'uuid': 'YYYYYYYY',\n\n                },\n                timeout: 15000\n              }).then(function (data) {\n                console.log(\"AXIOS CALLLL : \", data);\n                return data;\n              })[\"catch\"](function (err) {\n                console.log(\"AXIOS ERROR : \", err);\n                return err;\n              });\n\n            case 4:\n              response = _context4.sent;\n              return _context4.abrupt(\"return\", response);\n\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  this.getPartnerChannel = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(params) {\n      var api, response;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              api = create(header);\n              _context5.next = 3;\n              return api.get('api/backoffice/v1/partnertransactionlimit', params);\n\n            case 3:\n              response = _context5.sent;\n              return _context5.abrupt(\"return\", response);\n\n            case 5:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n} // submitPartnerLimit = async (params) => {\n//   const api = create(header)\n// }\n;\n\nexport default new BusinessParameterSetupApi(); // HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/business-parameter-setup-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","getGeneralApiProblem","https","axios","BusinessParameterSetupApi","getOtpValue","params","api","console","log","get","response","setOtpValue","put","getProductLimit","getOtpValueAxios","httpsAgent","Agent","rejectUnauthorized","requestCert","url","method","responseType","headers","timeout","then","data","err","getPartnerChannel","header"],"mappings":"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","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './api-integrations/header'\nimport getGeneralApiProblem from './api-integrations/error-handler'\nimport https from 'https';\nimport axios from 'axios'\n\nclass BusinessParameterSetupApi {\n\n  getOtpValue = async (params) => {\n    const api = create(Header())\n    console.log(\"header : \", Header())\n    const response = await api.get('api/backoffice/v1/parameterstore', params)\n    console.log(\"response get OTP  :  \", response)\n    return response\n  }\n\n  setOtpValue = async (params) => {\n    const api = create(Header())\n    const response = await api.put('api/backoffice/v1/parameterstore', params)\n    return response\n  }\n\n  getProductLimit = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  getOtpValueAxios = async (params) => {\n    const httpsAgent = new https.Agent({\n      rejectUnauthorized: false,\n      requestCert: false,\n    })\n    console.log(\"HTTPS AGENT : \", httpsAgent)\n    const response = await axios({\n      url: 'https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore',\n      // url: 'https://api-dev.onlinebanking-backoffice.com/api/backoffice/v1/parameterstore',\n      method: 'GET',\n      params,\n      responseType: 'json',\n      httpsAgent,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n\n        // 'Access-Control-Allow-Origin': \"*\",\n        'x-apigw-api-id': \"dwl8p0fxml\",\n        \"Access-Control-Allow-Origin\" : \"*\", // Required for CORS support to work\n        \"Access-Control-Allow-Credentials\" : true // Required for cookies, authorization headers with HTTPS\n\n        // 'x-api-language': \"TH\",\n        // 'x-api-key': '',\n        // 'x-api-signature': 'a94ks02304ldfgkorm1234llgdmfk',\n        // 'uuid': 'YYYYYYYY',\n      },\n      timeout: 15000\n    }).then(data => {\n      console.log(\"AXIOS CALLLL : \", data)\n      return data\n    }).catch(err => {\n      console.log(\"AXIOS ERROR : \", err)\n      return err\n    })\n    return response\n  }\n\n  getPartnerChannel = async (params) => {\n    const api = create(header)\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n}\nexport default new BusinessParameterSetupApi()\n// HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n"]},"metadata":{},"sourceType":"module"}