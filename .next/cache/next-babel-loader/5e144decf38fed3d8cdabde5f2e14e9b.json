{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/user/user-list.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { Formik, Field, Form, useFormik } from \"formik\";\nimport SimpleInput from '../../simple-input';\n\nconst UserList = () => {\n  const [visible, setvisible] = useState(false);\n\n  const SignupForm = () => {\n    // Pass the useFormik() hook initial form values and a submit function that will\n    // be called when the form is submitted\n    const formik = useFormik({\n      initialValues: {\n        email: ''\n      },\n      onSubmit: values => {\n        alert(JSON.stringify(values, null, 2));\n      }\n    });\n    return __jsx(\"form\", {\n      onSubmit: formik.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, \"Email Address\"), __jsx(Input, {\n      id: \"email\",\n      name: \"email\",\n      type: \"email\",\n      onChange: formik.handleChange,\n      value: formik.values.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }), __jsx(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, \"Submit\"));\n  };\n\n  const CollectionCreateForm = ({\n    visible,\n    onCreate,\n    onCancel\n  }) => {\n    const [form] = Form.useForm();\n    return __jsx(Modal, {\n      visible: visible,\n      title: \"Create a new collection\",\n      okText: \"Create\",\n      cancelText: \"Cancel\",\n      onCancel: onCancel,\n      onOk: () => {\n        form.validateFields().then(values => {\n          form.resetFields();\n          onCreate(values);\n        }).catch(info => {\n          console.log('Validate Failed:', info);\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }\n    }, __jsx(Form, {\n      form: form,\n      layout: \"vertical\",\n      name: \"form_in_modal\",\n      initialValues: {\n        modifier: 'public'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, __jsx(Form.Item, {\n      name: \"title\",\n      label: \"Title\",\n      rules: [{\n        required: true,\n        message: 'Please input the title of collection!'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Item, {\n      name: \"description\",\n      label: \"Description\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }\n    }, __jsx(Input, {\n      type: \"textarea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    })), __jsx(Form.Item, {\n      name: \"modifier\",\n      className: \"collection-create-form_last-form-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 11\n      }\n    }, __jsx(Radio.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }, __jsx(Radio, {\n      value: \"public\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 15\n      }\n    }, \"Public\"), __jsx(Radio, {\n      value: \"private\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, \"Private\")))));\n  };\n\n  const onCreate = values => {\n    console.log('Received values of form: ', values);\n    setVisible(false);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => setvisible(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, \"Add User\"))), __jsx(CollectionCreateForm, {\n    visible: visible,\n    onCreate: () => onCreate(),\n    onCancel: () => {\n      setVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default UserList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/user/user-list.js"],"names":["React","Table","Row","Col","Menu","Card","Input","Select","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","Formik","Field","Form","useFormik","SimpleInput","UserList","visible","setvisible","useState","SignupForm","formik","initialValues","email","onSubmit","values","alert","JSON","stringify","handleSubmit","handleChange","CollectionCreateForm","onCreate","onCancel","form","useForm","validateFields","then","resetFields","catch","info","console","log","modifier","required","message","setVisible"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { Formik, Field, Form, useFormik } from \"formik\";\n\nimport SimpleInput from '../../simple-input'\n\nconst UserList = () => {\n  const [visible, setvisible] = useState(false)\n\n  const SignupForm = () => {\n    // Pass the useFormik() hook initial form values and a submit function that will\n    // be called when the form is submitted\n    const formik = useFormik({\n      initialValues: {\n        email: '',\n      },\n      onSubmit: values => {\n        alert(JSON.stringify(values, null, 2));\n      },\n    });\n    return (\n      <form onSubmit={formik.handleSubmit}>\n        <label htmlFor=\"email\">Email Address</label>\n        <Input\n          id=\"email\"\n          name=\"email\"\n          type=\"email\"\n          onChange={formik.handleChange}\n          value={formik.values.email}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    );\n  };\n\n  const CollectionCreateForm = ({ visible, onCreate, onCancel }) => {\n    const [form] = Form.useForm();\n    return (\n      <Modal\n        visible={visible}\n        title=\"Create a new collection\"\n        okText=\"Create\"\n        cancelText=\"Cancel\"\n        onCancel={onCancel}\n        onOk={() => {\n          form\n            .validateFields()\n            .then(values => {\n              form.resetFields();\n              onCreate(values);\n            })\n            .catch(info => {\n              console.log('Validate Failed:', info);\n            });\n        }}\n      >\n        <Form\n          form={form}\n          layout=\"vertical\"\n          name=\"form_in_modal\"\n          initialValues={{\n            modifier: 'public',\n          }}\n        >\n          <Form.Item\n            name=\"title\"\n            label=\"Title\"\n            rules={[\n              {\n                required: true,\n                message: 'Please input the title of collection!',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item name=\"description\" label=\"Description\">\n            <Input type=\"textarea\" />\n          </Form.Item>\n          <Form.Item name=\"modifier\" className=\"collection-create-form_last-form-item\">\n            <Radio.Group>\n              <Radio value=\"public\">Public</Radio>\n              <Radio value=\"private\">Private</Radio>\n            </Radio.Group>\n          </Form.Item>\n        </Form>\n      </Modal>\n    );\n  }\n\n  const onCreate = values => {\n    console.log('Received values of form: ', values);\n    setVisible(false);\n  }\n\n  return (\n    <div>\n      <Row gutter={[4, 24]}>\n        <Col span={2}>\n          <TcrbButton className=\"primary\" onClick={() => setvisible(true)} >Add User</TcrbButton>\n        </Col>\n      </Row>\n      {/* <SignupForm /> */}\n      <CollectionCreateForm\n        visible={visible}\n        onCreate={() => onCreate()}\n        onCancel={() => {\n          setVisible(false);\n        }}\n      />\n      {/* <Formik\n        initialValues={{ name: \"\", email: \"\" }}\n        onSubmit={async values => {\n          await new Promise(resolve => setTimeout(resolve, 500));\n          alert(JSON.stringify(values, null, 2));\n        }}\n      >\n        <Form>\n          <Field name=\"name\" type=\"text\" />\n          <Field name=\"email\" type=\"email\" />\n          <button type=\"submit\">Submit</button>\n        </Form>\n      </Formik> */}\n    </div>\n  )\n}\n\nexport default UserList\n"]},"metadata":{},"sourceType":"module"}