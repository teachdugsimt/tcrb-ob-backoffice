{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './header';\nimport https from 'https';\nvar httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n  requestCert: false\n});\n\nvar ExcuteApi = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, params, method) {\n    var api, response;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            api = create(Header());\n\n            if (!(method == \"get\" || method == \"GET\")) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 5;\n            return api.get(url, params ? params : {\n              filter: {}\n            });\n\n          case 5:\n            response = _context.sent;\n            _context.next = 30;\n            break;\n\n          case 8:\n            if (!(method == \"post\" || method == \"POST\")) {\n              _context.next = 14;\n              break;\n            }\n\n            _context.next = 11;\n            return api.post(url, params);\n\n          case 11:\n            response = _context.sent;\n            _context.next = 30;\n            break;\n\n          case 14:\n            if (!(method == \"put\" || method == \"PUT\")) {\n              _context.next = 20;\n              break;\n            }\n\n            _context.next = 17;\n            return api.put(url, params);\n\n          case 17:\n            response = _context.sent;\n            _context.next = 30;\n            break;\n\n          case 20:\n            if (!(method == \"patch\" || method == \"PATCH\")) {\n              _context.next = 26;\n              break;\n            }\n\n            _context.next = 23;\n            return api.patch(url, params);\n\n          case 23:\n            response = _context.sent;\n            _context.next = 30;\n            break;\n\n          case 26:\n            if (!(method == \"delete\" || method == \"DELETE\")) {\n              _context.next = 30;\n              break;\n            }\n\n            _context.next = 29;\n            return api[\"delete\"](url, params);\n\n          case 29:\n            response = _context.sent;\n\n          case 30:\n            return _context.abrupt(\"return\", response);\n\n          case 33:\n            _context.prev = 33;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", _context.t0);\n\n          case 36:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 33]]);\n  }));\n\n  return function ExcuteApi(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n_c = ExcuteApi;\nexport default ExcuteApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"ExcuteApi\");","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/api-integrations/excute-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","https","httpsAgent","Agent","rejectUnauthorized","requestCert","ExcuteApi","url","params","method","api","get","filter","response","post","put","patch"],"mappings":";;AAAA,SAASA,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,UAAtD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,IAAMC,UAAU,GAAG,IAAID,KAAK,CAACE,KAAV,CAAgB;AACjCC,EAAAA,kBAAkB,EAAE,KADa;AAEjCC,EAAAA,WAAW,EAAE;AAFoB,CAAhB,CAAnB;;AAMA,IAAMC,SAAS;AAAA,sEAAG,iBAAOC,GAAP,EAAYC,MAAZ,EAAoBC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAERC,YAAAA,GAFQ,GAEFZ,MAAM,CAACE,MAAM,EAAP,CAFJ;;AAAA,kBAIVS,MAAM,IAAI,KAAV,IAAmBA,MAAM,IAAI,KAJnB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKKC,GAAG,CAACC,GAAJ,CAAQJ,GAAR,EAAaC,MAAM,GAAGA,MAAH,GAAY;AAAEI,cAAAA,MAAM,EAAE;AAAV,aAA/B,CALL;;AAAA;AAKZC,YAAAA,QALY;AAAA;AAAA;;AAAA;AAAA,kBAOLJ,MAAM,IAAI,MAAV,IAAoBA,MAAM,IAAI,MAPzB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAQKC,GAAG,CAACI,IAAJ,CAASP,GAAT,EAAcC,MAAd,CARL;;AAAA;AAQZK,YAAAA,QARY;AAAA;AAAA;;AAAA;AAAA,kBAULJ,MAAM,IAAI,KAAV,IAAmBA,MAAM,IAAI,KAVxB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAWKC,GAAG,CAACK,GAAJ,CAAQR,GAAR,EAAaC,MAAb,CAXL;;AAAA;AAWZK,YAAAA,QAXY;AAAA;AAAA;;AAAA;AAAA,kBAaLJ,MAAM,IAAI,OAAV,IAAqBA,MAAM,IAAI,OAb1B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAcKC,GAAG,CAACM,KAAJ,CAAUT,GAAV,EAAeC,MAAf,CAdL;;AAAA;AAcZK,YAAAA,QAdY;AAAA;AAAA;;AAAA;AAAA,kBAgBLJ,MAAM,IAAI,QAAV,IAAsBA,MAAM,IAAI,QAhB3B;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAiBKC,GAAG,UAAH,CAAWH,GAAX,EAAgBC,MAAhB,CAjBL;;AAAA;AAiBZK,YAAAA,QAjBY;;AAAA;AAAA,6CAmBPA,QAnBO;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATP,SAAS;AAAA;AAAA;AAAA,GAAf;;KAAMA,S;AAyBN,eAAeA,SAAf","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './header'\nimport https from 'https';\nconst httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n  requestCert: false,\n\n})\n\nconst ExcuteApi = async (url, params, method) => {\n  try {\n    const api = create(Header())\n    let response\n    if (method == \"get\" || method == \"GET\") {\n      response = await api.get(url, params ? params : { filter: {} })\n    }\n    else if (method == \"post\" || method == \"POST\") {\n      response = await api.post(url, params)\n    }\n    else if (method == \"put\" || method == \"PUT\") {\n      response = await api.put(url, params)\n    }\n    else if (method == \"patch\" || method == \"PATCH\") {\n      response = await api.patch(url, params)\n    }\n    else if (method == \"delete\" || method == \"DELETE\") {\n      response = await api.delete(url, params)\n    }\n    return response\n  } catch (error) {\n    return error\n  }\n}\n\nexport default ExcuteApi\n"]},"metadata":{},"sourceType":"module"}