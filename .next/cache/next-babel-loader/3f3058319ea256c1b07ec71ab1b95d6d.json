{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _descriptor24, _descriptor25, _descriptor26, _descriptor27, _descriptor28, _descriptor29, _descriptor30, _descriptor31, _descriptor32, _descriptor33, _descriptor34, _descriptor35, _descriptor36, _descriptor37, _descriptor38, _descriptor39, _descriptor40, _descriptor41, _descriptor42, _descriptor43, _descriptor44, _descriptor45, _descriptor46, _descriptor47, _descriptor48, _descriptor49, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action, toJS } from 'mobx';\nimport { UserAccessManagementApi } from '../services';\nlet UserAccessManagement = (_class = (_temp = class UserAccessManagement {\n  constructor() {\n    _initializerDefineProperty(this, \"apiFetching\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"responseApiError\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageDepartment\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageGroup\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageUser\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageMenu\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageFunction\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageRole\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"departmentList\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"functionList\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"menuList\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"functionListInMenu\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"functionOptionList\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"groupList\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"userList\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"roleList\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"departmentSelected\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"groupSelected\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"userSelected\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"menuSelected\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"responseDeleteSection\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"getDataDepartment\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"getDataDepartmentDetail\", _descriptor23, this);\n\n    _initializerDefineProperty(this, \"getDataGroup\", _descriptor24, this);\n\n    _initializerDefineProperty(this, \"getDataGroupDetail\", _descriptor25, this);\n\n    _initializerDefineProperty(this, \"getDataFunction\", _descriptor26, this);\n\n    _initializerDefineProperty(this, \"getDataMenu\", _descriptor27, this);\n\n    _initializerDefineProperty(this, \"getDataGroup\", _descriptor28, this);\n\n    _initializerDefineProperty(this, \"getDataUser\", _descriptor29, this);\n\n    _initializerDefineProperty(this, \"getDataFunctionList\", _descriptor30, this);\n\n    _initializerDefineProperty(this, \"getDataFunctionListInMenu\", _descriptor31, this);\n\n    _initializerDefineProperty(this, \"getDataRole\", _descriptor32, this);\n\n    _initializerDefineProperty(this, \"getDataSectionList\", _descriptor33, this);\n\n    _initializerDefineProperty(this, \"submitAddNewDepartment\", _descriptor34, this);\n\n    _initializerDefineProperty(this, \"submitAddNewSection\", _descriptor35, this);\n\n    _initializerDefineProperty(this, \"submitAddNewFunction\", _descriptor36, this);\n\n    _initializerDefineProperty(this, \"submitAddNewMenu\", _descriptor37, this);\n\n    _initializerDefineProperty(this, \"submitAddNewRole\", _descriptor38, this);\n\n    _initializerDefineProperty(this, \"submitAddFunctionToMenu\", _descriptor39, this);\n\n    _initializerDefineProperty(this, \"updateDepartment\", _descriptor40, this);\n\n    _initializerDefineProperty(this, \"updateSection\", _descriptor41, this);\n\n    _initializerDefineProperty(this, \"updateFunction\", _descriptor42, this);\n\n    _initializerDefineProperty(this, \"updateMenu\", _descriptor43, this);\n\n    _initializerDefineProperty(this, \"updateRole\", _descriptor44, this);\n\n    _initializerDefineProperty(this, \"submitDeleteDepartment\", _descriptor45, this);\n\n    _initializerDefineProperty(this, \"submitDeleteSection\", _descriptor46, this);\n\n    _initializerDefineProperty(this, \"submitDeleteFunction\", _descriptor47, this);\n\n    _initializerDefineProperty(this, \"submitDeleteMenu\", _descriptor48, this);\n\n    _initializerDefineProperty(this, \"submitDeleteRole\", _descriptor49, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"apiFetching\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"responseApiError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageDepartment\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageGroup\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageUser\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageMenu\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageFunction\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageRole\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"departmentList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"functionList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"menuList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"functionListInMenu\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"functionOptionList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"groupList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"userList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"roleList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"departmentSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"groupSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"userSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"menuSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"responseDeleteSection\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"getDataDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getDepartment({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.departmentList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"getDataDepartmentDetail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getDepartmentDetail(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor24 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroup\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroup(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor25 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroupDetail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroupDetail(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor26 = _applyDecoratedDescriptor(_class.prototype, \"getDataFunction\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getFunction({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor27 = _applyDecoratedDescriptor(_class.prototype, \"getDataMenu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getMenu({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.menuList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor28 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroup\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroup({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.groupList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor29 = _applyDecoratedDescriptor(_class.prototype, \"getDataUser\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getUser({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.userList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor30 = _applyDecoratedDescriptor(_class.prototype, \"getDataFunctionList\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getFunction({\n        filter: {\n          where: {\n            $and: [{\n              status: \"ACTIVE\"\n            }, {\n              menu_id: null\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionOptionList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor31 = _applyDecoratedDescriptor(_class.prototype, \"getDataFunctionListInMenu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getFunction({\n        filter: {\n          where: {\n            $and: [{\n              menu_id: params\n            }, {\n              $or: [{\n                status: \"ACTIVE\"\n              }, {\n                $and: [{\n                  status: \"INACTIVE\"\n                }, {\n                  request_status: \"PENDING\"\n                }]\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionListInMenu = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor32 = _applyDecoratedDescriptor(_class.prototype, \"getDataRole\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getRole({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.roleList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor33 = _applyDecoratedDescriptor(_class.prototype, \"getDataSectionList\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getSection({\n        filter: {\n          where: {\n            status: \"ACTIVE\"\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.roleList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor34 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewDepartment({\n        change_type: \"DEPARTMENTS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.departmentList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor35 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewSection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewDepartment({\n        change_type: \"SECTIONS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.departmentList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor36 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewFunction\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewFunction({\n        change_type: \"FUNCTIONS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionList = [];\n        this.apiFetching = false;\n        this.getDataFunction();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor37 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewMenu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewFunction({\n        change_type: \"MENUS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.menuList = [];\n        this.apiFetching = false;\n        this.getDataMenu();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor38 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewRole\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewRole({\n        change_type: \"ROLES\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.roleList = [];\n        this.apiFetching = false;\n        this.getDataRole();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor39 = _applyDecoratedDescriptor(_class.prototype, \"submitAddFunctionToMenu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addFunctionToMenu({\n        change_type: \"FUNCTIONS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionList = [];\n        this.apiFetching = false;\n        this.getDataFunction();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor40 = _applyDecoratedDescriptor(_class.prototype, \"updateDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateDepartment({\n        change_type: \"DEPARTMENTS\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor41 = _applyDecoratedDescriptor(_class.prototype, \"updateSection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateSection({\n        change_type: \"SECTIONS\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor42 = _applyDecoratedDescriptor(_class.prototype, \"updateFunction\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateFunction({\n        change_type: \"FUNCTIONS\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionList = [];\n        this.apiFetching = false;\n        this.getDataFunction();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor43 = _applyDecoratedDescriptor(_class.prototype, \"updateMenu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateMenu({\n        change_type: \"MENUS\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor44 = _applyDecoratedDescriptor(_class.prototype, \"updateRole\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateRole({\n        change_type: \"ROLES\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.roleList = [];\n        this.apiFetching = false;\n        this.getDataRole();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor45 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteDepartment({\n        change_type: \"DEPARTMENTS\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n        this.departmentList = [];\n        this.getDataDepartment();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor46 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteSection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteDepartment({\n        change_type: \"SECTIONS\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n        this.responseDeleteSection = true;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor47 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteFunction\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteFunction({\n        change_type: \"FUNCTIONS\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.functionList = [];\n        this.apiFetching = false;\n        this.getDataFunction();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor48 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteMenu\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteMenu({\n        change_type: \"MENUS\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.menuList = [];\n        this.apiFetching = false;\n        this.getDataMenu();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor49 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteRole\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteRole({\n        change_type: \"ROLES\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.roleList = [];\n        this.apiFetching = false;\n        this.getDataRole();\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n})), _class);\nexport { UserAccessManagement as default };","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/user-access-management-store.js"],"names":["observable","action","toJS","UserAccessManagementApi","UserAccessManagement","apiFetching","tmp","getDepartment","filter","where","$or","status","$and","request_status","console","log","ok","departmentList","data","responseData","responseApiError","getDepartmentDetail","params","getGroup","getGroupDetail","getFunction","functionList","getMenu","menuList","groupList","getUser","userList","menu_id","functionOptionList","functionListInMenu","getRole","roleList","getSection","addNewDepartment","change_type","currentData","newData","maker_id","addNewFunction","getDataFunction","getDataMenu","addNewRole","getDataRole","addFunctionToMenu","updateDepartment","updateSection","updateFunction","updateMenu","updateRole","deleteDepartment","getDataDepartment","responseDeleteSection","deleteFunction","deleteMenu","deleteRole"],"mappings":"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","sourcesContent":["import { observable, action, toJS } from 'mobx'\nimport { UserAccessManagementApi } from '../services'\n\nexport default class UserAccessManagement {\n  @observable apiFetching = false\n  @observable responseApiError = false\n\n  @observable nextPageIsManageDepartment = null\n  @observable nextPageIsManageGroup = null\n  @observable nextPageIsManageUser = null\n  @observable nextPageIsManageMenu = null\n  @observable nextPageIsManageFunction = null\n  @observable nextPageIsManageRole = null\n\n  @observable departmentList = []\n  @observable functionList = []\n  @observable menuList = []\n  @observable functionListInMenu = []\n  @observable functionOptionList = []\n  @observable groupList = []\n  @observable userList = []\n  @observable roleList = []\n\n  @observable departmentSelected = null\n  @observable groupSelected = null\n  @observable userSelected = null\n  @observable menuSelected = null\n\n  @observable responseDeleteSection = null\n\n  @action getDataDepartment = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getDepartment({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [\n                { status: \"INACTIVE\" },\n                { request_status: \"PENDING\" }\n              ]\n            }\n          ]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.departmentList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataDepartmentDetail = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getDepartmentDetail(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroup = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroup(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroupDetail = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroupDetail(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataFunction = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getFunction({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [\n                { status: \"INACTIVE\" },\n                { request_status: \"PENDING\" }\n              ]\n            }\n          ]\n        }\n      },\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataMenu = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getMenu({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [\n                { status: \"INACTIVE\" },\n                { request_status: \"PENDING\" },\n              ]\n            }\n          ]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.menuList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroup = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroup({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [\n                { status: \"INACTIVE\" },\n                { request_status: \"PENDING\" },\n              ]\n            }\n          ]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.groupList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataUser = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getUser({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [\n                { status: \"INACTIVE\" },\n                { request_status: \"PENDING\" },\n              ]\n            }\n          ]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.userList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataFunctionList = async (params) => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getFunction({\n      filter: {\n        where: {\n          $and: [{\n            status: \"ACTIVE\"\n          }, {\n            menu_id: null\n          }]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionOptionList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataFunctionListInMenu = async (params) => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getFunction({\n      filter: {\n        where: {\n          $and: [{\n            menu_id: params\n          }, {\n            $or: [\n              { status: \"ACTIVE\" },\n              {\n                $and: [\n                  { status: \"INACTIVE\" },\n                  { request_status: \"PENDING\" },\n                ]\n              }\n            ]\n          }]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionListInMenu = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataRole = async (params) => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getRole({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [\n                { status: \"INACTIVE\" },\n                { request_status: \"PENDING\" },\n              ]\n            }\n          ]\n\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.roleList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  //getSection\n  @action getDataSectionList = async (params) => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getSection({\n      filter: {\n        where: {\n          status: \"ACTIVE\"\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.roleList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewDepartment = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewDepartment({ change_type: \"DEPARTMENTS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.departmentList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewSection = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewDepartment({ change_type: \"SECTIONS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.departmentList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewFunction = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewFunction({ change_type: \"FUNCTIONS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionList = []\n      this.apiFetching = false\n      this.getDataFunction()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewMenu = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewFunction({ change_type: \"MENUS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.menuList = []\n      this.apiFetching = false\n      this.getDataMenu()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewRole = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewRole({ change_type: \"ROLES\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.roleList = []\n      this.apiFetching = false\n      this.getDataRole()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddFunctionToMenu = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addFunctionToMenu({ change_type: \"FUNCTIONS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionList = []\n      this.apiFetching = false\n      this.getDataFunction()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateDepartment = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateDepartment({ change_type: \"DEPARTMENTS\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateSection = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateSection({ change_type: \"SECTIONS\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateFunction = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateFunction({ change_type: \"FUNCTIONS\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionList = []\n      this.apiFetching = false\n      this.getDataFunction()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateMenu = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateMenu({ change_type: \"MENUS\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateRole = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateRole({ change_type: \"ROLES\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.roleList = []\n      this.apiFetching = false\n      this.getDataRole()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteDepartment = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteDepartment({ change_type: \"DEPARTMENTS\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n      this.departmentList = []\n      this.getDataDepartment()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteSection = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteDepartment({ change_type: \"SECTIONS\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n      this.responseDeleteSection = true\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteFunction = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteFunction({ change_type: \"FUNCTIONS\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.functionList = []\n      this.apiFetching = false\n      this.getDataFunction()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteMenu = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteMenu({ change_type: \"MENUS\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.menuList = []\n      this.apiFetching = false\n      this.getDataMenu()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteRole = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteRole({ change_type: \"ROLES\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.roleList = []\n      this.apiFetching = false\n      this.getDataRole()\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}