{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/simple-input.js\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport styled from 'styled-components';\nimport { Input } from 'antd';\nconst StyledInput = styled(Input).withConfig({\n  displayName: \"simple-input__StyledInput\",\n  componentId: \"sc-1ix42ps-0\"\n})([\"border-style:solid !important;border-width:0px 0px 1px 0px !important;border-color:black !important;box-shadow:none !important;border-right-style:unset !important;border-right-width:0px !important;border-radius:0px;.ant-input{text-align:right !important;}.ant-input-suffix{width:50px !important;}\", \"\"], ({\n  halfSize\n}) => halfSize && `\n    width: 50%\n  `);\n\nconst InputNumber = props => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(InputNumber // defaultValue={1000}\n  , {\n    formatter: value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ','),\n    parser: value => value.replace(/\\$\\s?|(,*)/g, ''),\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst InputDefault = props => {\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(StyledInput, {\n    onChange: e => props.onChange(e.target.value),\n    prefix: props.prefix,\n    suffix: props.suffix,\n    readOnly: props.readOnly,\n    defaultValue: props.defaultValue,\n    halfSize: props.halfSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default function SimpleInput(props) {\n  /* return (\n    <div>\n      <StyledInput onChange={(e) => props.onChange(e.target.value)} prefix={props.prefix} suffix={props.suffix} readOnly={props.readOnly} defaultValue={props.defaultValue} halfSize={props.halfSize} />\n    </div>\n  ) */\n  return props.isInputNumber ? InputNumber(props) : InputDefault(props);\n}","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/simple-input.js"],"names":["React","styled","Input","StyledInput","halfSize","InputNumber","props","value","replace","onChange","InputDefault","e","target","prefix","suffix","readOnly","defaultValue","SimpleInput","isInputNumber"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,KAAT,QAAsB,MAAtB;AACA,MAAMC,WAAW,GAAGF,MAAM,CAACC,KAAD,CAAT;AAAA;AAAA;AAAA,qTAcb,CAAC;AAAEE,EAAAA;AAAF,CAAD,KAAkBA,QAAQ,IAAK;;GAdlB,CAAjB;;AAmBA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAC7B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD,CACE;AADF;AAEE,IAAA,SAAS,EAAEC,KAAK,IAAK,KAAIA,KAAM,EAAX,CAAaC,OAAb,CAAqB,uBAArB,EAA8C,GAA9C,CAFtB;AAGE,IAAA,MAAM,EAAED,KAAK,IAAIA,KAAK,CAACC,OAAN,CAAc,aAAd,EAA6B,EAA7B,CAHnB;AAIE,IAAA,QAAQ,EAAEC,QAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAUD,CAXD;;AAYA,MAAMC,YAAY,GAAIJ,KAAD,IAAW;AAC9B,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,WAAD;AAAa,IAAA,QAAQ,EAAGK,CAAD,IAAOL,KAAK,CAACG,QAAN,CAAeE,CAAC,CAACC,MAAF,CAASL,KAAxB,CAA9B;AAA8D,IAAA,MAAM,EAAED,KAAK,CAACO,MAA5E;AAAoF,IAAA,MAAM,EAAEP,KAAK,CAACQ,MAAlG;AAA0G,IAAA,QAAQ,EAAER,KAAK,CAACS,QAA1H;AAAoI,IAAA,YAAY,EAAET,KAAK,CAACU,YAAxJ;AAAsK,IAAA,QAAQ,EAAEV,KAAK,CAACF,QAAtL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAMD,CAPD;;AAQA,eAAe,SAASa,WAAT,CAAqBX,KAArB,EAA4B;AACzC;;;;;AAKA,SAAOA,KAAK,CAACY,aAAN,GAAsBb,WAAW,CAACC,KAAD,CAAjC,GAA2CI,YAAY,CAACJ,KAAD,CAA9D;AACD","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Input } from 'antd'\nconst StyledInput = styled(Input)`\n  border-style: solid !important;\n  border-width: 0px 0px 1px 0px !important;\n  border-color: black !important;\n  box-shadow: none !important;\n  border-right-style: unset !important;\n  border-right-width: 0px !important;\n  border-radius: 0px;\n  .ant-input{\n    text-align: right !important;\n  }\n  .ant-input-suffix{\n    width:50px !important;\n  }\n  ${({ halfSize }) => halfSize && `\n    width: 50%\n  `}\n`\n\nconst InputNumber = (props) => {\n  return (\n    <div>\n      <InputNumber\n        // defaultValue={1000}\n        formatter={value => `$ ${value}`.replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}\n        parser={value => value.replace(/\\$\\s?|(,*)/g, '')}\n        onChange={onChange}\n      />\n    </div>\n  )\n}\nconst InputDefault = (props) => {\n  return (\n    <div>\n      <StyledInput onChange={(e) => props.onChange(e.target.value)} prefix={props.prefix} suffix={props.suffix} readOnly={props.readOnly} defaultValue={props.defaultValue} halfSize={props.halfSize} />\n\n    </div>\n  )\n}\nexport default function SimpleInput(props) {\n  /* return (\n    <div>\n      <StyledInput onChange={(e) => props.onChange(e.target.value)} prefix={props.prefix} suffix={props.suffix} readOnly={props.readOnly} defaultValue={props.defaultValue} halfSize={props.halfSize} />\n    </div>\n  ) */\n  return props.isInputNumber ? InputNumber(props) : InputDefault(props)\n}\n"]},"metadata":{},"sourceType":"module"}