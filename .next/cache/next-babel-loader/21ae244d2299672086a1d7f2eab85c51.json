{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action, toJS } from 'mobx';\nimport { UserAccessManagementApi } from '../services';\nlet UserAccessManagement = (_class = (_temp = class UserAccessManagement {\n  constructor() {\n    _initializerDefineProperty(this, \"apiFetching\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"responseApiError\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"responseGetDepartmentList\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageDepartment\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageGroup\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageUser\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageMenuAndFunction\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageRole\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"departmentSelected\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"groupSelected\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"getDataDepartment\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"getDataDepartmentDetail\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"getDataGroup\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"getDataGroupDetail\", _descriptor14, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"apiFetching\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"responseApiError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"responseGetDepartmentList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageDepartment\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageGroup\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageUser\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageMenuAndFunction\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageRole\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"departmentSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"groupSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"getDataDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getDepartment({\n        filter: {\n          where: {\n            status: \"ACTIVE\"\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"getDataDepartmentDetail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getDepartmentDetail(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroup\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroup(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroupDetail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroupDetail(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n})), _class);\nexport { UserAccessManagement as default };","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/user-access-management-store.js"],"names":["observable","action","toJS","UserAccessManagementApi","UserAccessManagement","apiFetching","tmp","getDepartment","filter","where","status","console","log","ok","responseApiError","getDepartmentDetail","params","getGroup","getGroupDetail"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,IAA7B,QAAyC,MAAzC;AACA,SAASC,uBAAT,QAAwC,aAAxC;IAEqBC,oB,sBAAN,MAAMA,oBAAN,CAA2B;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,C,qFACvCJ,U;;;;;WAAyB,K;;oFACzBA,U;;;;;WAA8B,K;;6FAC9BA,U;;;;;WAAuC,E;;8FAEvCA,U;;;;;WAAwC,I;;yFACxCA,U;;;;;WAAmC,I;;wFACnCA,U;;;;;WAAkC,I;;mGAClCA,U;;;;;WAA6C,I;;wFAC7CA,U;;;;;WAAkC,I;;sFAGlCA,U;;;;;WAAgC,I;;kFAChCA,U;;;;;WAA2B,I;;sFAE3BC,M;;;;;WAA2B,YAAY;AACtC;AACA,WAAKI,WAAL,GAAmB,IAAnB;AACA,UAAIC,GAAG,GAAG,MAAMH,uBAAuB,CAACI,aAAxB,CAAsC;AAAEC,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,MAAM,EAAE;AAAV;AAAT;AAAV,OAAtC,CAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,GAAZ;;AACA,UAAIA,GAAG,CAACO,EAAJ,GAASP,GAAG,CAACI,MAAJ,KAAe,GAA5B,EAAiC;AAC/B;AACA,aAAKL,WAAL,GAAmB,KAAnB;AACD,OAHD,MAGO;AACL;AACA,aAAKA,WAAL,GAAmB,KAAnB;AACA,aAAKS,gBAAL,GAAwB,IAAxB;AACD;AACF,K;;4FAEAb,M;;;;;WAAiC,YAAY;AAC5C;AACA,WAAKI,WAAL,GAAmB,IAAnB;AACA,UAAIC,GAAG,GAAG,MAAMH,uBAAuB,CAACY,mBAAxB,CAA4CC,MAA5C,CAAhB;;AAEA,UAAIV,GAAG,CAACO,EAAJ,GAASP,GAAG,CAACI,MAAJ,KAAe,GAA5B,EAAiC;AAC/B;AACA,aAAKL,WAAL,GAAmB,KAAnB;AACD,OAHD,MAGO;AACL;AACA,aAAKA,WAAL,GAAmB,KAAnB;AACA,aAAKS,gBAAL,GAAwB,IAAxB;AACD;AACF,K;;iFAEAb,M;;;;;WAAsB,YAAY;AACjC;AACA,WAAKI,WAAL,GAAmB,IAAnB;AACA,UAAIC,GAAG,GAAG,MAAMH,uBAAuB,CAACc,QAAxB,CAAiCD,MAAjC,CAAhB;;AAEA,UAAIV,GAAG,CAACO,EAAJ,GAASP,GAAG,CAACI,MAAJ,KAAe,GAA5B,EAAiC;AAC/B;AACA,aAAKL,WAAL,GAAmB,KAAnB;AACD,OAHD,MAGO;AACL;AACA,aAAKA,WAAL,GAAmB,KAAnB;AACA,aAAKS,gBAAL,GAAwB,IAAxB;AACD;AACF,K;;uFAEAb,M;;;;;WAA4B,YAAY;AACvC;AACA,WAAKI,WAAL,GAAmB,IAAnB;AACA,UAAIC,GAAG,GAAG,MAAMH,uBAAuB,CAACe,cAAxB,CAAuCF,MAAvC,CAAhB;;AAEA,UAAIV,GAAG,CAACO,EAAJ,GAASP,GAAG,CAACI,MAAJ,KAAe,GAA5B,EAAiC;AAC/B;AACA,aAAKL,WAAL,GAAmB,KAAnB;AACD,OAHD,MAGO;AACL;AACA,aAAKA,WAAL,GAAmB,KAAnB;AACA,aAAKS,gBAAL,GAAwB,IAAxB;AACD;AACF,K;;;SAzEkBV,oB","sourcesContent":["import { observable, action, toJS } from 'mobx'\nimport { UserAccessManagementApi } from '../services'\n\nexport default class UserAccessManagement {\n  @observable apiFetching = false\n  @observable responseApiError = false\n  @observable responseGetDepartmentList = []\n\n  @observable nextPageIsManageDepartment = null\n  @observable nextPageIsManageGroup = null\n  @observable nextPageIsManageUser = null\n  @observable nextPageIsManageMenuAndFunction = null\n  @observable nextPageIsManageRole = null\n\n\n  @observable departmentSelected = null\n  @observable groupSelected = null\n\n  @action getDataDepartment = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getDepartment({ filter: { where: { status: \"ACTIVE\" } } })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataDepartmentDetail = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getDepartmentDetail(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroup = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroup(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroupDetail = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroupDetail(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}