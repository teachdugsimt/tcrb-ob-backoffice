{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport CircleButton from '../components/button-circle/circle-button'; // import Link from 'next/link'\n\nimport { i18n, Link, withTranslation } from '../i18n';\nconst index = inject('counterStore', 'authenStore')(observer(props => {\n  const {\n    0: id,\n    1: setId\n  } = useState(\"\");\n  const {\n    0: password,\n    1: setPassword\n  } = useState(\"\"); // const { counterStore, authenStore } = useStores()\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"DashboardV1\"), __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, props.authenStore.id ? \"ID :\" + props.authenStore.id : \"\"), __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, props.authenStore.password ? \"Password : \" + props.authenStore.password : \"\"), __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, props.authenStore.type ? \"Type :\" + props.authenStore.type : \"\"), __jsx(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, props.counterStore.count), __jsx(\"button\", {\n    onClick: () => props.counterStore.increment(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"++\"), __jsx(\"button\", {\n    onClick: () => props.counterStore.decrement(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"--\"), __jsx(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"Dashboard index\"), __jsx(CircleButton, {\n    title: i18n.t(\"confirm\"),\n    type: \"primary\",\n    shape: \"round\",\n    size: \"large\",\n    loading: false,\n    onClick: () => console.log(\"Success Click!!\", props.counterStore.count),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }));\n}));\n\nindex.getInitialProps = async () => ({\n  namespacesRequired: ['common']\n});\n\nindex.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(index);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/index.js"],"names":["React","useContext","useState","PropTypes","inject","observer","CircleButton","i18n","Link","withTranslation","index","props","id","setId","password","setPassword","color","authenStore","type","counterStore","count","increment","decrement","t","console","log","getInitialProps","namespacesRequired","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { inject, observer } from 'mobx-react'\nimport CircleButton from '../components/button-circle/circle-button'\n// import Link from 'next/link'\n\nimport { i18n, Link, withTranslation } from '../i18n'\n\nconst index =\n  inject('counterStore', 'authenStore')\n    (observer((props) => {\n      const [id, setId] = useState(\"\")\n      const [password, setPassword] = useState(\"\")\n\n      // const { counterStore, authenStore } = useStores()\n\n      return <div>\n        <h1 style={{ color: 'red' }}>DashboardV1</h1>\n        <h1 style={{ color: 'red' }}>{props.authenStore.id ? \"ID :\" + props.authenStore.id : \"\"}</h1>\n        <h1 style={{ color: 'red' }}>{props.authenStore.password ? \"Password : \" + props.authenStore.password : \"\"}</h1>\n        <h1 style={{ color: 'red' }}>{props.authenStore.type ? \"Type :\" + props.authenStore.type : \"\"}</h1>\n\n        <div style={{ color: 'red' }}>{props.counterStore.count}</div>\n        <button onClick={() => props.counterStore.increment()}>++</button>\n        <button onClick={() => props.counterStore.decrement()}>--</button>\n        <h1>Dashboard index</h1>\n        <CircleButton title={i18n.t(\"confirm\")} type={\"primary\"} shape={\"round\"} size={\"large\"}\n          loading={false} onClick={() => console.log(\"Success Click!!\", props.counterStore.count)} />\n\n      </div >\n    }))\n\nindex.getInitialProps = async () => ({\n  namespacesRequired: ['common'],\n})\n\nindex.propTypes = {\n  t: PropTypes.func.isRequired,\n}\n\nexport default withTranslation('common')(index)\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}