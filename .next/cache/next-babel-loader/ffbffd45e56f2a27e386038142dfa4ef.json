{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action, toJS } from 'mobx';\nimport { StartupApi } from '../services';\nimport getGeneralApiProblem from '../services/api-integrations/error-handler';\nlet CustomerServicesMenuStore = (_class = (_temp = class CustomerServicesMenuStore {\n  constructor() {\n    _initializerDefineProperty(this, \"citizenId\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"accountId\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"accountSelected\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"apiFetching\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"searchFetching\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"accountInfo\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"arrayAccountInfo\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"accountInfoError\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"unlockOtpError\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"unlockOtpInfo\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"unbindAccountInfo\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"unbindAccountError\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"arrayUnbindAccountInfo\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"getDataAccountOtpUnlock\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"submitUnlockOTP\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"getDataAccountUnbind\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"getDataAccountProduct\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"submitAccountUnbiding\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"setCitizenId\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"setAccountId\", _descriptor20, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"citizenId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"accountId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"accountSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"apiFetching\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"searchFetching\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"accountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"arrayAccountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"accountInfoError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"unlockOtpError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"unlockOtpInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"unbindAccountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"unbindAccountError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"arrayUnbindAccountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"getDataAccountOtpUnlock\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async citizenId => {\n      this.citizenId = {\n        citizen_id: citizenId\n      };\n      this.searchFetching = true;\n      let temp = await StartupApi.getAccountInfo(this.citizenId);\n      console.log(temp);\n\n      if (temp.ok && temp.status === 200) {\n        this.searchFetching = false;\n        this.accountInfo = temp.data.responseData; //waiting edit api\n        // if (temp.responseData.data.name == 'Error') {\n        //   this.accountInfoError = temp.data\n        // }\n      } else {\n        if (temp.problem == 'TIMEOUT_ERROR') {\n          this.customerServicesMenuStore.accountInfoError.responseData.userMessage = temp.originalError.message;\n        } else {\n          this.searchFetching = false; // this.accountInfoError = JSON.parse(temp.data.body)\n\n          this.accountInfoError = temp.data;\n        }\n      }\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"submitUnlockOTP\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      // this.accountSelected\n      let {\n        main_account_no,\n        cif\n      } = this.accountSelected;\n      this.apiFetching = true;\n      let temp = await StartupApi.unlockOTPAccount({\n        main_account_no,\n        cif\n      });\n      console.log(temp);\n\n      if (temp.ok && temp.data.statusCode === 200) {\n        this.apiFetching = false;\n        this.unlockOtpInfo = temp.data.responseData;\n      } else {\n        this.apiFetching = false; // this.unlockOtpError = JSON.parse(temp.data.body)\n      }\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"getDataAccountUnbind\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async accountNumber => {\n      this.citizenId = {\n        citizen_id: accountNumber\n      };\n      this.searchFetching = true;\n      let temp = await StartupApi.getAccountInfoUnbinding(this.citizenId);\n      console.log(temp);\n\n      if (temp.ok && temp.status === 200) {\n        this.searchFetching = false;\n        this.accountInfo = temp.data.responseData;\n      } else {\n        this.searchFetching = false; // let problem = getGeneralApiProblem(response)\n        // this.accountInfoError = JSON.parse(temp.data.body)\n\n        this.accountInfoError = temp.data;\n      }\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"getDataAccountProduct\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async accountNumber => {\n      this.apiFetching = true;\n      let temp = await StartupApi.getAccountProductsInfo({\n        main_account_no: accountNumber\n      });\n      console.log(temp);\n\n      if (temp.ok && temp.status === 200) {\n        //change to status when real api\n        this.apiFetching = false;\n        this.unbindAccountInfo = temp.data.responseData; // this.unbindAccountInfo = temp.data.responseData // for dev\n      } else {\n        this.apiFetching = false;\n      }\n    };\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"submitAccountUnbiding\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.apiFetching = true;\n      let {\n        main_account_no,\n        sub_account_no,\n        partner_code\n      } = this.accountSelected;\n      let temp = await StartupApi.unbindAccount({\n        main_account_no,\n        sub_account_no,\n        partner_code\n      });\n\n      if (temp.ok && temp.data.statusCode === 200) {\n        this.apiFetching = false;\n        this.unlockOtpInfo = temp.data;\n      } else {\n        this.apiFetching = false; // this.unlockOtpError = JSON.parse(temp.data.body)\n      }\n    };\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"setCitizenId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.citizenId = {\n        idCard: id\n      };\n    };\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"setAccountId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.accountId = id;\n    };\n  }\n})), _class);\nexport default CustomerServicesMenuStore;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/customer-services-menu-store.js"],"names":["observable","action","toJS","StartupApi","getGeneralApiProblem","CustomerServicesMenuStore","citizenId","citizen_id","searchFetching","temp","getAccountInfo","console","log","ok","status","accountInfo","data","responseData","problem","customerServicesMenuStore","accountInfoError","userMessage","originalError","message","main_account_no","cif","accountSelected","apiFetching","unlockOTPAccount","statusCode","unlockOtpInfo","accountNumber","getAccountInfoUnbinding","getAccountProductsInfo","unbindAccountInfo","sub_account_no","partner_code","unbindAccount","id","idCard","accountId"],"mappings":"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","sourcesContent":["import { observable, action, toJS } from 'mobx'\nimport { StartupApi } from '../services'\nimport getGeneralApiProblem from '../services/api-integrations/error-handler'\n\nclass CustomerServicesMenuStore {\n  @observable citizenId = ''\n  @observable accountId = {}\n  @observable accountSelected = {}\n  @observable apiFetching = false\n  @observable searchFetching = false\n  @observable accountInfo = null\n  @observable arrayAccountInfo = []\n  @observable accountInfoError = {}\n  @observable unlockOtpError = []\n  @observable unlockOtpInfo = null\n  @observable unbindAccountInfo = null\n  @observable unbindAccountError = []\n  @observable arrayUnbindAccountInfo = []\n\n  @action getDataAccountOtpUnlock = async (citizenId) => {\n    this.citizenId = { citizen_id: citizenId }\n    this.searchFetching = true\n    let temp = await StartupApi.getAccountInfo(this.citizenId)\n    console.log(temp)\n    if (temp.ok && temp.status === 200) {\n      this.searchFetching = false\n      this.accountInfo = temp.data.responseData\n      //waiting edit api\n      // if (temp.responseData.data.name == 'Error') {\n      //   this.accountInfoError = temp.data\n      // }\n    } else {\n      if (temp.problem == 'TIMEOUT_ERROR') {\n        this.customerServicesMenuStore.accountInfoError.responseData.userMessage = temp.originalError.message\n      } else {\n        this.searchFetching = false\n        // this.accountInfoError = JSON.parse(temp.data.body)\n        this.accountInfoError = temp.data\n      }\n\n    }\n  }\n\n  @action submitUnlockOTP = async () => {\n    // this.accountSelected\n    let { main_account_no, cif } = this.accountSelected\n    this.apiFetching = true\n    let temp = await StartupApi.unlockOTPAccount({ main_account_no, cif })\n    console.log(temp)\n    if (temp.ok && temp.data.statusCode === 200) {\n      this.apiFetching = false\n      this.unlockOtpInfo = temp.data.responseData\n    } else {\n      this.apiFetching = false\n      // this.unlockOtpError = JSON.parse(temp.data.body)\n    }\n  }\n\n  @action getDataAccountUnbind = async (accountNumber) => {\n    this.citizenId = { citizen_id: accountNumber }\n    this.searchFetching = true\n    let temp = await StartupApi.getAccountInfoUnbinding(this.citizenId)\n    console.log(temp)\n    if (temp.ok && temp.status === 200) {\n      this.searchFetching = false\n      this.accountInfo = temp.data.responseData\n    } else {\n      this.searchFetching = false\n      // let problem = getGeneralApiProblem(response)\n      // this.accountInfoError = JSON.parse(temp.data.body)\n      this.accountInfoError = temp.data\n\n    }\n  }\n\n  @action getDataAccountProduct = async (accountNumber) => {\n    this.apiFetching = true\n\n    let temp = await StartupApi.getAccountProductsInfo({ main_account_no: accountNumber })\n    console.log(temp)\n    if (temp.ok && temp.status === 200) { //change to status when real api\n      this.apiFetching = false\n      this.unbindAccountInfo = temp.data.responseData\n      // this.unbindAccountInfo = temp.data.responseData // for dev\n    } else {\n      this.apiFetching = false\n\n    }\n  }\n\n  @action submitAccountUnbiding = async () => {\n    this.apiFetching = true\n    let { main_account_no, sub_account_no, partner_code } = this.accountSelected\n    let temp = await StartupApi.unbindAccount({ main_account_no, sub_account_no, partner_code })\n    if (temp.ok && temp.data.statusCode === 200) {\n      this.apiFetching = false\n      this.unlockOtpInfo = temp.data\n    } else {\n      this.apiFetching = false\n      // this.unlockOtpError = JSON.parse(temp.data.body)\n    }\n  }\n  @action setCitizenId = (id) => {\n    this.citizenId = { idCard: id }\n  }\n  @action setAccountId = (id) => {\n    this.accountId = id\n  }\n}\nexport default CustomerServicesMenuStore\n"]},"metadata":{},"sourceType":"module"}