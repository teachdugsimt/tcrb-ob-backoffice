{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/customer-service-enquiry/filter-box.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Table, Input, Button, Space } from 'antd';\nexport const getColumnSearchProps = (dataIndex, handleSearch, handleReset) => {\n  const {\n    0: searchInput,\n    1: setSearchInput\n  } = useState(\"\");\n  const {\n    0: searchedColumn,\n    1: setSearchedColumn\n  } = useState(\"\");\n  const {\n    0: searchText,\n    1: setSearchText\n  } = useState(\"\");\n  return {\n    filterDropdown: ({\n      setSelectedKeys,\n      selectedKeys,\n      confirm,\n      clearFilters\n    }) => __jsx(\"div\", {\n      style: {\n        padding: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, __jsx(Input, {\n      ref: node => {\n        setSearchInput(node); // this.searchInput = node;\n      },\n      placeholder: `Search ${dataIndex}`,\n      value: selectedKeys[0],\n      onChange: e => setSelectedKeys(e.target.value ? [e.target.value] : []),\n      onPressEnter: () => {\n        setSearchedColumn(dataIndex);\n        setSearchText(selectedKeys[0]);\n        handleSearch(selectedKeys, confirm, dataIndex);\n      },\n      style: {\n        width: 188,\n        marginBottom: 8,\n        display: 'block'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }\n    }), __jsx(Space, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, __jsx(Button, {\n      type: \"primary\",\n      onClick: () => {\n        console.log(selectedKeys);\n        setSearchedColumn(dataIndex);\n        setSearchText(selectedKeys[0]);\n        handleSearch(selectedKeys, confirm, dataIndex);\n      },\n      icon: __jsx(SearchOutlined, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 19\n        }\n      }),\n      size: \"small\",\n      style: {\n        width: 90\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }, \"Search\"), __jsx(Button, {\n      onClick: () => {\n        setSearchText(\"\");\n        handleReset(clearFilters);\n      },\n      size: \"small\",\n      style: {\n        width: 90\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, \"Reset\"))),\n    filterIcon: filtered => __jsx(SearchOutlined, {\n      style: {\n        color: filtered ? '#1890ff' : undefined\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 29\n      }\n    }),\n    onFilter: (value, record) => {\n      // console.log(\"value >>\", value)\n      // console.log(\"record >>\", record)\n      // console.log(\"data index >> \", dataIndex)\n      return record[dataIndex] && record[dataIndex].toString().toLowerCase().includes(value.toLowerCase());\n    },\n    render: text => searchedColumn === dataIndex ? __jsx(Highlighter, {\n      highlightStyle: {\n        backgroundColor: '#ffc069',\n        padding: 0\n      },\n      searchWords: [searchText],\n      autoEscape: true,\n      textToHighlight: text ? text.toString() : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }) : text\n  };\n};","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/customer-service-enquiry/filter-box.js"],"names":["React","useState","useEffect","Highlighter","SearchOutlined","Table","Input","Button","Space","getColumnSearchProps","dataIndex","handleSearch","handleReset","searchInput","setSearchInput","searchedColumn","setSearchedColumn","searchText","setSearchText","filterDropdown","setSelectedKeys","selectedKeys","confirm","clearFilters","padding","node","e","target","value","width","marginBottom","display","console","log","filterIcon","filtered","color","undefined","onFilter","record","toString","toLowerCase","includes","render","text","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Highlighter from 'react-highlight-words';\nimport { SearchOutlined } from '@ant-design/icons';\nimport { Table, Input, Button, Space } from 'antd';\n\n\nexport const getColumnSearchProps = (dataIndex, handleSearch, handleReset) => {\n  const [searchInput, setSearchInput] = useState(\"\")\n  const [searchedColumn, setSearchedColumn] = useState(\"\")\n  const [searchText, setSearchText] = useState(\"\")\n  return {\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n      <div style={{ padding: 8 }}>\n        <Input\n          ref={node => {\n            setSearchInput(node)\n            // this.searchInput = node;\n          }}\n          placeholder={`Search ${dataIndex}`}\n          value={selectedKeys[0]}\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n          onPressEnter={() => {\n            setSearchedColumn(dataIndex)\n            setSearchText(selectedKeys[0])\n            handleSearch(selectedKeys, confirm, dataIndex)\n          }}\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\n        />\n        <Space>\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              console.log(selectedKeys)\n              setSearchedColumn(dataIndex)\n              setSearchText(selectedKeys[0])\n              handleSearch(selectedKeys, confirm, dataIndex)\n            }}\n            icon={<SearchOutlined />}\n            size=\"small\"\n            style={{ width: 90 }}\n          >\n            Search\n        </Button>\n          <Button onClick={() => {\n            setSearchText(\"\")\n            handleReset(clearFilters)\n          }\n          } size=\"small\" style={{ width: 90 }}>\n            Reset\n        </Button>\n        </Space>\n      </div>\n    ),\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\n    onFilter: (value, record) => {\n      // console.log(\"value >>\", value)\n      // console.log(\"record >>\", record)\n      // console.log(\"data index >> \", dataIndex)\n      return record[dataIndex] && record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\n    },\n\n\n    render: text =>\n      searchedColumn === dataIndex ?\n        (\n          <Highlighter\n            highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n            searchWords={[searchText]}\n            autoEscape\n            textToHighlight={text ? text.toString() : ''}\n          />\n        ) : (\n          text\n        ),\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}