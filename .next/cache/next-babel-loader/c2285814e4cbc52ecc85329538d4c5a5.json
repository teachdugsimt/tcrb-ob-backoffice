{"ast":null,"code":"import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './header';\nimport https from 'https';\nconst httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n  requestCert: false\n});\n\nconst ExcuteApi = async (url, params, method) => {\n  try {\n    const api = create(Header());\n    let response;\n\n    if (method == \"get\" || method == \"GET\") {\n      response = await api.get(url, params ? params : {\n        filter: {}\n      });\n    } else if (method == \"post\" || method == \"POST\") {\n      response = await api.post(url, params);\n    } else if (method == \"put\" || method == \"PUT\") {\n      response = await api.put(url, params);\n    } else if (method == \"patch\" || method == \"PATCH\") {\n      response = await api.patch(url, params);\n    } else if (method == \"delete\" || method == \"DELETE\") {\n      response = await api.delete(url, params);\n    }\n\n    return response;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default ExcuteApi;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/api-integrations/excute-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","https","httpsAgent","Agent","rejectUnauthorized","requestCert","ExcuteApi","url","params","method","api","response","get","filter","post","put","patch","delete","error"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,UAAtD;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,MAAMC,UAAU,GAAG,IAAID,KAAK,CAACE,KAAV,CAAgB;AACjCC,EAAAA,kBAAkB,EAAE,KADa;AAEjCC,EAAAA,WAAW,EAAE;AAFoB,CAAhB,CAAnB;;AAMA,MAAMC,SAAS,GAAG,OAAOC,GAAP,EAAYC,MAAZ,EAAoBC,MAApB,KAA+B;AAC/C,MAAI;AACF,UAAMC,GAAG,GAAGZ,MAAM,CAACE,MAAM,EAAP,CAAlB;AACA,QAAIW,QAAJ;;AACA,QAAIF,MAAM,IAAI,KAAV,IAAmBA,MAAM,IAAI,KAAjC,EAAwC;AACtCE,MAAAA,QAAQ,GAAG,MAAMD,GAAG,CAACE,GAAJ,CAAQL,GAAR,EAAaC,MAAM,GAAGA,MAAH,GAAY;AAAEK,QAAAA,MAAM,EAAE;AAAV,OAA/B,CAAjB;AACD,KAFD,MAGK,IAAIJ,MAAM,IAAI,MAAV,IAAoBA,MAAM,IAAI,MAAlC,EAA0C;AAC7CE,MAAAA,QAAQ,GAAG,MAAMD,GAAG,CAACI,IAAJ,CAASP,GAAT,EAAcC,MAAd,CAAjB;AACD,KAFI,MAGA,IAAIC,MAAM,IAAI,KAAV,IAAmBA,MAAM,IAAI,KAAjC,EAAwC;AAC3CE,MAAAA,QAAQ,GAAG,MAAMD,GAAG,CAACK,GAAJ,CAAQR,GAAR,EAAaC,MAAb,CAAjB;AACD,KAFI,MAGA,IAAIC,MAAM,IAAI,OAAV,IAAqBA,MAAM,IAAI,OAAnC,EAA4C;AAC/CE,MAAAA,QAAQ,GAAG,MAAMD,GAAG,CAACM,KAAJ,CAAUT,GAAV,EAAeC,MAAf,CAAjB;AACD,KAFI,MAGA,IAAIC,MAAM,IAAI,QAAV,IAAsBA,MAAM,IAAI,QAApC,EAA8C;AACjDE,MAAAA,QAAQ,GAAG,MAAMD,GAAG,CAACO,MAAJ,CAAWV,GAAX,EAAgBC,MAAhB,CAAjB;AACD;;AACD,WAAOG,QAAP;AACD,GAnBD,CAmBE,OAAOO,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAvBD;;AAyBA,eAAeZ,SAAf","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './header'\nimport https from 'https';\nconst httpsAgent = new https.Agent({\n  rejectUnauthorized: false,\n  requestCert: false,\n\n})\n\nconst ExcuteApi = async (url, params, method) => {\n  try {\n    const api = create(Header())\n    let response\n    if (method == \"get\" || method == \"GET\") {\n      response = await api.get(url, params ? params : { filter: {} })\n    }\n    else if (method == \"post\" || method == \"POST\") {\n      response = await api.post(url, params)\n    }\n    else if (method == \"put\" || method == \"PUT\") {\n      response = await api.put(url, params)\n    }\n    else if (method == \"patch\" || method == \"PATCH\") {\n      response = await api.patch(url, params)\n    }\n    else if (method == \"delete\" || method == \"DELETE\") {\n      response = await api.delete(url, params)\n    }\n    return response\n  } catch (error) {\n    return error\n  }\n}\n\nexport default ExcuteApi\n"]},"metadata":{},"sourceType":"module"}