{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/group-list.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport SimpleModal from '../../simple-modal';\nimport SimpleInput from '../../simple-input';\nimport { checkDefaultStatus, renderAction, addKeyToDataSource } from '../../data-utility';\nimport UserAccessManagement from '../../../stores/user-access-management-store';\nimport { toJS } from 'mobx';\nconst {\n  Option\n} = Select;\nlet groupName = null;\nlet roleSelect = null;\nconst GroupList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore\n  } = props;\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: groupList,\n    1: setGroupList\n  } = useState([]);\n  const {\n    0: roleOptionList,\n    1: setRoleOptionList\n  } = useState([]);\n  const {\n    0: userInGroupList,\n    1: setUserInGroupList\n  } = useState([]);\n  useEffect(() => {\n    userAccessManagementStore.getDataGroup();\n    userAccessManagementStore.getDataRoleOptionList();\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.groupList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.groupList).then(result => {\n        setGroupList(result);\n      });\n    }\n  }, [userAccessManagementStore.groupList]);\n  useEffect(() => {\n    if (userAccessManagementStore.optionRoleList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.optionRoleList).then(result => {\n        setRoleOptionList(result);\n      });\n    }\n  }, [userAccessManagementStore.optionRoleList]);\n  const mockRoleList = [{\n    id: 1,\n    key: 1,\n    role_name: \"role_1\"\n  }, {\n    id: 2,\n    key: 2,\n    role_name: \"role_2\"\n  }, {\n    id: 3,\n    key: 3,\n    role_name: \"role_3\"\n  }, {\n    id: 4,\n    key: 4,\n    role_name: \"role_4\"\n  }, {\n    id: 5,\n    key: 5,\n    role_name: \"role_5\"\n  }];\n  const mockGroupList = [{\n    id: 1,\n    key: 1,\n    group_name: \"group_1\",\n    role_name: \"role_1\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    group_name: \"group_2\",\n    role_name: \"role_2\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    group_name: \"group_3\",\n    role_name: \"role_3\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    group_name: \"group_4\",\n    role_name: \"role_4\",\n    user: 5,\n    status: '2'\n  }, {\n    id: 5,\n    key: 5,\n    group_name: \"group_5\",\n    role_name: \"role_5\",\n    user: 0,\n    status: '1'\n  }];\n  const mockUserList = [{\n    id: 1,\n    key: 1,\n    user_name: \"name_1\",\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    user_name: \"name_2\",\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    user_name: \"name_3\",\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    user_name: \"name_4\",\n    status: '1'\n  }, {\n    id: 5,\n    key: 5,\n    user_name: \"name_5\",\n    status: '1'\n  }];\n\n  const viewUsers = record => {\n    let newUserObject = [];\n    let groupList = record.map_user_groups.length;\n\n    for (let index = 0; index < groupList; index++) {\n      newUserObject.push(_objectSpread({\n        name: record.map_user_groups[index].user_profile.name,\n        surname: record.map_user_groups[index].user_profile.surname,\n        email: record.map_user_groups[index].user_profile.email\n      }, record.map_user_groups[index]));\n    }\n\n    addKeyToDataSource(newUserObject).then(result => {\n      setUserInGroupList(result);\n      setmodalString(__jsx(Table, {\n        dataSource: result,\n        columns: columnUser,\n        size: \"small\",\n        pagination: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }\n      }));\n    });\n    setModalType('');\n    setModalTitle('User List');\n    setvisible(true);\n  };\n\n  const viewManageGroup = record => {\n    userAccessManagementStore.groupSelected = record;\n    userAccessManagementStore.nextPageIsManageGroup = true;\n  };\n\n  const renderUsers = record => {\n    if (record.map_user_groups <= 0) {\n      return __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 16\n        }\n      }, \"0 user\");\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 16\n        }\n      }, __jsx(\"a\", {\n        onClick: () => viewUsers(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }\n      }, record.map_user_groups.length, \" Users\"));\n    }\n  };\n\n  const renderActionGroup = record => {\n    if (record.request_status == 'APPROVE') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        onClick: () => viewManageGroup(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status == 'PENDING') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const renderRoleName = role => {\n    console.log(toJS(role)); // return role.name\n  };\n\n  const columnGroup = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Role',\n    dataIndex: 'role',\n    render: (text, record) => renderRoleName(record.role)\n  }, {\n    title: 'Users',\n    dataIndex: 'map_user_groups',\n    render: (text, record) => renderUsers(record)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionGroup(record) // render:(text,record) => renderAction(record, viewManageGroup)\n\n  }];\n  const columnUser = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Surname',\n    dataIndex: 'surname' // render: (text, record) => renderSection(record)\n\n  }];\n\n  const addNewGroup = () => {\n    //call api\n    setvisible(false);\n    let request = {\n      name: groupName,\n      role_id: roleSelect\n    };\n    userAccessManagementStore.submitAddNewGroup(request); // console.log(groupName, roleSelect)\n  };\n\n  const FormAddNewGroup = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 15\n      }\n    }, \"Group Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 13\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => groupName = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 15\n      }\n    }))), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 15\n      }\n    }, \"Role\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: value => roleSelect = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 15\n      }\n    }, roleOptionList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 54\n      }\n    }, item.name))))));\n  };\n\n  const UserList = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      flex: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      dataSource: userInGroupList,\n      columns: columnUser,\n      size: \"small\",\n      pagination: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 15\n      }\n    }))));\n  };\n\n  const openModalAddGroup = () => {\n    setModalTitle('Add New Group');\n    setModalType('confirm');\n    setmodalString(__jsx(FormAddNewGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 22\n      }\n    }));\n    setvisible(true);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddGroup(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 13\n    }\n  }, \"Add Group\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: groupList,\n    columns: columnGroup,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addNewGroup(),\n    onCancel: () => setvisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default GroupList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/group-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","orange","green","gold","SimpleModal","SimpleInput","checkDefaultStatus","renderAction","addKeyToDataSource","UserAccessManagement","toJS","Option","groupName","roleSelect","GroupList","props","userAccessManagementStore","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","groupList","setGroupList","roleOptionList","setRoleOptionList","userInGroupList","setUserInGroupList","getDataGroup","getDataRoleOptionList","length","then","result","optionRoleList","mockRoleList","id","key","role_name","mockGroupList","group_name","user","status","mockUserList","user_name","viewUsers","record","newUserObject","map_user_groups","index","push","name","user_profile","surname","email","columnUser","viewManageGroup","groupSelected","nextPageIsManageGroup","renderUsers","renderActionGroup","request_status","textAlign","marginRight","color","renderRoleName","role","console","log","columnGroup","title","dataIndex","width","render","text","addNewGroup","request","role_id","submitAddNewGroup","FormAddNewGroup","padding","value","map","item","UserList","openModalAddGroup"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\n\nimport SimpleModal from '../../simple-modal'\nimport SimpleInput from '../../simple-input'\n\nimport { checkDefaultStatus, renderAction, addKeyToDataSource } from '../../data-utility'\nimport UserAccessManagement from '../../../stores/user-access-management-store';\nimport { toJS } from 'mobx';\n\nconst { Option } = Select;\nlet groupName = null\nlet roleSelect = null\nconst GroupList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setvisible] = useState(false)\n    const [groupList, setGroupList] = useState([])\n    const [roleOptionList, setRoleOptionList] = useState([])\n    const [userInGroupList, setUserInGroupList] = useState([])\n\n    useEffect(() => {\n      userAccessManagementStore.getDataGroup()\n      userAccessManagementStore.getDataRoleOptionList()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.groupList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.groupList).then(result => {\n          setGroupList(result)\n        })\n      }\n    }, [userAccessManagementStore.groupList])\n\n    useEffect(() => {\n      if (userAccessManagementStore.optionRoleList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.optionRoleList).then(result => {\n          setRoleOptionList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.optionRoleList])\n    const mockRoleList = [\n      {\n        id: 1,\n        key: 1,\n        role_name: \"role_1\"\n      },\n      {\n        id: 2,\n        key: 2,\n        role_name: \"role_2\",\n      },\n      {\n        id: 3,\n        key: 3,\n        role_name: \"role_3\",\n      },\n      {\n        id: 4,\n        key: 4,\n        role_name: \"role_4\",\n      },\n      {\n        id: 5,\n        key: 5,\n        role_name: \"role_5\",\n      }\n    ]\n\n    const mockGroupList = [\n      {\n        id: 1,\n        key: 1,\n        group_name: \"group_1\",\n        role_name: \"role_1\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        group_name: \"group_2\",\n        role_name: \"role_2\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        group_name: \"group_3\",\n        role_name: \"role_3\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        group_name: \"group_4\",\n        role_name: \"role_4\",\n        user: 5,\n        status: '2'\n      },\n      {\n        id: 5,\n        key: 5,\n        group_name: \"group_5\",\n        role_name: \"role_5\",\n        user: 0,\n        status: '1'\n      }\n    ]\n\n    const mockUserList = [\n      {\n        id: 1,\n        key: 1,\n        user_name: \"name_1\",\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        user_name: \"name_2\",\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        user_name: \"name_3\",\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        user_name: \"name_4\",\n        status: '1'\n      },\n      {\n        id: 5,\n        key: 5,\n        user_name: \"name_5\",\n        status: '1'\n      }\n    ]\n\n    const viewUsers = (record) => {\n      let newUserObject = []\n      let groupList = record.map_user_groups.length\n      for (let index = 0; index < groupList; index++) {\n        newUserObject.push({\n          name: record.map_user_groups[index].user_profile.name,\n          surname: record.map_user_groups[index].user_profile.surname,\n          email: record.map_user_groups[index].user_profile.email,\n          ...record.map_user_groups[index]\n        })\n      }\n      addKeyToDataSource(newUserObject).then(result => {\n        setUserInGroupList(result)\n        setmodalString(\n          <Table\n            dataSource={result}\n            columns={columnUser}\n            size=\"small\"\n            pagination={false}\n          />\n        )\n      })\n\n      setModalType('')\n      setModalTitle('User List')\n      setvisible(true)\n    }\n\n    const viewManageGroup = (record) => {\n      userAccessManagementStore.groupSelected = record\n      userAccessManagementStore.nextPageIsManageGroup = true\n    }\n\n    const renderUsers = (record) => {\n      if (record.map_user_groups <= 0) {\n        return <span>0 user</span>\n      } else {\n        return <div>\n          <a onClick={() => viewUsers(record)}>{record.map_user_groups.length} Users</a>\n        </div>\n      }\n    }\n\n    const renderActionGroup = (record) => {\n      if (record.request_status == 'APPROVE') {\n        return (\n          <div style={{ textAlign: \"center\" }}>\n            <a style={{ marginRight: 8, color: '#FBA928' }} onClick={() => viewManageGroup(record)}>Edit</a>\n            <TcrbPopconfirm title=\"Sure to Deactivate?\" >\n              <a style={{ color: '#FBA928' }}>Deactivate</a>\n            </TcrbPopconfirm>\n          </div>\n        )\n      } else if (record.request_status == 'PENDING') {\n        return null\n      } else {\n        return null\n      }\n    }\n\n    const renderRoleName = (role) => {\n      console.log(toJS(role))\n      // return role.name\n    }\n\n    const columnGroup = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Role',\n        dataIndex: 'role',\n        render: (text, record) => renderRoleName(record.role)\n      },\n      {\n        title: 'Users',\n        dataIndex: 'map_user_groups',\n        render: (text, record) => renderUsers(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroup(record)\n        // render:(text,record) => renderAction(record, viewManageGroup)\n      }\n    ]\n\n    const columnUser = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Surname',\n        dataIndex: 'surname',\n        // render: (text, record) => renderSection(record)\n      }\n    ]\n\n    const addNewGroup = () => {\n      //call api\n      setvisible(false)\n      let request = {\n        name: groupName,\n        role_id: roleSelect\n      }\n      userAccessManagementStore.submitAddNewGroup(request)\n      // console.log(groupName, roleSelect)\n    }\n\n    const FormAddNewGroup = () => {\n      return (\n        <div>\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>\n                Group Name\n            </p>\n            </Col>\n            <Col span={14}>\n              <SimpleInput onChange={(value) => groupName = value} />\n            </Col>\n          </Row>\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>Role</p>\n            </Col>\n            <Col span={14}>\n              <Select\n                style={{ width: '100%' }}\n                placeholder=\"Please select\"\n                onChange={(value) => roleSelect = value}\n              >\n                {roleOptionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n              </Select>\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    const UserList = () => {\n      return (\n        <div>\n          <Row>\n            <Col flex={100}>\n              <Table\n                dataSource={userInGroupList}\n                columns={columnUser}\n                size=\"small\"\n                pagination={false}\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    const openModalAddGroup = () => {\n      setModalTitle('Add New Group')\n      setModalType('confirm')\n      setmodalString(<FormAddNewGroup />)\n      setvisible(true)\n    }\n\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddGroup()} >Add Group</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={groupList}\n          columns={columnGroup}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewGroup()}\n          onCancel={() => setvisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default GroupList\n"]},"metadata":{},"sourceType":"module"}