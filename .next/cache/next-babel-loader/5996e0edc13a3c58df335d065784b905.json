{"ast":null,"code":"import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './api-integrations/header';\nimport getGeneralApiProblem from './api-integrations/error-handler';\nimport https from 'https';\nimport axios from 'axios';\nimport ExcuteApi from './api-integrations/excute-api';\n\nclass BusinessParameterSetupApi {\n  constructor() {\n    this.getOtpValue = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/parameterstore', params, \"get\");\n      return response;\n    };\n\n    this.setOtpValue = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/changerequest/otp', params, \"post\");\n      return response;\n    };\n\n    this.getProductLimit = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/partnertransactionlimit', params, \"get\");\n      return response;\n    };\n\n    this.getDetailProductLimit = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/partnertransactionlimit/' + params, \"get\");\n      return response;\n    };\n\n    this.getChannelPartnerList = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/partnerinformation', params, \"get\");\n      return response;\n    };\n\n    this.deleteProductLimit = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/changerequest/productlimit', params, \"post\");\n      return response;\n    };\n\n    this.addNewProductLimit = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/changerequest/productlimit', params, \"post\");\n      return response;\n    };\n\n    this.getPendingList = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/changerequest', params, \"get\");\n      return response;\n    };\n\n    this.approveRejectOtpRequest = async params => {\n      const response = await api.put('api/backoffice/v1/changerequest/otp', params);\n      return response;\n    };\n\n    this.rejectRejectProductRequest = async params => {\n      const response = await api.put('api/backoffice/v1/changerequest/productlimit', params);\n      return response;\n    };\n\n    this.getPartnerChannel = async params => {\n      const response = await ExcuteApi('api/backoffice/v1/partnertransactionlimit', params, \"get\");\n      return response;\n    };\n  } // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n\n}\n\nexport default new BusinessParameterSetupApi(); // HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n// customer service inquiry\n// bussiness parameter setup\n// customer service menu","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/business-parameter-setup-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","getGeneralApiProblem","https","axios","ExcuteApi","BusinessParameterSetupApi","getOtpValue","params","response","setOtpValue","getProductLimit","getDetailProductLimit","getChannelPartnerList","deleteProductLimit","addNewProductLimit","getPendingList","approveRejectOtpRequest","api","put","rejectRejectProductRequest","getPartnerChannel"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,UAAtD;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;AAEA,MAAMC,yBAAN,CAAgC;AAAA;AAAA,SAE9BC,WAF8B,GAEhB,MAAOC,MAAP,IAAkB;AAC9B,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,kCAAD,EAAqCG,MAArC,EAA6C,KAA7C,CAAhC;AACA,aAAOC,QAAP;AACD,KAL6B;;AAAA,SAO9BC,WAP8B,GAOhB,MAAOF,MAAP,IAAkB;AAC9B,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,qCAAD,EAAwCG,MAAxC,EAAgD,MAAhD,CAAhC;AACA,aAAOC,QAAP;AACD,KAV6B;;AAAA,SAY9BE,eAZ8B,GAYZ,MAAOH,MAAP,IAAkB;AAClC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,2CAAD,EAA8CG,MAA9C,EAAsD,KAAtD,CAAhC;AACA,aAAOC,QAAP;AACD,KAf6B;;AAAA,SAiB9BG,qBAjB8B,GAiBN,MAAOJ,MAAP,IAAkB;AACxC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,+CAA+CG,MAAhD,EAAwD,KAAxD,CAAhC;AACA,aAAOC,QAAP;AACD,KApB6B;;AAAA,SAsB9BI,qBAtB8B,GAsBN,MAAOL,MAAP,IAAkB;AACxC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,sCAAD,EAAyCG,MAAzC,EAAiD,KAAjD,CAAhC;AACA,aAAOC,QAAP;AACD,KAzB6B;;AAAA,SA2B9BK,kBA3B8B,GA2BT,MAAON,MAAP,IAAkB;AACrC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,8CAAD,EAAiDG,MAAjD,EAAyD,MAAzD,CAAhC;AACA,aAAOC,QAAP;AACD,KA9B6B;;AAAA,SAgC9BM,kBAhC8B,GAgCT,MAAOP,MAAP,IAAkB;AACrC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,8CAAD,EAAiDG,MAAjD,EAAyD,MAAzD,CAAhC;AACA,aAAOC,QAAP;AACD,KAnC6B;;AAAA,SAqC9BO,cArC8B,GAqCb,MAAOR,MAAP,IAAkB;AACjC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,iCAAD,EAAoCG,MAApC,EAA4C,KAA5C,CAAhC;AACA,aAAOC,QAAP;AACD,KAxC6B;;AAAA,SA0C9BQ,uBA1C8B,GA0CJ,MAAOT,MAAP,IAAkB;AAC1C,YAAMC,QAAQ,GAAG,MAAMS,GAAG,CAACC,GAAJ,CAAQ,qCAAR,EAA+CX,MAA/C,CAAvB;AACA,aAAOC,QAAP;AACD,KA7C6B;;AAAA,SA+C9BW,0BA/C8B,GA+CD,MAAOZ,MAAP,IAAkB;AAC7C,YAAMC,QAAQ,GAAG,MAAMS,GAAG,CAACC,GAAJ,CAAQ,8CAAR,EAAwDX,MAAxD,CAAvB;AACA,aAAOC,QAAP;AACD,KAlD6B;;AAAA,SAqD9BY,iBArD8B,GAqDV,MAAOb,MAAP,IAAkB;AACpC,YAAMC,QAAQ,GAAG,MAAMJ,SAAS,CAAC,2CAAD,EAA8CG,MAA9C,EAAsD,KAAtD,CAAhC;AACA,aAAOC,QAAP;AACD,KAxD6B;AAAA,IA0D9B;AACA;AACA;;;AA5D8B;;AA+DhC,eAAe,IAAIH,yBAAJ,EAAf,C,CACA;AAGA;AACA;AACA","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './api-integrations/header'\nimport getGeneralApiProblem from './api-integrations/error-handler'\nimport https from 'https';\nimport axios from 'axios'\nimport ExcuteApi from './api-integrations/excute-api'\n\nclass BusinessParameterSetupApi {\n\n  getOtpValue = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/parameterstore', params, \"get\")\n    return response\n  }\n\n  setOtpValue = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/changerequest/otp', params, \"post\")\n    return response\n  }\n\n  getProductLimit = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/partnertransactionlimit', params, \"get\")\n    return response\n  }\n\n  getDetailProductLimit = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/partnertransactionlimit/' + params, \"get\")\n    return response\n  }\n\n  getChannelPartnerList = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/partnerinformation', params, \"get\")\n    return response\n  }\n\n  deleteProductLimit = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/changerequest/productlimit', params, \"post\")\n    return response\n  }\n\n  addNewProductLimit = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/changerequest/productlimit', params, \"post\")\n    return response\n  }\n\n  getPendingList = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/changerequest', params, \"get\")\n    return response\n  }\n\n  approveRejectOtpRequest = async (params) => {\n    const response = await api.put('api/backoffice/v1/changerequest/otp', params)\n    return response\n  }\n\n  rejectRejectProductRequest = async (params) => {\n    const response = await api.put('api/backoffice/v1/changerequest/productlimit', params)\n    return response\n  }\n\n\n  getPartnerChannel = async (params) => {\n    const response = await ExcuteApi('api/backoffice/v1/partnertransactionlimit', params, \"get\")\n    return response\n  }\n\n  // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n}\nexport default new BusinessParameterSetupApi()\n// HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n\n\n// customer service inquiry\n// bussiness parameter setup\n// customer service menu\n"]},"metadata":{},"sourceType":"module"}