{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx';\nimport { PendingApprovalApi } from '../services/pending-approvals-api';\nimport { create, persist } from 'mobx-persist';\nlet pendingApprovals = (_class = (_temp = class pendingApprovals {\n  constructor() {\n    _initializerDefineProperty(this, \"apiLoading\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"responseGetPendingApproveList\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"requestGetPendingApproveList\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"errorGetPendingApproveList\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"responseProcessPendingList\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"requestProcessPendingList\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"errorProcessPendingList\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"tmpPendingListID\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"pendingApprovals\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"fetchingApi\", _descriptor10, this);\n\n    this.updatePendingList = () => {\n      if (this.tmpPendingListID && this.responseProcessPendingList) {\n        let old_id = JSON.parse(JSON.stringify(this.tmpPendingListID));\n        let old_list = JSON.parse(JSON.stringify(this.responseGetPendingApproveList));\n        old_list.map((e, i) => {\n          if (old_id == e.id) {\n            old_list.splice(i, 1);\n          }\n        });\n        this.responseGetPendingApproveList = old_list;\n      }\n    };\n\n    _initializerDefineProperty(this, \"setTmpPendingListID\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"processPendingListApprove\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"getPendingApprove\", _descriptor13, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"apiLoading\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"responseGetPendingApproveList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"requestGetPendingApproveList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"errorGetPendingApproveList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"responseProcessPendingList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"requestProcessPendingList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"errorProcessPendingList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"tmpPendingListID\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"pendingApprovals\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"fetchingApi\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"setTmpPendingListID\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.tmpPendingListID = id;\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"processPendingListApprove\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiLoading = true;\n      let tmp = await PendingApprovalApi.processPendingList(params);\n      console.log(\"Response process Pending Approve APISAUCE : \", tmp);\n\n      if (tmp.ok) {\n        this.apiLoading = false;\n        this.errorProcessPendingList = null;\n        this.responseProcessPendingList = tmp.ok;\n        this.updatePendingList();\n        this.tmpPendingListID = null;\n      } else {\n        this.apiLoading = false;\n        this.responseProcessPendingList = null;\n        this.errorProcessPendingList = tmp.problem;\n        this.tmpPendingListID = null;\n      }\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"getPendingApprove\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiLoading = true;\n      let tmp = await PendingApprovalApi.getPendingApproveList(params);\n      console.log(\"Response get Pending Approve APISAUCE : \", tmp);\n\n      if (tmp.ok == true) {\n        let raw_Data = toJS(tmp.data.responseData);\n        this.apiLoading = false;\n        this.errorGetPendingApproveList = null;\n        this.responseGetPendingApproveList = raw_Data;\n      } else {\n        this.apiLoading = false;\n        this.responseGetPendingApproveList = null;\n        this.errorGetPendingApproveList = tmp.problem;\n      }\n    };\n  }\n})), _class);\nexport default pendingApprovals;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/pending-approve-store.js"],"names":["observable","action","computed","toJS","PendingApprovalApi","create","persist","pendingApprovals","updatePendingList","tmpPendingListID","responseProcessPendingList","old_id","JSON","parse","stringify","old_list","responseGetPendingApproveList","map","e","i","id","splice","params","apiLoading","tmp","processPendingList","console","log","ok","errorProcessPendingList","problem","getPendingApproveList","raw_Data","data","responseData","errorGetPendingApproveList"],"mappings":"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","sourcesContent":["// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx'\nimport { PendingApprovalApi } from '../services/pending-approvals-api'\nimport { create, persist } from 'mobx-persist'\n\nclass pendingApprovals {\n  @observable apiLoading = null\n\n  @observable responseGetPendingApproveList = null\n  @observable requestGetPendingApproveList = null\n  @observable errorGetPendingApproveList = null\n\n  @observable responseProcessPendingList = null\n  @observable requestProcessPendingList = null\n  @observable errorProcessPendingList = null\n  @observable tmpPendingListID = null\n\n  @observable pendingApprovals = []\n  @observable fetchingApi = false\n\n\n\n  updatePendingList = () => {\n    if (this.tmpPendingListID && this.responseProcessPendingList) {\n      let old_id = JSON.parse(JSON.stringify(this.tmpPendingListID))\n      let old_list = JSON.parse(JSON.stringify(this.responseGetPendingApproveList))\n      old_list.map((e, i) => {\n        if (old_id == e.id) {\n          old_list.splice(i, 1)\n        }\n      })\n      this.responseGetPendingApproveList = old_list\n    }\n  }\n\n  @action setTmpPendingListID = (id) => {\n    this.tmpPendingListID = id\n  }\n\n  @action processPendingListApprove = async (params) => {\n    this.apiLoading = true\n    let tmp = await PendingApprovalApi.processPendingList(params)\n    console.log(\"Response process Pending Approve APISAUCE : \", tmp)\n    if (tmp.ok) {\n      this.apiLoading = false\n      this.errorProcessPendingList = null\n      this.responseProcessPendingList = tmp.ok\n      this.updatePendingList()\n      this.tmpPendingListID = null\n    } else {\n      this.apiLoading = false\n      this.responseProcessPendingList = null\n      this.errorProcessPendingList = tmp.problem\n      this.tmpPendingListID = null\n    }\n  }\n\n  @action getPendingApprove = async (params) => {\n    this.apiLoading = true\n    let tmp = await PendingApprovalApi.getPendingApproveList(params)\n    console.log(\"Response get Pending Approve APISAUCE : \", tmp)\n    if (tmp.ok == true) {\n      let raw_Data = toJS(tmp.data.responseData)\n      this.apiLoading = false\n      this.errorGetPendingApproveList = null\n      this.responseGetPendingApproveList = raw_Data\n    } else {\n      this.apiLoading = false\n      this.responseGetPendingApproveList = null\n      this.errorGetPendingApproveList = tmp.problem\n    }\n  }\n}\nexport default pendingApprovals\n"]},"metadata":{},"sourceType":"module"}