{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/role-based-matrix/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, Select } from 'antd';\nconst {\n  Option\n} = Select;\n\nconst RoleBasedMatrix = () => {\n  const {\n    0: mockDataSourceDynamic,\n    1: setMockDataSourceDynamic\n  } = useState([]);\n  const {\n    0: column,\n    1: setColumn\n  } = useState(null);\n  const roleList = 10;\n  const functionList = 4;\n  const roleMatrix = {\n    role_1: [],\n    role_2: [],\n    role_3: [],\n    role_4: [],\n    role_5: [],\n    role_6: []\n  };\n  let dataSource = [];\n  let testColumn = [];\n  useEffect(() => {\n    addRoleToColumn();\n    addFunctionToDataSource();\n  }, []);\n  /* const column = [\n    {\n      title: 'Function',\n      dataIndex: 'menu_name',\n      // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n    },\n    {\n      title: 'Functions',\n      dataIndex: 'functions',\n      // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n    }\n  ] */\n\n  const addRoleToColumn = () => {\n    for (let index = 0; index <= roleList; index++) {\n      if (index == 0) {\n        testColumn.push({\n          title: 'Functions',\n          dataIndex: 'function'\n        });\n      } else {\n        testColumn.push({\n          title: 'Role' + index,\n          dataIndex: 'role_' + index,\n          render: (text, record) => {\n            return __jsx(Select, {\n              style: {\n                width: '100%'\n              },\n              placeholder: \"Please select\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 17\n              }\n            }, __jsx(Option, {\n              value: \"unmark\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 57,\n                columnNumber: 19\n              }\n            }, \" Unmark\"), __jsx(Option, {\n              value: \"mark\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 19\n              }\n            }, \"mark\"), __jsx(Option, {\n              value: \"not use\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 19\n              }\n            }, \"not use\"));\n          }\n        });\n      }\n    }\n\n    setColumn(testColumn);\n  };\n\n  const addFunctionToDataSource = () => {\n    for (let index = 0; index <= functionList; index++) {\n      dataSource.push(_objectSpread({\n        function: 'function_' + index,\n        key: index\n      }, roleMatrix));\n    }\n\n    console.log(dataSource);\n    setMockDataSourceDynamic(dataSource);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, __jsx(Table, {\n    columns: column,\n    dataSource: mockDataSourceDynamic,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default RoleBasedMatrix;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/role-based-matrix/index.js"],"names":["React","useEffect","useState","Table","Select","Option","RoleBasedMatrix","mockDataSourceDynamic","setMockDataSourceDynamic","column","setColumn","roleList","functionList","roleMatrix","role_1","role_2","role_3","role_4","role_5","role_6","dataSource","testColumn","addRoleToColumn","addFunctionToDataSource","index","push","title","dataIndex","render","text","record","width","function","key","console","log"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Table, Select } from 'antd'\n\nconst { Option } = Select\nconst RoleBasedMatrix = () => {\n  const [mockDataSourceDynamic, setMockDataSourceDynamic] = useState([])\n  const [column, setColumn] = useState(null)\n  const roleList = 10\n  const functionList = 4\n  const roleMatrix = {\n    role_1: [],\n    role_2: [],\n    role_3: [],\n    role_4: [],\n    role_5: [],\n    role_6: [],\n  }\n  let dataSource = []\n  let testColumn = []\n\n  useEffect(() => {\n    addRoleToColumn()\n    addFunctionToDataSource()\n  }, [])\n  /* const column = [\n    {\n      title: 'Function',\n      dataIndex: 'menu_name',\n      // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n    },\n    {\n      title: 'Functions',\n      dataIndex: 'functions',\n      // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n    }\n  ] */\n\n  const addRoleToColumn = () => {\n    for (let index = 0; index <= roleList; index++) {\n      if (index == 0) {\n        testColumn.push(\n          {\n            title: 'Functions',\n            dataIndex: 'function'\n          }\n        )\n      } else {\n        testColumn.push(\n          {\n            title: 'Role' + index,\n            dataIndex: 'role_' + index,\n            render: (text, record) => {\n              return (\n                <Select\n                  style={{ width: '100%' }}\n                  placeholder=\"Please select\">\n                  <Option value=\"unmark\"> Unmark</Option>\n                  <Option value=\"mark\">mark</Option>\n                  <Option value=\"not use\">not use</Option>\n                </Select>\n              )\n            }\n          }\n        )\n      }\n    }\n    setColumn(testColumn)\n  }\n  const addFunctionToDataSource = () => {\n    for (let index = 0; index <= functionList; index++) {\n      dataSource.push(\n        {\n          function: 'function_' + index,\n          key: index,\n          ...roleMatrix\n        }\n      )\n    }\n    console.log(dataSource)\n    setMockDataSourceDynamic(dataSource)\n  }\n\n  return (\n    <div>\n      <Table\n        columns={column}\n        dataSource={mockDataSourceDynamic}\n      />\n    </div>\n  )\n}\n\nexport default RoleBasedMatrix\n"]},"metadata":{},"sourceType":"module"}