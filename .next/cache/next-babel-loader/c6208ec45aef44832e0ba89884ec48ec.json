{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/function/function-list.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport toJS from 'mobx';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility';\nvar functionName = null;\nvar FunctionList = inject('userAccessManagementStore')(observer(_s(function (props) {\n  _s();\n\n  var userAccessManagementStore = props.userAccessManagementStore;\n\n  var _useState = useState([]),\n      functionList = _useState[0],\n      setFunctionList = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      modalTitle = _useState2[0],\n      setModalTitle = _useState2[1];\n\n  var _useState3 = useState(\"Submit\"),\n      textOk = _useState3[0],\n      settextOk = _useState3[1];\n\n  var _useState4 = useState(\"Cancel\"),\n      textCancel = _useState4[0],\n      settextCancel = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      modalString = _useState5[0],\n      setModalString = _useState5[1];\n\n  var _useState6 = useState('confirm'),\n      modalType = _useState6[0],\n      setModalType = _useState6[1];\n\n  var _useState7 = useState(false),\n      visible = _useState7[0],\n      setVisible = _useState7[1];\n\n  var _useState8 = useState(''),\n      editingKey = _useState8[0],\n      setEditingKey = _useState8[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  useEffect(function () {\n    // setMockFunctionList(testFunctionList())\n    userAccessManagementStore.getDataFunction();\n  }, []);\n  useEffect(function () {\n    if (userAccessManagementStore.functionList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.functionList).then(function (result) {\n        setFunctionList(result);\n      });\n    }\n  }, [userAccessManagementStore.functionList]);\n\n  var isEditing = function isEditing(record) {\n    return record.key === editingKey;\n  };\n\n  var edit = function edit(record) {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  var EditableCell = function EditableCell(_ref) {\n    var editing = _ref.editing,\n        dataIndex = _ref.dataIndex,\n        title = _ref.title,\n        inputType = _ref.inputType,\n        record = _ref.record,\n        index = _ref.index,\n        children = _ref.children,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: \"Please Input \".concat(title, \"!\")\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    })) : children);\n  };\n\n  var FormAddNewMenu = function FormAddNewMenu() {\n    return __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 13\n      }\n    }, \"Function Name\")), __jsx(Col, {\n      span: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, __jsx(SimpleInput, {\n      onChange: function onChange(value) {\n        return functionName = value;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  var openModalAddFunction = function openModalAddFunction() {\n    setModalTitle('Add new function');\n    setModalString(__jsx(FormAddNewMenu, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  var addNewFunction = function addNewFunction() {\n    //waiting call api\n    var request = {\n      name: functionName\n    };\n    userAccessManagementStore.submitAddNewFunction(request);\n    setVisible(false);\n  };\n\n  var submitEditFunction = function submitEditFunction(record) {\n    console.log(toJS(record));\n    var index = functionList.findIndex(function (item) {\n      return record.key === item.key;\n    });\n    /* let request = {\n      newData: {\n        name: row.name\n      },\n      currentData: newData[index]\n    } */\n    // userAccessManagementStore.updateFunction()\n  };\n\n  var deactivateFunctionSelect = function deactivateFunctionSelect(record) {//waiting call api\n  };\n\n  var renderActionGroup = function renderActionGroup(record) {\n    var editable = isEditing(record);\n\n    if (record.request_status === 'APPROVE') {\n      return editable ? __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: function onConfirm() {\n          return submitEditFunction(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: function onConfirm() {\n          return cancelEditFunction();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: function onClick() {\n          return edit(record);\n        },\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 15\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: function onConfirm() {\n          return deactivateFunctionSelect(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status === 'PENDING') {\n      return null;\n    } else if (record.request_status === 'REJECT') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  var columnFunction = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(record.status, record.request_status);\n    }\n  }, {\n    title: 'Name',\n    dataIndex: 'name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: function render(text, record) {\n      return renderActionGroup(record);\n    }\n  }];\n  var mergedColumns = columnFunction.map(function (col) {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: function onCell(record) {\n        return {\n          record: record,\n          inputType: 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record)\n        };\n      }\n    });\n  });\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      return openModalAddFunction();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, \"Add Function\"))), __jsx(Form, {\n    form: form,\n    component: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: functionList,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 11\n    }\n  })), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: function onOk() {\n      return addNewFunction();\n    },\n    onCancel: function onCancel() {\n      return setVisible(false);\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 9\n    }\n  }));\n}, \"m3gDQMIt1dEbc47ipS3Ix7FwW8o=\", false, function () {\n  return [Form.useForm];\n})));\nexport default FunctionList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/function/function-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","toJS","SimpleModal","SimpleInput","checkDefaultStatus","addKeyToDataSource","functionName","FunctionList","props","userAccessManagementStore","functionList","setFunctionList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","editingKey","setEditingKey","useForm","form","getDataFunction","length","then","result","isEditing","record","key","edit","setFieldsValue","name","status","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","margin","required","message","FormAddNewMenu","value","openModalAddFunction","addNewFunction","request","submitAddNewFunction","submitEditFunction","console","log","findIndex","item","deactivateFunctionSelect","renderActionGroup","editable","request_status","marginRight","cancelEditFunction","color","textAlign","columnFunction","width","render","text","mergedColumns","map","col","onCell","body","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport toJS from 'mobx'\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility'\nlet functionName = null\nconst FunctionList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [functionList, setFunctionList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setModalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n    const [editingKey, setEditingKey] = useState('')\n\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n      // setMockFunctionList(testFunctionList())\n      userAccessManagementStore.getDataFunction()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.functionList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.functionList).then(result => {\n          setFunctionList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.functionList])\n\n    const isEditing = record => record.key === editingKey\n    const edit = record => {\n      form.setFieldsValue({\n        name: '',\n        status: record.status,\n        ...record,\n      });\n      setEditingKey(record.key);\n    }\n\n    const EditableCell = ({\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    }) => {\n      return (\n        <td {...restProps}>\n          {editing ? (\n            <Form.Item\n              name={dataIndex}\n              style={{\n                margin: 0\n              }}\n              rules={[\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          ) : (\n              children\n            )\n          }\n        </td>\n      )\n    }\n\n    const FormAddNewMenu = () => {\n      return (\n        <Row>\n          <Col span={10} >\n            <span>\n              Function Name\n            </span>\n          </Col>\n          <Col span={14}>\n            <SimpleInput onChange={(value) => functionName = value} />\n          </Col>\n        </Row>\n      )\n    }\n\n    const openModalAddFunction = () => {\n      setModalTitle('Add new function')\n      setModalString(<FormAddNewMenu />)\n      setVisible(true)\n    }\n\n    const addNewFunction = () => {\n      //waiting call api\n      let request = {\n        name: functionName\n      }\n      userAccessManagementStore.submitAddNewFunction(request)\n      setVisible(false)\n    }\n\n    const submitEditFunction = (record) => {\n      console.log(toJS(record))\n      const index = functionList.findIndex(item => record.key === item.key);\n      /* let request = {\n        newData: {\n          name: row.name\n        },\n        currentData: newData[index]\n      } */\n      // userAccessManagementStore.updateFunction()\n    }\n\n    const deactivateFunctionSelect = (record) => {\n      //waiting call api\n    }\n    const renderActionGroup = (record) => {\n      const editable = isEditing(record);\n      if (record.request_status === 'APPROVE') {\n        return editable ? (\n          <span>\n            <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => submitEditFunction(record)}>\n              <a style={{ marginRight: 8, }}>\n                Save\n                </a>\n            </TcrbPopconfirm>\n            <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={() => cancelEditFunction()}>\n              <a style={{ color: '#3e3e3e' }}>Cancel</a>\n            </TcrbPopconfirm>\n          </span>\n        ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                Edit\n                </a>\n              <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateFunctionSelect(record)}>\n                <a style={{ color: '#FBA928' }}>Deactivate</a>\n              </TcrbPopconfirm>\n            </div>\n          );\n      } else if (record.request_status === 'PENDING') {\n        return null\n      } else if (record.request_status === 'REJECT') {\n        return null\n      }\n      else {\n        return null\n      }\n    }\n    const columnFunction = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        editable: true\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroup(record)\n      }\n    ]\n    const mergedColumns = columnFunction.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddFunction()} >Add Function</TcrbButton>\n          </Col>\n        </Row>\n        <Form form={form} component={false}>\n          <Table\n            components={{\n              body: {\n                cell: EditableCell,\n              },\n            }}\n            bordered\n            dataSource={functionList}\n            columns={mergedColumns}\n            size=\"small\"\n          />\n        </Form>\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewFunction()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default FunctionList\n"]},"metadata":{},"sourceType":"module"}