{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/customer-services-menu/otp-unlocking.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Input, Row, Col, Layout, Modal, Switch, Alert } from 'antd';\nimport styled from 'styled-components';\nimport SimpleSearch from '../simple-search';\nimport SimpleModal from '../simple-modal';\nimport SimpleSwitch from '../simple-switch';\nimport { inject, observer } from 'mobx-react'; // import { useStores } from '../../hooks/use-stores'\n\nimport { StartupApi } from '../../services';\nimport { toJS } from 'mobx'; // import { i18n, withNamespaces } from '../../i18n'\n\nimport { withTranslation } from '../../i18n';\nconst StyledA = styled.a.withConfig({\n  displayName: \"otp-unlocking__StyledA\",\n  componentId: \"r234ff-0\"\n})([\"display:initial;padding-left:\", \"px !important;color:#F88008 !important;text-decoration-color:#F88008;text-decoration-line:underline;\"], ({\n  theme\n}) => theme.spacing.medium);\nconst StyledSpan = styled.span.withConfig({\n  displayName: \"otp-unlocking__StyledSpan\",\n  componentId: \"r234ff-1\"\n})([\"display:initial;padding-left:\", \"px !important;\"], ({\n  theme\n}) => theme.spacing.medium);\nconst StyledSwitch = styled(Switch).withConfig({\n  displayName: \"otp-unlocking__StyledSwitch\",\n  componentId: \"r234ff-2\"\n})([\"\", \"\"], ({\n  defaultChecked\n}) => defaultChecked && `\n      background-color: #F88008 !important;\n  `);\nconst OtpUnlocking = inject('customerServicesMenuStore')(observer(props => {\n  const {\n    0: idCard,\n    1: setIdCard\n  } = useState('');\n  const {\n    0: isSearch,\n    1: setIsSearch\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisble\n  } = useState(false);\n  const {\n    0: isChecked,\n    1: setIsChecked\n  } = useState(false);\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState('');\n  const {\n    0: stringSwitch,\n    1: setStringSwitch\n  } = useState([]);\n  const mockData = [{\n    accountNumber: '123123123123',\n    accountType: 'Binding to TCRB Mobile Banking',\n    accountStatus: true\n  }, {\n    accountNumber: '00993445123123',\n    accountType: 'Binding to Micro Pay',\n    accountStatus: false\n  }]; // const { customerServicesMenuStore } = useStores()\n\n  const {\n    customerServicesMenuStore,\n    t\n  } = props;\n  useEffect(() => {// console.log(customerServicesMenuStore.accountInfo)\n  });\n\n  const searchIdCardNumber = async value => {\n    console.log('eiei search:' + value);\n    setIdCard(value);\n    setIsSearch(true); // customerServicesMenuStore.setCitizenId(value)\n    //call api\n\n    await customerServicesMenuStore.getData(value); // console.log(toJS(customerServicesMenuStore.getAccountInfo))\n    // result = await convertArrayObjectToArray(toJS(customerServicesMenuStore.accountInfo))\n    // console.log(result)\n    // customerServicesMenuStore.arrayAccountInfo = result\n    // setStringSwitch(result)\n    // convertArrayObjectToArray(mockData).then(result => {\n    //   console.log(result)\n    //   customerServicesMenuStore.arrayAccountInfo = result\n    //   setStringSwitch(result)\n    // })\n    // console.log(stringSwitch)\n  };\n\n  const convertArrayObjectToArray = arrayObject => {\n    return new Promise((resolve, reject) => {\n      let result = arrayObject.map(a => [a.otp_is_locked, a.main_account_no, a.product_name_english]);\n      resolve(result);\n    });\n  };\n\n  const replaceNewDataForSetString = () => {\n    let arrayAccountInfo = toJS(customerServicesMenuStore.getAccountInfo);\n    let accountSelected = toJS(customerServicesMenuStore.accountSelected); // let newArray = stringSwitch.filter(accountInfo => accountInfo.accountNumber !== toJS(customerServicesMenuStore.accountSelected.accountNumber))\n\n    let newArray = arrayAccountInfo.filter(accountInfo => accountInfo.main_account_no !== accountSelected.main_account_no);\n    console.log(newArray, arrayAccountInfo);\n    convertArrayObjectToArray([...newArray, accountSelected]).then(result => {\n      console.log(result);\n      setStringSwitch(result);\n    });\n  };\n\n  const closeModal = () => {\n    setVisble(false);\n    setStringSwitch(toJS(customerServicesMenuStore.arrayAccountInfo));\n  };\n\n  const onChange = (switchSelected, index) => {\n    console.log(switchSelected, index);\n\n    if (switchSelected === true) {\n      customerServicesMenuStore.accountSelected = toJS(customerServicesMenuStore.getAccountInfo)[index];\n      setVisble(true);\n      setModalString(__jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }\n      }, t(\"unlockingOtp\")), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }\n      }, \" \", t(\"accountNumber\") + \" \" + customerServicesMenuStore.accountSelected.main_account_no)));\n    } else {// setIsChecked(false)\n    }\n  };\n\n  const unlockOTP = () => {\n    setVisble(false); //some action\n\n    customerServicesMenuStore.accountSelected.otp_is_locked = false;\n    replaceNewDataForSetString();\n  };\n\n  return __jsx(\"div\", {\n    style: {\n      marginTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, __jsx(SimpleSearch, {\n    search: searchIdCardNumber,\n    prefixWording: t(\"idCard\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  })), isSearch ? __jsx(SimpleSwitch, {\n    data: stringSwitch,\n    onChange: (switchSelected, index) => onChange(switchSelected, index),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }\n  }) : '', __jsx(SimpleModal, {\n    onOk: () => unlockOTP(),\n    onCancel: () => closeModal(),\n    okText: t(\"confirm\"),\n    cancelText: t(\"cancel\"),\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default withTranslation('common')(OtpUnlocking);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/customer-services-menu/otp-unlocking.js"],"names":["React","useState","useEffect","Input","Row","Col","Layout","Modal","Switch","Alert","styled","SimpleSearch","SimpleModal","SimpleSwitch","inject","observer","StartupApi","toJS","withTranslation","StyledA","a","theme","spacing","medium","StyledSpan","span","StyledSwitch","defaultChecked","OtpUnlocking","props","idCard","setIdCard","isSearch","setIsSearch","visible","setVisble","isChecked","setIsChecked","modalString","setModalString","stringSwitch","setStringSwitch","mockData","accountNumber","accountType","accountStatus","customerServicesMenuStore","t","searchIdCardNumber","value","console","log","getData","convertArrayObjectToArray","arrayObject","Promise","resolve","reject","result","map","otp_is_locked","main_account_no","product_name_english","replaceNewDataForSetString","arrayAccountInfo","getAccountInfo","accountSelected","newArray","filter","accountInfo","then","closeModal","onChange","switchSelected","index","textAlign","unlockOTP","marginTop"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,KAAjD,QAA8D,MAA9D;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC,C,CACA;;AACA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,IAAT,QAAqB,MAArB,C,CACA;;AACA,SAASC,eAAT,QAAgC,YAAhC;AAGA,MAAMC,OAAO,GAAGT,MAAM,CAACU,CAAV;AAAA;AAAA;AAAA,8IAEK,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,OAAN,CAAcC,MAFlC,CAAb;AAOA,MAAMC,UAAU,GAAGd,MAAM,CAACe,IAAV;AAAA;AAAA;AAAA,wDAGE,CAAC;AAAEJ,EAAAA;AAAF,CAAD,KAAeA,KAAK,CAACC,OAAN,CAAcC,MAH/B,CAAhB;AAKA,MAAMG,YAAY,GAAGhB,MAAM,CAACF,MAAD,CAAT;AAAA;AAAA;AAAA,aAEV,CAAC;AAAEmB,EAAAA;AAAF,CAAD,KAAwBA,cAAc,IAAK;;GAFjC,CAAlB;AAOA,MAAMC,YAAY,GAChBd,MAAM,CAAC,2BAAD,CAAN,CACGC,QAAQ,CAAEc,KAAD,IAAW;AACnB,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsB9B,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAA,OAAC+B,QAAD;AAAA,OAAWC;AAAX,MAA0BhC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACiC,OAAD;AAAA,OAAUC;AAAV,MAAuBlC,QAAQ,CAAC,KAAD,CAArC;AACA,QAAM;AAAA,OAACmC,SAAD;AAAA,OAAYC;AAAZ,MAA4BpC,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACqC,WAAD;AAAA,OAAcC;AAAd,MAAgCtC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACuC,YAAD;AAAA,OAAeC;AAAf,MAAkCxC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAMyC,QAAQ,GAAG,CACf;AAAEC,IAAAA,aAAa,EAAE,cAAjB;AAAiCC,IAAAA,WAAW,EAAE,gCAA9C;AAAgFC,IAAAA,aAAa,EAAE;AAA/F,GADe,EAEf;AAAEF,IAAAA,aAAa,EAAE,gBAAjB;AAAmCC,IAAAA,WAAW,EAAE,sBAAhD;AAAwEC,IAAAA,aAAa,EAAE;AAAvF,GAFe,CAAjB,CAPmB,CAWnB;;AACA,QAAM;AAAEC,IAAAA,yBAAF;AAA6BC,IAAAA;AAA7B,MAAmClB,KAAzC;AAEA3B,EAAAA,SAAS,CAAC,MAAM,CACd;AACD,GAFQ,CAAT;;AAIA,QAAM8C,kBAAkB,GAAG,MAAOC,KAAP,IAAiB;AAC1CC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAiBF,KAA7B;AACAlB,IAAAA,SAAS,CAACkB,KAAD,CAAT;AACAhB,IAAAA,WAAW,CAAC,IAAD,CAAX,CAH0C,CAI1C;AACA;;AACA,UAAMa,yBAAyB,CAACM,OAA1B,CAAkCH,KAAlC,CAAN,CAN0C,CAO1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,GAlBD;;AAoBA,QAAMI,yBAAyB,GAAIC,WAAD,IAAiB;AACjD,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAIC,MAAM,GAAGJ,WAAW,CAACK,GAAZ,CAAgBvC,CAAC,IAAI,CAACA,CAAC,CAACwC,aAAH,EAAkBxC,CAAC,CAACyC,eAApB,EAAqCzC,CAAC,CAAC0C,oBAAvC,CAArB,CAAb;AACAN,MAAAA,OAAO,CAACE,MAAD,CAAP;AACD,KAHM,CAAP;AAID,GALD;;AAMA,QAAMK,0BAA0B,GAAG,MAAM;AACvC,QAAIC,gBAAgB,GAAG/C,IAAI,CAAC6B,yBAAyB,CAACmB,cAA3B,CAA3B;AACA,QAAIC,eAAe,GAAGjD,IAAI,CAAC6B,yBAAyB,CAACoB,eAA3B,CAA1B,CAFuC,CAGvC;;AACA,QAAIC,QAAQ,GAAGH,gBAAgB,CAACI,MAAjB,CAAwBC,WAAW,IAAIA,WAAW,CAACR,eAAZ,KAAgCK,eAAe,CAACL,eAAvF,CAAf;AAEAX,IAAAA,OAAO,CAACC,GAAR,CAAYgB,QAAZ,EAAsBH,gBAAtB;AACAX,IAAAA,yBAAyB,CAAC,CAAC,GAAGc,QAAJ,EAAcD,eAAd,CAAD,CAAzB,CAA0DI,IAA1D,CAA+DZ,MAAM,IAAI;AACvER,MAAAA,OAAO,CAACC,GAAR,CAAYO,MAAZ;AACAjB,MAAAA,eAAe,CAACiB,MAAD,CAAf;AACD,KAHD;AAID,GAXD;;AAaA,QAAMa,UAAU,GAAG,MAAM;AACvBpC,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAM,IAAAA,eAAe,CAACxB,IAAI,CAAC6B,yBAAyB,CAACkB,gBAA3B,CAAL,CAAf;AACD,GAHD;;AAIA,QAAMQ,QAAQ,GAAG,CAACC,cAAD,EAAiBC,KAAjB,KAA2B;AAC1CxB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,cAAZ,EAA4BC,KAA5B;;AACA,QAAID,cAAc,KAAK,IAAvB,EAA6B;AAC3B3B,MAAAA,yBAAyB,CAACoB,eAA1B,GAA4CjD,IAAI,CAAC6B,yBAAyB,CAACmB,cAA3B,CAAJ,CAA+CS,KAA/C,CAA5C;AACAvC,MAAAA,SAAS,CAAC,IAAD,CAAT;AACAI,MAAAA,cAAc,CACZ;AAAK,QAAA,KAAK,EAAE;AAAEoC,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAI5B,CAAC,CAAC,cAAD,CAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAKA,CAAC,CAAC,eAAD,CAAD,GAAqB,GAArB,GAA2BD,yBAAyB,CAACoB,eAA1B,CAA0CL,eAA1E,CAFF,CADY,CAAd;AAMD,KATD,MASO,CACL;AACD;AACF,GAdD;;AAgBA,QAAMe,SAAS,GAAG,MAAM;AACtBzC,IAAAA,SAAS,CAAC,KAAD,CAAT,CADsB,CAGtB;;AACAW,IAAAA,yBAAyB,CAACoB,eAA1B,CAA0CN,aAA1C,GAA0D,KAA1D;AACAG,IAAAA,0BAA0B;AAC3B,GAND;;AASA,SACE;AAAK,IAAA,KAAK,EAAE;AAAEc,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,YAAD;AAAc,IAAA,MAAM,EAAE7B,kBAAtB;AAA0C,IAAA,aAAa,EAAED,CAAC,CAAC,QAAD,CAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,EAIIf,QAAD,GACC,MAAC,YAAD;AACE,IAAA,IAAI,EAAEQ,YADR;AAEE,IAAA,QAAQ,EAAE,CAACiC,cAAD,EAAiBC,KAAjB,KAA2BF,QAAQ,CAACC,cAAD,EAAiBC,KAAjB,CAF/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAII,EARP,EASE,MAAC,WAAD;AACE,IAAA,IAAI,EAAE,MAAME,SAAS,EADvB;AAEE,IAAA,QAAQ,EAAE,MAAML,UAAU,EAF5B;AAGE,IAAA,MAAM,EAAExB,CAAC,CAAC,SAAD,CAHX;AAIE,IAAA,UAAU,EAAEA,CAAC,CAAC,QAAD,CAJf;AAKE,IAAA,WAAW,EAAET,WALf;AAME,IAAA,OAAO,EAAEJ,OANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAoBD,CA1GQ,CADX,CADF;AA8GA,eAAehB,eAAe,CAAC,QAAD,CAAf,CAA0BU,YAA1B,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Input, Row, Col, Layout, Modal, Switch, Alert } from 'antd'\nimport styled from 'styled-components';\nimport SimpleSearch from '../simple-search'\nimport SimpleModal from '../simple-modal'\nimport SimpleSwitch from '../simple-switch'\nimport { inject, observer } from 'mobx-react'\n// import { useStores } from '../../hooks/use-stores'\nimport { StartupApi } from '../../services'\nimport { toJS } from 'mobx';\n// import { i18n, withNamespaces } from '../../i18n'\nimport { withTranslation } from '../../i18n'\n\n\nconst StyledA = styled.a`\n  display: initial;\n  padding-left: ${({ theme }) => theme.spacing.medium}px !important;\n  color: #F88008 !important;\n  text-decoration-color: #F88008;\n  text-decoration-line: underline;\n`\nconst StyledSpan = styled.span`\n\n  display: initial;\n  padding-left: ${({ theme }) => theme.spacing.medium}px !important;\n`\nconst StyledSwitch = styled(Switch)`\n\n      ${({ defaultChecked }) => defaultChecked && `\n      background-color: #F88008 !important;\n  `}\n`\n\nconst OtpUnlocking =\n  inject('customerServicesMenuStore')\n    (observer((props) => {\n      const [idCard, setIdCard] = useState('');\n      const [isSearch, setIsSearch] = useState(false);\n      const [visible, setVisble] = useState(false)\n      const [isChecked, setIsChecked] = useState(false)\n      const [modalString, setModalString] = useState('')\n      const [stringSwitch, setStringSwitch] = useState([])\n      const mockData = [\n        { accountNumber: '123123123123', accountType: 'Binding to TCRB Mobile Banking', accountStatus: true },\n        { accountNumber: '00993445123123', accountType: 'Binding to Micro Pay', accountStatus: false }\n      ]\n      // const { customerServicesMenuStore } = useStores()\n      const { customerServicesMenuStore, t } = props\n\n      useEffect(() => {\n        // console.log(customerServicesMenuStore.accountInfo)\n      })\n\n      const searchIdCardNumber = async (value) => {\n        console.log('eiei search:' + value)\n        setIdCard(value)\n        setIsSearch(true)\n        // customerServicesMenuStore.setCitizenId(value)\n        //call api\n        await customerServicesMenuStore.getData(value)\n        // console.log(toJS(customerServicesMenuStore.getAccountInfo))\n        // result = await convertArrayObjectToArray(toJS(customerServicesMenuStore.accountInfo))\n        // console.log(result)\n        // customerServicesMenuStore.arrayAccountInfo = result\n        // setStringSwitch(result)\n        // convertArrayObjectToArray(mockData).then(result => {\n        //   console.log(result)\n        //   customerServicesMenuStore.arrayAccountInfo = result\n        //   setStringSwitch(result)\n        // })\n        // console.log(stringSwitch)\n      }\n\n      const convertArrayObjectToArray = (arrayObject) => {\n        return new Promise((resolve, reject) => {\n          let result = arrayObject.map(a => [a.otp_is_locked, a.main_account_no, a.product_name_english]);\n          resolve(result)\n        })\n      }\n      const replaceNewDataForSetString = () => {\n        let arrayAccountInfo = toJS(customerServicesMenuStore.getAccountInfo)\n        let accountSelected = toJS(customerServicesMenuStore.accountSelected)\n        // let newArray = stringSwitch.filter(accountInfo => accountInfo.accountNumber !== toJS(customerServicesMenuStore.accountSelected.accountNumber))\n        let newArray = arrayAccountInfo.filter(accountInfo => accountInfo.main_account_no !== accountSelected.main_account_no)\n\n        console.log(newArray, arrayAccountInfo)\n        convertArrayObjectToArray([...newArray, accountSelected]).then(result => {\n          console.log(result)\n          setStringSwitch(result)\n        })\n      }\n\n      const closeModal = () => {\n        setVisble(false)\n        setStringSwitch(toJS(customerServicesMenuStore.arrayAccountInfo))\n      };\n      const onChange = (switchSelected, index) => {\n        console.log(switchSelected, index)\n        if (switchSelected === true) {\n          customerServicesMenuStore.accountSelected = toJS(customerServicesMenuStore.getAccountInfo)[index]\n          setVisble(true)\n          setModalString(\n            <div style={{ textAlign: \"center\" }}>\n              <p>{t(\"unlockingOtp\")}</p>\n              <p> {t(\"accountNumber\") + \" \" + customerServicesMenuStore.accountSelected.main_account_no}</p>\n            </div>\n          )\n        } else {\n          // setIsChecked(false)\n        }\n      }\n\n      const unlockOTP = () => {\n        setVisble(false)\n\n        //some action\n        customerServicesMenuStore.accountSelected.otp_is_locked = false\n        replaceNewDataForSetString()\n      }\n\n\n      return (\n        <div style={{ marginTop: 20 }}>\n          <Row gutter={[4, 24]}>\n            <SimpleSearch search={searchIdCardNumber} prefixWording={t(\"idCard\")} />\n          </Row>\n          {(isSearch) ? (\n            <SimpleSwitch\n              data={stringSwitch}\n              onChange={(switchSelected, index) => onChange(switchSelected, index)} />\n          ) : ('')}\n          <SimpleModal\n            onOk={() => unlockOTP()}\n            onCancel={() => closeModal()}\n            okText={t(\"confirm\")}\n            cancelText={t(\"cancel\")}\n            modalString={modalString}\n            visible={visible}\n          />\n        </div>\n      )\n    }))\n\nexport default withTranslation('common')(OtpUnlocking)\n"]},"metadata":{},"sourceType":"module"}