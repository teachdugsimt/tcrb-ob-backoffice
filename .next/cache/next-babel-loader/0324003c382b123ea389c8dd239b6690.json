{"ast":null,"code":"import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './api-integrations/Header';\nimport getGeneralApiProblem from './api-integrations/ErrorHandler';\n\nclass StartupApi {\n  constructor() {\n    this.createProcess = async params => {\n      const api = create(Header);\n      const response = await api.post('v1/calculator/calculate', params);\n\n      if (response.ok) {\n        return response.data;\n      } else {\n        let problem = getGeneralApiProblem(response);\n        return problem;\n      }\n    };\n\n    this.getAccountInfo = async params => {\n      const api = create(Header);\n      const response = await api.get('api/backoffice/v1/otp/blacklist', params);\n      return response;\n    };\n\n    this.getAccountInfoUnbinding = async params => {\n      const api = create(Header);\n      const response = await api.get('api/backoffice/v1/accounts', params);\n      return response;\n    };\n\n    this.getAccountProductsInfo = async params => {\n      const api = create(Header);\n      const response = await api.get('api/backoffice/v1/accounts', params);\n      return response;\n    };\n\n    this.unlockOTPAccount = async params => {\n      const api = create(Header);\n      const response = await api.post('api/backoffice/v1/otp/unlock/mock', params);\n      return response;\n    };\n\n    this.unbindAccount = async params => {\n      const api = create(Header);\n      const response = await api.post('api/accounts/unbind', params);\n      return response;\n    };\n  }\n\n}\n\nexport default new StartupApi();","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/StartupApi.js"],"names":["ApisauceInstance","create","ApiResponse","Header","getGeneralApiProblem","StartupApi","createProcess","params","api","response","post","ok","data","problem","getAccountInfo","get","getAccountInfoUnbinding","getAccountProductsInfo","unlockOTPAccount","unbindAccount"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,UAAtD;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,oBAAP,MAAiC,iCAAjC;;AAEA,MAAMC,UAAN,CAAiB;AAAA;AAAA,SAEfC,aAFe,GAEC,MAAOC,MAAP,IAAkB;AAChC,YAAMC,GAAG,GAAGP,MAAM,CAACE,MAAD,CAAlB;AACA,YAAMM,QAAQ,GAAG,MAAMD,GAAG,CAACE,IAAJ,CAAS,yBAAT,EAAoCH,MAApC,CAAvB;;AACA,UAAIE,QAAQ,CAACE,EAAb,EAAiB;AACf,eAAOF,QAAQ,CAACG,IAAhB;AACD,OAFD,MAEO;AACL,YAAIC,OAAO,GAAGT,oBAAoB,CAACK,QAAD,CAAlC;AACA,eAAOI,OAAP;AACD;AACF,KAXc;;AAAA,SAYfC,cAZe,GAYE,MAAOP,MAAP,IAAkB;AACjC,YAAMC,GAAG,GAAGP,MAAM,CAACE,MAAD,CAAlB;AACA,YAAMM,QAAQ,GAAG,MAAMD,GAAG,CAACO,GAAJ,CAAQ,iCAAR,EAA2CR,MAA3C,CAAvB;AACA,aAAOE,QAAP;AACD,KAhBc;;AAAA,SAkBfO,uBAlBe,GAkBW,MAAOT,MAAP,IAAkB;AAC1C,YAAMC,GAAG,GAAGP,MAAM,CAACE,MAAD,CAAlB;AACA,YAAMM,QAAQ,GAAG,MAAMD,GAAG,CAACO,GAAJ,CAAQ,4BAAR,EAAsCR,MAAtC,CAAvB;AACA,aAAOE,QAAP;AACD,KAtBc;;AAAA,SAwBfQ,sBAxBe,GAwBU,MAAOV,MAAP,IAAkB;AACzC,YAAMC,GAAG,GAAGP,MAAM,CAACE,MAAD,CAAlB;AACA,YAAMM,QAAQ,GAAG,MAAMD,GAAG,CAACO,GAAJ,CAAQ,4BAAR,EAAsCR,MAAtC,CAAvB;AACA,aAAOE,QAAP;AACD,KA5Bc;;AAAA,SA8BfS,gBA9Be,GA8BI,MAAOX,MAAP,IAAkB;AACnC,YAAMC,GAAG,GAAGP,MAAM,CAACE,MAAD,CAAlB;AACA,YAAMM,QAAQ,GAAG,MAAMD,GAAG,CAACE,IAAJ,CAAS,mCAAT,EAA8CH,MAA9C,CAAvB;AACA,aAAOE,QAAP;AACD,KAlCc;;AAAA,SAoCfU,aApCe,GAoCC,MAAOZ,MAAP,IAAkB;AAChC,YAAMC,GAAG,GAAGP,MAAM,CAACE,MAAD,CAAlB;AACA,YAAMM,QAAQ,GAAG,MAAMD,GAAG,CAACE,IAAJ,CAAS,qBAAT,EAAgCH,MAAhC,CAAvB;AACA,aAAOE,QAAP;AACD,KAxCc;AAAA;;AAAA;;AA0CjB,eAAe,IAAIJ,UAAJ,EAAf","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './api-integrations/Header'\nimport getGeneralApiProblem from './api-integrations/ErrorHandler'\n\nclass StartupApi {\n\n  createProcess = async (params) => {\n    const api = create(Header)\n    const response = await api.post('v1/calculator/calculate', params)\n    if (response.ok) {\n      return response.data\n    } else {\n      let problem = getGeneralApiProblem(response)\n      return problem\n    }\n  }\n  getAccountInfo = async (params) => {\n    const api = create(Header)\n    const response = await api.get('api/backoffice/v1/otp/blacklist', params)\n    return response\n  }\n\n  getAccountInfoUnbinding = async (params) => {\n    const api = create(Header)\n    const response = await api.get('api/backoffice/v1/accounts', params)\n    return response\n  }\n\n  getAccountProductsInfo = async (params) => {\n    const api = create(Header)\n    const response = await api.get('api/backoffice/v1/accounts', params)\n    return response\n  }\n\n  unlockOTPAccount = async (params) => {\n    const api = create(Header)\n    const response = await api.post('api/backoffice/v1/otp/unlock/mock', params)\n    return response\n  }\n\n  unbindAccount = async (params) => {\n    const api = create(Header)\n    const response = await api.post('api/accounts/unbind', params)\n    return response\n  }\n}\nexport default new StartupApi()\n"]},"metadata":{},"sourceType":"module"}