{"ast":null,"code":"import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './api-integrations/header';\nimport getGeneralApiProblem from './api-integrations/error-handler';\nimport https from 'https';\nimport axios from 'axios';\n\nclass BusinessParameterSetupApi {\n  constructor() {\n    this.getOtpValue = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/parameterstore', params); // console.log(\"response get OTP  :  \", response)\n\n      return response;\n    };\n\n    this.setOtpValue = async params => {\n      const api = create(Header());\n      const response = await api.put('api/backoffice/v1/parameterstore', params);\n      return response;\n    };\n\n    this.getProductLimit = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n\n    this.getOtpValueAxios = async params => {\n      const httpsAgent = new https.Agent({\n        rejectUnauthorized: false,\n        requestCert: false\n      });\n      console.log(\"Param before call : \", params); // const response = await axios.get(\"https://api-dev.onlinebanking-backoffice.com/api/backoffice/v1/parameterstore\", {\n\n      const response = await axios.get(\"https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore\", {\n        params,\n        httpsAgent,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json' // 'x-apigw-api-id': 'dwl8p0fxml',\n          // 'X-Forwarded-Proto': 'https',\n          // 'x-amzn-vpce-id': 'vpce-03ae60b10934425db',\n          // 'x-amzn-vpc-id': 'vpc-024c7d2df440a6d46',\n          // 'X-Forwarded-Port': '443'\n\n        }\n      });\n      return response;\n    };\n\n    this.getPartnerChannel = async params => {\n      const api = create(header);\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n  } // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n\n}\n\nexport default new BusinessParameterSetupApi(); // HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/business-parameter-setup-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","getGeneralApiProblem","https","axios","BusinessParameterSetupApi","getOtpValue","params","api","response","get","setOtpValue","put","getProductLimit","getOtpValueAxios","httpsAgent","Agent","rejectUnauthorized","requestCert","console","log","headers","getPartnerChannel","header"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,MAA3B,EAAmCC,WAAnC,QAAsD,UAAtD;AACA,OAAOC,MAAP,MAAmB,2BAAnB;AACA,OAAOC,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,yBAAN,CAAgC;AAAA;AAAA,SAE9BC,WAF8B,GAEhB,MAAOC,MAAP,IAAkB;AAC9B,YAAMC,GAAG,GAAGT,MAAM,CAACE,MAAM,EAAP,CAAlB;AACA,YAAMQ,QAAQ,GAAG,MAAMD,GAAG,CAACE,GAAJ,CAAQ,kCAAR,EAA4CH,MAA5C,CAAvB,CAF8B,CAG9B;;AACA,aAAOE,QAAP;AACD,KAP6B;;AAAA,SAS9BE,WAT8B,GAShB,MAAOJ,MAAP,IAAkB;AAC9B,YAAMC,GAAG,GAAGT,MAAM,CAACE,MAAM,EAAP,CAAlB;AACA,YAAMQ,QAAQ,GAAG,MAAMD,GAAG,CAACI,GAAJ,CAAQ,kCAAR,EAA4CL,MAA5C,CAAvB;AACA,aAAOE,QAAP;AACD,KAb6B;;AAAA,SAe9BI,eAf8B,GAeZ,MAAON,MAAP,IAAkB;AAClC,YAAMC,GAAG,GAAGT,MAAM,CAACE,MAAM,EAAP,CAAlB;AACA,YAAMQ,QAAQ,GAAG,MAAMD,GAAG,CAACE,GAAJ,CAAQ,2CAAR,EAAqDH,MAArD,CAAvB;AACA,aAAOE,QAAP;AACD,KAnB6B;;AAAA,SAqB9BK,gBArB8B,GAqBX,MAAOP,MAAP,IAAkB;AACnC,YAAMQ,UAAU,GAAG,IAAIZ,KAAK,CAACa,KAAV,CAAgB;AACjCC,QAAAA,kBAAkB,EAAE,KADa;AAEjCC,QAAAA,WAAW,EAAE;AAFoB,OAAhB,CAAnB;AAIAC,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCb,MAApC,EALmC,CAMnC;;AACA,YAAME,QAAQ,GAAG,MAAML,KAAK,CAACM,GAAN,CAAU,qHAAV,EAAiI;AACtJH,QAAAA,MADsJ;AAEtJQ,QAAAA,UAFsJ;AAGtJM,QAAAA,OAAO,EAAE;AACP,0BAAgB,kBADT;AAEP,oBAAU,kBAFH,CAGP;AAEA;AACA;AACA;AACA;;AARO;AAH6I,OAAjI,CAAvB;AAcA,aAAOZ,QAAP;AACD,KA3C6B;;AAAA,SA6C9Ba,iBA7C8B,GA6CV,MAAOf,MAAP,IAAkB;AACpC,YAAMC,GAAG,GAAGT,MAAM,CAACwB,MAAD,CAAlB;AACA,YAAMd,QAAQ,GAAG,MAAMD,GAAG,CAACE,GAAJ,CAAQ,2CAAR,EAAqDH,MAArD,CAAvB;AACA,aAAOE,QAAP;AACD,KAjD6B;AAAA,IAmD9B;AACA;AACA;;;AArD8B;;AAwDhC,eAAe,IAAIJ,yBAAJ,EAAf,C,CACA","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './api-integrations/header'\nimport getGeneralApiProblem from './api-integrations/error-handler'\nimport https from 'https';\nimport axios from 'axios'\n\nclass BusinessParameterSetupApi {\n\n  getOtpValue = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/parameterstore', params)\n    // console.log(\"response get OTP  :  \", response)\n    return response\n  }\n\n  setOtpValue = async (params) => {\n    const api = create(Header())\n    const response = await api.put('api/backoffice/v1/parameterstore', params)\n    return response\n  }\n\n  getProductLimit = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  getOtpValueAxios = async (params) => {\n    const httpsAgent = new https.Agent({\n      rejectUnauthorized: false,\n      requestCert: false,\n    })\n    console.log(\"Param before call : \", params)\n    // const response = await axios.get(\"https://api-dev.onlinebanking-backoffice.com/api/backoffice/v1/parameterstore\", {\n    const response = await axios.get(\"https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore\", {\n      params,\n      httpsAgent,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        // 'x-apigw-api-id': 'dwl8p0fxml',\n\n        // 'X-Forwarded-Proto': 'https',\n        // 'x-amzn-vpce-id': 'vpce-03ae60b10934425db',\n        // 'x-amzn-vpc-id': 'vpc-024c7d2df440a6d46',\n        // 'X-Forwarded-Port': '443'\n      }\n    })\n    return response\n  }\n\n  getPartnerChannel = async (params) => {\n    const api = create(header)\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n}\nexport default new BusinessParameterSetupApi()\n// HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n"]},"metadata":{},"sourceType":"module"}