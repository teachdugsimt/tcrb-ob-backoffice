{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/department/department-list.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm, TcrbModal } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport SimpleModal from '../../simple-modal';\nimport SimpleInput from '../../simple-input';\nimport { addKeyToDataSource } from '../../data-utility';\nimport UserAccessManagement from '../../../stores/user-access-management-store';\nconst {\n  Option\n} = Select;\nlet departmentName = null;\nlet sectionArray = [];\nconst DepartmentList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore,\n    t\n  } = props;\n  const {\n    0: title,\n    1: settitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textEdit,\n    1: setTextEdit\n  } = useState(\"Add Section\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('');\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: visibleFormModal,\n    1: setVisibleFormModal\n  } = useState(false);\n  const {\n    0: visibleSection,\n    1: setVisibleSection\n  } = useState(false);\n  const {\n    0: dataSourceDepartment,\n    1: setDataSourceDepartment\n  } = useState([]);\n  const {\n    0: addSection,\n    1: setAddSection\n  } = useState(false);\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const {\n    0: dataSourceSection,\n    1: setDataSourceSection\n  } = useState([]);\n  const {\n    0: editingKeySection,\n    1: setEditingKeySection\n  } = useState('');\n  const [form] = Form.useForm();\n\n  const isEditing = record => record.key === editingKey;\n\n  useEffect(() => {\n    userAccessManagementStore.getDataDepartment();\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.departmentList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.departmentList).then(result => {\n        setDataSourceDepartment(result);\n      });\n    }\n  }, [userAccessManagementStore.departmentList]);\n  const children = [];\n\n  for (let i = 10; i < 36; i++) {\n    children.push(__jsx(Option, {\n      key: i.toString(36) + i,\n      value: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 23\n      }\n    }, \"Section_\", i));\n  }\n\n  const mockSection = [{\n    section_name: 'section_1',\n    team_name: 'team_1',\n    section_id: '01',\n    status: '1',\n    key: 1\n  }, {\n    section_name: 'section_2',\n    team_name: 'team_2',\n    section_id: '02',\n    status: '1',\n    key: 2\n  }, {\n    section_name: 'section_3',\n    team_name: 'team_3',\n    section_id: '03',\n    status: '1',\n    key: 3\n  }];\n\n  const save = async key => {\n    const row = await form.validateFields();\n    const newData = [...mockDataDepartment];\n    const index = newData.findIndex(item => key === item.key); //waiting for call api\n\n    if (index > -1) {\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setDataSourceDepartment(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setDataSourceDepartment(newData);\n      setEditingKey('');\n    } //config request api\n\n    /*  let request = {\n       currentData: item,\n       newData: { ...item, ...row }\n     } */\n    // setEditingKey('');\n\n  };\n\n  const renderActionDepartment = record => {\n    if (record.request_status == 'APPROVE') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => viewDepartmentDetail(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 17\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status == 'PENDING') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const renderSection = record => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 16\n      }\n    }, __jsx(\"a\", {\n      onClick: () => selectSection(record.sections),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, record.sections.length, \" Section\"));\n  };\n\n  const checkStatus = record => {\n    //PENDING,APPROVE,REJECT\n    if (record.request_status == 'APPROVE') {\n      return __jsx(\"span\", {\n        style: {\n          color: green[6]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 18\n        }\n      }, \"Active\");\n    } else if (record.request_status == 'PENDING') {\n      return __jsx(\"span\", {\n        style: {\n          color: gold[6]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 18\n        }\n      }, \"Pending\");\n    } else {\n      return null;\n    }\n  };\n\n  const columnDepartment = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkStatus(record)\n  }, {\n    title: 'Department',\n    dataIndex: 'name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Section / Team',\n    dataIndex: 'section',\n    render: (text, record) => renderSection(record)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionDepartment(record)\n  }];\n  const columnSection = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkStatus(record)\n  }, {\n    title: 'Section',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }];\n\n  const FormAddNewDepartment = ({\n    visible,\n    onCreate,\n    onCancel\n  }) => {\n    return __jsx(TcrbModal, {\n      visible: visible,\n      title: \"Add new User\",\n      okText: \"Submit\",\n      cancelText: \"Cancel\",\n      onCancel: onCancel,\n      width: 600,\n      onOk: () => {\n        form.validateFields().then(values => {\n          form.resetFields();\n          onCreate(values);\n        }).catch(info => {\n          console.log('Validate Failed:', info);\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      form: form,\n      layout: \"vertical\",\n      name: \"form_in_modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 19\n      }\n    }, \"Department Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 17\n      }\n    }, __jsx(Form.Item, {\n      name: \"departmentName\",\n      rules: [{\n        required: true,\n        message: 'Please input Department Name'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 19\n      }\n    }, __jsx(SimpleInput, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 21\n      }\n    })))), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 19\n      }\n    }, \"Section / Team\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 17\n      }\n    }, __jsx(Form.Item, {\n      name: \"sectionName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 19\n      }\n    }, __jsx(Select, {\n      mode: \"tags\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: value => handleChange(value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 21\n      }\n    }))))));\n  };\n\n  const AddDepartment = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 15\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }\n    }, \"Department Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 15\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => departmentName = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 17\n      }\n    }))));\n  };\n\n  const handleChange = value => {\n    console.log(value);\n    sectionArray = value;\n  };\n\n  const SelectDepartment = props => {\n    return __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 15\n      }\n    }, \"Section / Team\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      mode: \"tags\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: value => handleChange(value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 15\n      }\n    })));\n  };\n\n  const viewDepartmentDetail = record => {\n    userAccessManagementStore.departmentSelected = record;\n    userAccessManagementStore.nextPageIsManageDepartment = true;\n  };\n\n  const ListSection = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 11\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      flex: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 15\n      }\n    }, __jsx(Table, {\n      bordered: true,\n      dataSource: dataSourceSection,\n      columns: columnSection,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 17\n      }\n    }))));\n  };\n\n  const selectSection = section => {\n    setModalType('');\n    settitle('Section and Team');\n    addKeyToDataSource(section).then(result => {\n      setmodalString(__jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 13\n        }\n      }, __jsx(Table, {\n        bordered: true,\n        dataSource: result,\n        columns: columnSection,\n        size: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 15\n        }\n      })));\n    });\n    setvisible(true);\n  };\n\n  const openModalAddDepartment = () => {\n    /* departmentName = null\n    sectionArray = []\n    setModalType('confirm')\n    settitle('Add New Department')\n    setmodalString(\n      <div>\n        <AddDepartment />\n        <SelectDepartment />\n      </div>\n    )\n    setvisible(true)*/\n    setVisibleFormModal(true);\n  };\n\n  const confirmDepartmentSelected = () => {};\n\n  const addNewDepartment = values => {\n    /* {\n      name: \"Department TMDS\",\n      sections: [\n        {\n          name: \"Section CCC\",\n        },\n        {\n          name: \"Section DDD\",\n        }\n      ]\n    } */\n    let sections = [];\n\n    for (let index = 0; index < values.sectionName.length; index++) {\n      sections.push({\n        name: sectionArray[index]\n      });\n    }\n\n    let request = {\n      name: values.departmentName,\n      sections: sections\n    };\n    setVisibleFormModal(false);\n    console.log(request);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddDepartment(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 15\n    }\n  }, \"Add Department\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: dataSourceDepartment,\n    columns: columnDepartment,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 11\n    }\n  }), __jsx(SimpleModal, {\n    title: title,\n    type: modalType,\n    onOk: () => addNewDepartment(),\n    onCancel: () => setvisible(false),\n    onEdit: () => onEditSection(),\n    textCancel: textCancel,\n    textOk: textOk,\n    textEdit: textEdit,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 11\n    }\n  }), __jsx(FormAddNewDepartment, {\n    visible: visibleFormModal,\n    onCreate: addNewDepartment,\n    onCancel: () => {\n      setVisibleFormModal(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default DepartmentList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/department/department-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","TcrbModal","inject","observer","orange","green","gold","SimpleModal","SimpleInput","addKeyToDataSource","UserAccessManagement","Option","departmentName","sectionArray","DepartmentList","props","userAccessManagementStore","t","title","settitle","textOk","settextOk","textEdit","setTextEdit","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","visibleFormModal","setVisibleFormModal","visibleSection","setVisibleSection","dataSourceDepartment","setDataSourceDepartment","addSection","setAddSection","editingKey","setEditingKey","dataSourceSection","setDataSourceSection","editingKeySection","setEditingKeySection","form","useForm","isEditing","record","key","getDataDepartment","departmentList","length","then","result","children","i","push","toString","mockSection","section_name","team_name","section_id","status","save","row","validateFields","newData","mockDataDepartment","index","findIndex","item","splice","renderActionDepartment","request_status","textAlign","viewDepartmentDetail","marginRight","color","renderSection","selectSection","sections","checkStatus","columnDepartment","dataIndex","width","render","text","editable","columnSection","FormAddNewDepartment","onCreate","onCancel","values","resetFields","catch","info","console","log","padding","required","message","value","handleChange","AddDepartment","SelectDepartment","departmentSelected","nextPageIsManageDepartment","ListSection","section","openModalAddDepartment","confirmDepartmentSelected","addNewDepartment","sectionName","name","request","onEditSection"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm, TcrbModal } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\n\nimport SimpleModal from '../../simple-modal'\nimport SimpleInput from '../../simple-input'\n\nimport { addKeyToDataSource } from '../../data-utility'\nimport UserAccessManagement from '../../../stores/user-access-management-store';\n\nconst { Option } = Select;\nlet departmentName = null\nlet sectionArray = []\nconst DepartmentList =\n  inject('userAccessManagementStore')\n    (observer((props) => {\n      const { userAccessManagementStore, t } = props\n      const [title, settitle] = useState(\"\")\n      const [textOk, settextOk] = useState(\"Submit\")\n      const [textEdit, setTextEdit] = useState(\"Add Section\")\n      const [textCancel, settextCancel] = useState(\"Cancel\")\n      const [modalString, setmodalString] = useState(\"\")\n      const [modalType, setModalType] = useState('')\n      const [visible, setvisible] = useState(false)\n      const [visibleFormModal, setVisibleFormModal] = useState(false)\n      const [visibleSection, setVisibleSection] = useState(false)\n      const [dataSourceDepartment, setDataSourceDepartment] = useState([])\n      const [addSection, setAddSection] = useState(false)\n      const [editingKey, setEditingKey] = useState('')\n      const [dataSourceSection, setDataSourceSection] = useState([])\n      const [editingKeySection, setEditingKeySection] = useState('')\n      const [form] = Form.useForm();\n\n\n      const isEditing = record => record.key === editingKey\n\n\n      useEffect(() => {\n        userAccessManagementStore.getDataDepartment()\n      }, [])\n\n      useEffect(() => {\n        if (userAccessManagementStore.departmentList.length >= 0) {\n          addKeyToDataSource(userAccessManagementStore.departmentList).then((result) => {\n            setDataSourceDepartment(result)\n          })\n        }\n      }, [userAccessManagementStore.departmentList])\n\n      const children = [];\n      for (let i = 10; i < 36; i++) {\n        children.push(<Option key={i.toString(36) + i} value={i}>Section_{i}</Option>);\n      }\n\n      const mockSection = [{\n        section_name: 'section_1',\n        team_name: 'team_1',\n        section_id: '01',\n        status: '1',\n        key: 1\n      },\n      {\n        section_name: 'section_2',\n        team_name: 'team_2',\n        section_id: '02',\n        status: '1',\n        key: 2\n      },\n      {\n        section_name: 'section_3',\n        team_name: 'team_3',\n        section_id: '03',\n        status: '1',\n        key: 3\n      }]\n\n      const save = async key => {\n        const row = await form.validateFields();\n        const newData = [...mockDataDepartment];\n        const index = newData.findIndex(item => key === item.key);\n\n        //waiting for call api\n        if (index > -1) {\n          const item = newData[index];\n          newData.splice(index, 1, { ...item, ...row });\n          setDataSourceDepartment(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setDataSourceDepartment(newData);\n          setEditingKey('');\n        }\n        //config request api\n        /*  let request = {\n           currentData: item,\n           newData: { ...item, ...row }\n         } */\n        // setEditingKey('');\n      }\n\n      const renderActionDepartment = (record) => {\n        if (record.request_status == 'APPROVE') {\n          return (\n            <div style={{ textAlign: \"center\" }}>\n              {/* <TcrbPopconfirm title=\"Sure to Edit?\" onConfirm={() => edit(record)}> */}\n              <a disabled={editingKey !== ''} onClick={() => viewDepartmentDetail(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                Edit\n              </a>\n              {/* </TcrbPopconfirm> */}\n              <TcrbPopconfirm title=\"Sure to Deactivate?\" >\n                <a style={{ color: '#FBA928' }}>Deactivate</a>\n              </TcrbPopconfirm>\n              {/* <TcrbPopconfirm title=\"Sure to Delete?\" disabled={editingKey !== ''} onConfirm={() => deletePartnerSelect(record)}>\n                  <a><DeleteOutlined style={{ fontSize: '18px', paddingRight: 8 }} /></a>\n                </TcrbPopconfirm>\n                <a disabled={editingKey !== ''} onClick={() => edit(record)}><EditOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a> */}\n            </div>\n          )\n        } else if (record.request_status == 'PENDING') {\n          return null\n        } else {\n          return null\n        }\n      }\n\n      const renderSection = (record) => {\n        return <div>\n          <a onClick={() => selectSection(record.sections)}>{record.sections.length} Section</a>\n        </div>\n      }\n\n      const checkStatus = (record) => {\n        //PENDING,APPROVE,REJECT\n        if (record.request_status == 'APPROVE') {\n          return <span style={{ color: green[6] }}>Active</span>\n        } else if (record.request_status == 'PENDING') {\n          return <span style={{ color: gold[6] }}>Pending</span>\n        } else {\n          return null\n        }\n      }\n\n      const columnDepartment = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkStatus(record)\n        },\n        {\n          title: 'Department',\n          dataIndex: 'name',\n          editable: true,\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        },\n        {\n          title: 'Section / Team',\n          dataIndex: 'section',\n          render: (text, record) => renderSection(record)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '10%',\n          render: (text, record) => renderActionDepartment(record)\n        }\n      ]\n\n      const columnSection = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkStatus(record)\n        },\n        {\n          title: 'Section',\n          dataIndex: 'name',\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        }\n      ]\n\n      const FormAddNewDepartment = ({ visible, onCreate, onCancel }) => {\n        return (\n          <TcrbModal\n            visible={visible}\n            title=\"Add new User\"\n            okText=\"Submit\"\n            cancelText=\"Cancel\"\n            onCancel={onCancel}\n            width={600}\n            onOk={() => {\n              form\n                .validateFields()\n                .then(values => {\n                  form.resetFields();\n                  onCreate(values);\n                })\n                .catch(info => {\n                  console.log('Validate Failed:', info);\n                });\n            }}\n          >\n            <Form\n              form={form}\n              layout=\"vertical\"\n              name=\"form_in_modal\"\n            >\n\n              <Row >\n                <Col span={10} style={{ padding: 4 }}>\n                  <span>\n                    Department Name\n              </span>\n                </Col>\n                <Col span={14}>\n                  <Form.Item\n                    name=\"departmentName\"\n                    rules={[\n                      {\n                        required: true,\n                        message: 'Please input Department Name',\n                      },\n                    ]}\n                  >\n                    <SimpleInput />\n                  </Form.Item>\n                </Col>\n              </Row>\n              <Row>\n                <Col span={10} style={{ padding: 4 }}>\n                  <p>Section / Team</p>\n                </Col>\n                <Col span={14}>\n                  <Form.Item\n                    name=\"sectionName\"\n                  >\n                    <Select\n                      mode=\"tags\"\n                      style={{ width: '100%' }}\n                      placeholder=\"Please select\"\n                      onChange={(value) => handleChange(value)}\n                    >\n                      {/* {children} */}\n                    </Select>\n                  </Form.Item>\n                </Col>\n              </Row>\n            </Form>\n          </TcrbModal>\n        )\n      }\n      const AddDepartment = () => {\n        return (\n          <div>\n            <Row>\n              <Col span={10} style={{ padding: 4 }}>\n                <p>\n                  Department Name\n            </p>\n              </Col>\n              <Col span={14}>\n                <SimpleInput onChange={(value) => departmentName = value} />\n              </Col>\n            </Row>\n          </div>\n        )\n      }\n\n      const handleChange = (value) => {\n        console.log(value)\n        sectionArray = value\n      }\n\n\n      const SelectDepartment = (props) => {\n        return (\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>Section / Team</p>\n            </Col>\n            <Col span={14}>\n              <Select\n                mode=\"tags\"\n                style={{ width: '100%' }}\n                placeholder=\"Please select\"\n                onChange={(value) => handleChange(value)}\n              >\n                {/* {children} */}\n              </Select>\n            </Col>\n          </Row>\n\n        )\n      }\n\n      const viewDepartmentDetail = (record) => {\n        userAccessManagementStore.departmentSelected = record\n        userAccessManagementStore.nextPageIsManageDepartment = true\n      }\n\n      const ListSection = () => {\n        return (\n          <div>\n            <Row>\n              <Col flex={100}>\n\n                <Table\n                  bordered\n                  dataSource={dataSourceSection}\n                  columns={columnSection}\n                  size=\"small\"\n                />\n              </Col>\n            </Row>\n          </div>\n        )\n      }\n\n      const selectSection = (section) => {\n        setModalType('')\n        settitle('Section and Team')\n        addKeyToDataSource(section).then(result => {\n          setmodalString(\n            <div>\n              <Table\n                bordered\n                dataSource={result}\n                columns={columnSection}\n                size=\"small\"\n              />\n            </div>\n          )\n        })\n        setvisible(true)\n      }\n\n      const openModalAddDepartment = () => {\n        /* departmentName = null\n        sectionArray = []\n        setModalType('confirm')\n        settitle('Add New Department')\n        setmodalString(\n          <div>\n            <AddDepartment />\n            <SelectDepartment />\n          </div>\n        )\n        setvisible(true)*/\n        setVisibleFormModal(true)\n      }\n\n      const confirmDepartmentSelected = () => {\n\n      }\n\n      const addNewDepartment = (values) => {\n        /* {\n          name: \"Department TMDS\",\n          sections: [\n            {\n              name: \"Section CCC\",\n            },\n            {\n              name: \"Section DDD\",\n            }\n          ]\n        } */\n        let sections = []\n        for (let index = 0; index < values.sectionName.length; index++) {\n          sections.push({\n            name: sectionArray[index]\n          })\n        }\n        let request = {\n          name: values.departmentName,\n          sections: sections\n        }\n        setVisibleFormModal(false)\n        console.log(request)\n      }\n\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"primary\" onClick={() => openModalAddDepartment()} >Add Department</TcrbButton>\n            </Col>\n          </Row>\n          <Table\n            bordered\n            dataSource={dataSourceDepartment}\n            columns={columnDepartment}\n            size=\"small\"\n          />\n          <SimpleModal\n            title={title}\n            type={modalType}\n            onOk={() => addNewDepartment()}\n            onCancel={() => setvisible(false)}\n            onEdit={() => onEditSection()}\n            textCancel={textCancel}\n            textOk={textOk}\n            textEdit={textEdit}\n            width={600}\n            modalString={modalString}\n            visible={visible}\n          />\n          <FormAddNewDepartment\n            visible={visibleFormModal}\n            onCreate={addNewDepartment}\n            onCancel={() => {\n              setVisibleFormModal(false);\n            }}\n          />\n        </div>\n      )\n    }))\n\nexport default DepartmentList\n"]},"metadata":{},"sourceType":"module"}