{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/manage-group.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleInput from '../../simple-input';\nimport SimpleModal from '../../simple-modal';\nimport { checkDefaultStatus } from '../../data-utility';\nconst {\n  Option\n} = Select;\nlet listUserSelect = [];\nconst ManageGroup = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore,\n    t\n  } = props;\n  const {\n    0: showEditGroup,\n    1: setShowEditGroup\n  } = useState(false);\n  const {\n    0: roleList,\n    1: setRoleList\n  } = useState([]);\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: userList,\n    1: setUserList\n  } = useState([]);\n  useEffect(() => {\n    setRoleList(mockGroupList);\n    setUserList(mockUserList);\n  }, []);\n  const mockGroupList = [{\n    id: 1,\n    key: 1,\n    group_name: \"group_1\",\n    role_name: \"role_1\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    group_name: \"group_2\",\n    role_name: \"role_2\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    group_name: \"group_3\",\n    role_name: \"role_3\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    group_name: \"group_4\",\n    role_name: \"role_4\",\n    user: 5,\n    status: '2'\n  }, {\n    id: 5,\n    key: 5,\n    group_name: \"group_5\",\n    role_name: \"role_5\",\n    user: 0,\n    status: '1'\n  }];\n  const columnUser = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(text)\n  }, {\n    title: 'Name',\n    dataIndex: 'user_name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Last Name',\n    dataIndex: 'role_name' // render: (text, record) => renderSection(record)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionGroupUser(record)\n  }];\n  const mockUserList = [{\n    id: 1,\n    key: 1,\n    user_name: \"name_1\",\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    user_name: \"name_2\",\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    user_name: \"name_3\",\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    user_name: \"name_4\",\n    status: '1'\n  }, {\n    id: 5,\n    key: 5,\n    user_name: \"name_5\",\n    status: '1'\n  }];\n\n  const AddUserToGroup = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      mode: \"multiple\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select user\",\n      onChange: value => {\n        listUserSelect = value;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, userList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 44\n      }\n    }, item.user_name))));\n  };\n\n  const goBackGroupList = () => {\n    userAccessManagementStore.nextPageIsManageGroup = false;\n  };\n\n  const cancelEditGroup = () => {\n    setShowEditGroup(false);\n  };\n\n  const submitEditGroup = () => {\n    //waiting for call api\n    setShowEditGroup(false);\n  };\n\n  const openModalAddUser = () => {\n    setModalTitle('Add user to Group');\n    setmodalString(__jsx(AddUserToGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 22\n      }\n    }));\n    setvisible(true);\n  };\n\n  const deleteUserSelected = record => {};\n\n  const addUser = () => {\n    //cal api\n    setvisible(false);\n  };\n\n  const renderActionGroupUser = record => {\n    if (record.status === '1') {\n      return __jsx(TcrbPopconfirm, {\n        title: \"Sure to Delete?\",\n        onConfirm: () => deleteUserSelected(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, __jsx(DeleteOutlined, {\n        style: {\n          fontSize: '18px',\n          paddingRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 16\n        }\n      })));\n    } else {\n      return null;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackGroupList(),\n    shape: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }, \"Group Name\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, \" \", showEditGroup ? __jsx(SimpleInput, {\n    defaultValue: userAccessManagementStore.groupSelected.group_name,\n    onChange: e => e,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }) : userAccessManagementStore.groupSelected.group_name)), showEditGroup ? __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 26\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, \"Role\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select\",\n    onChange: value => roleSelect = value,\n    defaultValue: 1 //waiting value from store\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 13\n    }\n  }, roleList.map((item, index) => __jsx(Option, {\n    key: index,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 46\n    }\n  }, item.role_name))))) : null, __jsx(Row, {\n    justify: \"center\",\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, showEditGroup ? __jsx(Space, {\n    size: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 15\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => {\n      cancelEditGroup();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      submitEditGroup();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 17\n    }\n  }, \"Submit\")) : __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      setShowEditGroup(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 15\n    }\n  }, \"Edit\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 9\n    }\n  }), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddUser(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 13\n    }\n  }, \"Add User\"))), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addUser(),\n    onCancel: () => setvisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default ManageGroup;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/manage-group.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","DeleteOutlined","EditOutlined","FormOutlined","TcrbButton","TcrbPopconfirm","inject","observer","SimpleInput","SimpleModal","checkDefaultStatus","Option","listUserSelect","ManageGroup","props","userAccessManagementStore","t","showEditGroup","setShowEditGroup","roleList","setRoleList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","userList","setUserList","mockGroupList","mockUserList","id","key","group_name","role_name","user","status","columnUser","title","dataIndex","width","render","text","record","renderActionGroupUser","user_name","AddUserToGroup","value","map","item","index","goBackGroupList","nextPageIsManageGroup","cancelEditGroup","submitEditGroup","openModalAddUser","deleteUserSelected","addUser","fontSize","paddingRight","groupSelected","e","roleSelect","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleInput from '../../simple-input'\nimport SimpleModal from '../../simple-modal'\n\nimport { checkDefaultStatus } from '../../data-utility'\n\nconst { Option } = Select;\nlet listUserSelect = []\nconst ManageGroup = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore, t } = props\n    const [showEditGroup, setShowEditGroup] = useState(false)\n    const [roleList, setRoleList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setvisible] = useState(false)\n    const [userList, setUserList] = useState([])\n\n    useEffect(() => {\n      setRoleList(mockGroupList)\n      setUserList(mockUserList)\n    }, [])\n\n    const mockGroupList = [\n      {\n        id: 1,\n        key: 1,\n        group_name: \"group_1\",\n        role_name: \"role_1\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        group_name: \"group_2\",\n        role_name: \"role_2\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        group_name: \"group_3\",\n        role_name: \"role_3\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        group_name: \"group_4\",\n        role_name: \"role_4\",\n        user: 5,\n        status: '2'\n      },\n      {\n        id: 5,\n        key: 5,\n        group_name: \"group_5\",\n        role_name: \"role_5\",\n        user: 0,\n        status: '1'\n      }\n    ]\n\n    const columnUser = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(text)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'user_name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Last Name',\n        dataIndex: 'role_name',\n        // render: (text, record) => renderSection(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroupUser(record)\n      }\n    ]\n\n    const mockUserList = [\n      {\n        id: 1,\n        key: 1,\n        user_name: \"name_1\",\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        user_name: \"name_2\",\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        user_name: \"name_3\",\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        user_name: \"name_4\",\n        status: '1'\n      },\n      {\n        id: 5,\n        key: 5,\n        user_name: \"name_5\",\n        status: '1'\n      }\n    ]\n\n    const AddUserToGroup = () => {\n      return (\n        <div>\n          <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select user\"\n            onChange={(value) => { listUserSelect = value }}\n          >\n            {userList.map((item, index) => <Option key={index} value={item.id}>{item.user_name}</Option>)}\n          </Select>\n        </div>\n      )\n    }\n\n    const goBackGroupList = () => {\n      userAccessManagementStore.nextPageIsManageGroup = false\n    }\n\n    const cancelEditGroup = () => {\n      setShowEditGroup(false)\n    }\n\n    const submitEditGroup = () => {\n      //waiting for call api\n      setShowEditGroup(false)\n    }\n\n    const openModalAddUser = () => {\n      setModalTitle('Add user to Group')\n      setmodalString(<AddUserToGroup />)\n      setvisible(true)\n    }\n\n    const deleteUserSelected = (record) => {\n\n    }\n\n    const addUser = () => {\n      //cal api\n      setvisible(false)\n    }\n\n    const renderActionGroupUser = (record) => {\n      if (record.status === '1') {\n        return (\n          <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={() => deleteUserSelected(record)}>\n            <a><DeleteOutlined style={{ fontSize: '18px', paddingRight: 8 }} /></a>\n          </TcrbPopconfirm>\n        )\n      } else {\n        return null\n      }\n    }\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"default\" onClick={() => goBackGroupList()} shape=\"round\">Back</TcrbButton>\n          </Col>\n        </Row>\n        <Row gutter={[4, 24]}>\n          <Col span={4}>Group Name</Col>\n          <Col span={6}> {showEditGroup ?\n            <SimpleInput defaultValue={userAccessManagementStore.groupSelected.group_name} onChange={(e) => e} /> : userAccessManagementStore.groupSelected.group_name\n          }\n          </Col>\n        </Row>\n        {showEditGroup ? <Row gutter={[4, 24]}>\n          <Col span={4}>Role</Col>\n          <Col span={6}>\n            <Select\n              style={{ width: '100%' }}\n              placeholder=\"Please select\"\n              onChange={(value) => roleSelect = value}\n              defaultValue={1} //waiting value from store\n            >\n              {roleList.map((item, index) => <Option key={index} value={item.id}>{item.role_name}</Option>)}\n            </Select>\n          </Col>\n        </Row> :\n          null\n        }\n\n        <Row justify=\"center\" style={{ marginTop: 8 }}>\n          <Col span={4}>\n            {showEditGroup ?\n              <Space size={8}>\n                <TcrbButton className=\"default\" onClick={() => { cancelEditGroup() }} >Cancel</TcrbButton>\n                <TcrbButton className=\"primary\" onClick={() => { submitEditGroup() }} >Submit</TcrbButton>\n              </Space>\n              :\n              <TcrbButton className=\"primary\" onClick={() => { setShowEditGroup(true) }} >Edit</TcrbButton>}\n          </Col>\n        </Row>\n        <Divider />\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddUser()} >Add User</TcrbButton>\n          </Col>\n        </Row>\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addUser()}\n          onCancel={() => setvisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n\n      </div>\n    )\n  }))\n\nexport default ManageGroup\n"]},"metadata":{},"sourceType":"module"}