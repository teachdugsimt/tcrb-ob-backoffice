{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/manage-menu.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { inject, observer } from 'mobx-react';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { addKeyToDataSource } from '../../../data-utility';\nconst ManageMenu = inject('userAccessManagementStore')(observer(props => {\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: setTextOk\n  } = useState(\"Submit\");\n  const {\n    0: textEdit,\n    1: setTextEdit\n  } = useState(\"Add Section\");\n  const {\n    0: textCancel,\n    1: setTextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: isDisableButtonAddFunction,\n    1: setIsDisableButtonAddFunction\n  } = useState(false);\n  const {\n    0: showEditMenu,\n    1: setShowEditMenu\n  } = useState(false);\n  const {\n    0: dataSourceFunction,\n    1: setDataSourceFunction\n  } = useState([]);\n  const [form] = Form.useForm();\n  const {\n    userAccessManagementStore,\n    t\n  } = props;\n\n  const isEditing = record => record.key === editingKey;\n\n  useEffect(() => {\n    addKeyToDataSource(userAccessManagementStore.menuSelected.functions).then(result => {\n      setDataSourceFunction(result);\n    });\n  }, []);\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }\n    })) : children);\n  };\n\n  const goBackToMenuList = () => {\n    userAccessManagementStore.nextPageIsManageMenu = false;\n  };\n\n  const addNewFunction = () => {\n    let newFunction = {\n      key: dataSourceSection.length + 1,\n      name: ''\n    };\n    setDataSourceSection([...dataSourceSection, newFunction]);\n    edit(newSection);\n    setIsDisableButtonAddSection(true);\n  };\n\n  const cancelEditMenu = () => {\n    setShowEditMenu(false);\n  };\n\n  const renderActionFunction = record => {\n    const editable = isEditing(record);\n\n    if (record.request_status === 'APPROVE') {\n      return editable ? __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: () => submitEditFunction(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 17\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: () => cancelEditFunction(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 17\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 17\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: () => deactivateFunctionSelect(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 19\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status === 'PENDING') {\n      return null;\n    } else if (record.request_status === 'REJECT') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const columnFunction = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Function Name',\n    dataIndex: 'name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionFunction(record)\n  }];\n  const mergedColumns = columnFunction.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackToMenuList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, \"Menu\"), __jsx(Col, {\n    span: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, \" \", showEditMenu ? __jsx(SimpleInput, {\n    defaultValue: userAccessManagementStore.menuSelected.name,\n    onChange: value => departmentName = value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 15\n    }\n  }) : userAccessManagementStore.menuSelected.name)), __jsx(Row, {\n    justify: \"center\",\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 13\n    }\n  }, showEditMenu ? __jsx(Space, {\n    size: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 17\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => {\n      cancelEditMenu();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 19\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      openModalSubmitEditDepartmentName();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 19\n    }\n  }, \"Submit\")) : __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      setShowEditMenu(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, \"Edit\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => addNewFunction(),\n    disabled: isDisableButtonAddFunction,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, \"Add Function\"))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    flex: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }\n  }, __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 15\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: dataSourceFunction,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 17\n    }\n  })))), __jsx(SimpleModal, {\n    title: title,\n    type: modalType,\n    onOk: () => submitEditDepartmentName(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default ManageMenu;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/manage-menu.js"],"names":["React","useEffect","useState","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","inject","observer","TcrbButton","TcrbPopconfirm","SimpleModal","SimpleInput","addKeyToDataSource","ManageMenu","props","editingKey","setEditingKey","title","setTitle","textOk","setTextOk","textEdit","setTextEdit","textCancel","setTextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","isDisableButtonAddFunction","setIsDisableButtonAddFunction","showEditMenu","setShowEditMenu","dataSourceFunction","setDataSourceFunction","form","useForm","userAccessManagementStore","t","isEditing","record","key","menuSelected","functions","then","result","edit","setFieldsValue","name","status","EditableCell","editing","dataIndex","inputType","index","children","restProps","margin","required","message","goBackToMenuList","nextPageIsManageMenu","addNewFunction","newFunction","dataSourceSection","length","setDataSourceSection","newSection","setIsDisableButtonAddSection","cancelEditMenu","renderActionFunction","editable","request_status","submitEditFunction","marginRight","cancelEditFunction","color","textAlign","deactivateFunctionSelect","columnFunction","width","render","text","checkDefaultStatus","mergedColumns","map","col","onCell","value","departmentName","marginTop","openModalSubmitEditDepartmentName","body","cell","submitEditDepartmentName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { inject, observer } from 'mobx-react'\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles'\n\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\nimport { addKeyToDataSource } from '../../../data-utility'\nconst ManageMenu =\n  inject('userAccessManagementStore')\n    (observer((props) => {\n      const [editingKey, setEditingKey] = useState('')\n      const [title, setTitle] = useState(\"\")\n      const [textOk, setTextOk] = useState(\"Submit\")\n      const [textEdit, setTextEdit] = useState(\"Add Section\")\n      const [textCancel, setTextCancel] = useState(\"Cancel\")\n      const [modalString, setModalString] = useState(\"\")\n      const [modalType, setModalType] = useState('')\n      const [visible, setVisible] = useState(false)\n      const [isDisableButtonAddFunction, setIsDisableButtonAddFunction] = useState(false)\n      const [showEditMenu, setShowEditMenu] = useState(false)\n      const [dataSourceFunction, setDataSourceFunction] = useState([])\n\n      const [form] = Form.useForm();\n\n      const { userAccessManagementStore, t } = props\n      const isEditing = record => record.key === editingKey\n\n      useEffect(() => {\n        addKeyToDataSource(userAccessManagementStore.menuSelected.functions).then(result => {\n          setDataSourceFunction(result)\n        })\n      }, [])\n\n      const edit = record => {\n        form.setFieldsValue({\n          name: '',\n          status: record.status,\n          ...record,\n        });\n        setEditingKey(record.key);\n      }\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        return (\n          <td {...restProps}>\n            {editing ? (\n              <Form.Item\n                name={dataIndex}\n                style={{\n                  margin: 0\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        )\n      }\n      const goBackToMenuList = () => {\n        userAccessManagementStore.nextPageIsManageMenu = false\n\n      }\n\n      const addNewFunction = () => {\n        let newFunction = {\n          key: dataSourceSection.length + 1,\n          name: ''\n        }\n        setDataSourceSection([...dataSourceSection, newFunction])\n        edit(newSection)\n        setIsDisableButtonAddSection(true)\n      }\n\n      const cancelEditMenu = () => {\n        setShowEditMenu(false)\n      }\n\n      const renderActionFunction = (record) => {\n        const editable = isEditing(record);\n        if (record.request_status === 'APPROVE') {\n          return editable ? (\n            <span>\n              <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => submitEditFunction(record.key)}>\n                <a style={{ marginRight: 8, }}>\n                  Save\n                  </a>\n              </TcrbPopconfirm>\n              <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={() => cancelEditFunction()}>\n                <a style={{ color: '#3e3e3e' }}>Cancel</a>\n              </TcrbPopconfirm>\n            </span>\n          ) : (\n              <div style={{ textAlign: \"center\" }}>\n                <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                  Edit\n                  </a>\n                <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateFunctionSelect(record)}>\n                  <a style={{ color: '#FBA928' }}>Deactivate</a>\n                </TcrbPopconfirm>\n              </div>\n            );\n        } else if (record.request_status === 'PENDING') {\n          return null\n        } else if (record.request_status === 'REJECT') {\n          return null\n        }\n        else {\n          return null\n        }\n      }\n\n      const columnFunction = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n        },\n        {\n          title: 'Function Name',\n          dataIndex: 'name',\n          editable: true,\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '10%',\n          render: (text, record) => renderActionFunction(record)\n        }\n      ]\n\n      const mergedColumns = columnFunction.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: 'text',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToMenuList()}>Back</TcrbButton>\n            </Col>\n          </Row>\n          <Row gutter={[4, 24]}>\n            <Col span={5}>Menu</Col>\n            <Col span={7}> {showEditMenu ?\n              <SimpleInput defaultValue={userAccessManagementStore.menuSelected.name} onChange={(value) => departmentName = value} /> : userAccessManagementStore.menuSelected.name\n            }\n            </Col>\n          </Row>\n\n          <Row justify=\"center\" style={{ marginTop: 8 }}>\n            <Col span={4}>\n              {showEditMenu ?\n                <Space size={8}>\n                  <TcrbButton className=\"default\" onClick={() => { cancelEditMenu() }} >Cancel</TcrbButton>\n                  <TcrbButton className=\"primary\" onClick={() => { openModalSubmitEditDepartmentName() }} >Submit</TcrbButton>\n                </Space>\n                :\n                <TcrbButton className=\"primary\" onClick={() => { setShowEditMenu(true) }} >Edit</TcrbButton>}\n            </Col>\n          </Row>\n          <Divider />\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"primary\" onClick={() => addNewFunction()} disabled={isDisableButtonAddFunction}>Add Function</TcrbButton>\n            </Col>\n          </Row>\n          <Row>\n            <Col flex={100}>\n              <Form form={form} component={false}>\n                <Table\n                  components={{\n                    body: {\n                      cell: EditableCell,\n                    },\n                  }}\n                  bordered\n                  dataSource={dataSourceFunction}\n                  columns={mergedColumns}\n                  size=\"small\"\n                />\n              </Form>\n            </Col>\n          </Row>\n          <SimpleModal\n            title={title}\n            type={modalType}\n            onOk={() => submitEditDepartmentName()}\n            onCancel={() => setVisible(false)}\n            textCancel={textCancel}\n            textOk={textOk}\n            width={600}\n            modalString={modalString}\n            visible={visible}\n          />\n\n        </div>\n      )\n    }))\n\nexport default ManageMenu\n"]},"metadata":{},"sourceType":"module"}