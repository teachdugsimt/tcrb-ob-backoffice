{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _descriptor19, _descriptor20, _descriptor21, _descriptor22, _descriptor23, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action, toJS } from 'mobx';\nimport { UserAccessManagementApi } from '../services';\nlet UserAccessManagement = (_class = (_temp = class UserAccessManagement {\n  constructor() {\n    _initializerDefineProperty(this, \"apiFetching\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"responseApiError\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageDepartment\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageGroup\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageUser\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageMenu\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageFunction\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"nextPageIsManageRole\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"departmentList\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"departmentSelected\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"groupSelected\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"userSelected\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"responseDeleteSection\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"getDataDepartment\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"getDataDepartmentDetail\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"getDataGroup\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"getDataGroupDetail\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"submitAddNewDepartment\", _descriptor18, this);\n\n    _initializerDefineProperty(this, \"submitAddNewSection\", _descriptor19, this);\n\n    _initializerDefineProperty(this, \"updateDepartment\", _descriptor20, this);\n\n    _initializerDefineProperty(this, \"updateSection\", _descriptor21, this);\n\n    _initializerDefineProperty(this, \"submitDeleteDepartment\", _descriptor22, this);\n\n    _initializerDefineProperty(this, \"submitDeleteSection\", _descriptor23, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"apiFetching\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"responseApiError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageDepartment\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageGroup\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageUser\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageMenu\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageFunction\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"nextPageIsManageRole\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"departmentList\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"departmentSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"groupSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"userSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"responseDeleteSection\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"getDataDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      {\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }];\n          }\n        }\n      } //some action\n\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getDepartment({\n        filter: {\n          where: {\n            $or: [{\n              status: \"ACTIVE\"\n            }, {\n              $and: [{\n                status: \"INACTIVE\"\n              }, {\n                request_status: \"PENDING\"\n              }]\n            }]\n          }\n        }\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.departmentList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"getDataDepartmentDetail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getDepartmentDetail(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroup\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroup(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"getDataGroupDetail\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      //some action\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.getGroupDetail(params);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewDepartment({\n        change_type: \"DEPARTMENTS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.departmentList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor19 = _applyDecoratedDescriptor(_class.prototype, \"submitAddNewSection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.addNewDepartment({\n        change_type: \"SECTIONS\",\n        action: \"Add\",\n        currentData: {},\n        newData: params,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.departmentList = tmp.data.responseData;\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor20 = _applyDecoratedDescriptor(_class.prototype, \"updateDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateDepartment({\n        change_type: \"DEPARTMENTS\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor21 = _applyDecoratedDescriptor(_class.prototype, \"updateSection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.updateSection({\n        change_type: \"SECTIONS\",\n        action: \"Update\",\n        currentData: params.currentData,\n        newData: params.newData,\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor22 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteDepartment\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteDepartment({\n        change_type: \"DEPARTMENTS\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n        this.getDataDepartment();\n        this.departmentList = [];\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n}), _descriptor23 = _applyDecoratedDescriptor(_class.prototype, \"submitDeleteSection\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.apiFetching = true;\n      let tmp = await UserAccessManagementApi.deleteDepartment({\n        change_type: \"SECTIONS\",\n        action: \"Delete\",\n        currentData: params,\n        newData: {},\n        maker_id: '36'\n      });\n      console.log(tmp);\n\n      if (tmp.ok & tmp.status === 200) {\n        //when success\n        this.apiFetching = false;\n        this.responseDeleteSection = true;\n      } else {\n        //when error\n        this.apiFetching = false;\n        this.responseApiError = true;\n      }\n    };\n  }\n})), _class);\nexport { UserAccessManagement as default };","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/user-access-management-store.js"],"names":["observable","action","toJS","UserAccessManagementApi","UserAccessManagement","filter","where","$or","status","$and","request_status","apiFetching","tmp","getDepartment","console","log","ok","departmentList","data","responseData","responseApiError","getDepartmentDetail","params","getGroup","getGroupDetail","addNewDepartment","change_type","currentData","newData","maker_id","updateDepartment","updateSection","deleteDepartment","getDataDepartment","responseDeleteSection"],"mappings":"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","sourcesContent":["import { observable, action, toJS } from 'mobx'\nimport { UserAccessManagementApi } from '../services'\n\nexport default class UserAccessManagement {\n  @observable apiFetching = false\n  @observable responseApiError = false\n\n  @observable nextPageIsManageDepartment = null\n  @observable nextPageIsManageGroup = null\n  @observable nextPageIsManageUser = null\n  @observable nextPageIsManageMenu = null\n  @observable nextPageIsManageFunction = null\n  @observable nextPageIsManageRole = null\n\n  @observable departmentList = []\n\n\n  @observable departmentSelected = null\n  @observable groupSelected = null\n  @observable userSelected = null\n\n  @observable responseDeleteSection = null\n\n  @action getDataDepartment = async () => {\n\n    {\n      filter: {\n        where: {\n          $or: [\n            {\n              status: \"ACTIVE\"\n            },\n            {\n              $and: [\n                {\n                  status: \"INACTIVE\"\n                },\n                {\n                  request_status: \"PENDING\"\n                }\n              ]\n            }\n          ]\n        }\n      }\n    }\n\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getDepartment({\n      filter: {\n        where: {\n          $or: [\n            { status: \"ACTIVE\" },\n            {\n              $and: [{ status: \"INACTIVE\" },\n              { request_status: \"PENDING\" }]\n            }\n          ]\n        }\n      }\n    })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.departmentList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataDepartmentDetail = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getDepartmentDetail(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroup = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroup(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action getDataGroupDetail = async () => {\n    //some action\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.getGroupDetail(params)\n\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewDepartment = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewDepartment({ change_type: \"DEPARTMENTS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.departmentList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitAddNewSection = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.addNewDepartment({ change_type: \"SECTIONS\", action: \"Add\", currentData: {}, newData: params, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.departmentList = tmp.data.responseData\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateDepartment = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateDepartment({ change_type: \"DEPARTMENTS\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action updateSection = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.updateSection({ change_type: \"SECTIONS\", action: \"Update\", currentData: params.currentData, newData: params.newData, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteDepartment = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteDepartment({ change_type: \"DEPARTMENTS\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n      this.getDataDepartment()\n      this.departmentList = []\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n\n  @action submitDeleteSection = async (params) => {\n    this.apiFetching = true\n    let tmp = await UserAccessManagementApi.deleteDepartment({ change_type: \"SECTIONS\", action: \"Delete\", currentData: params, newData: {}, maker_id: '36' })\n    console.log(tmp)\n    if (tmp.ok & tmp.status === 200) {\n      //when success\n      this.apiFetching = false\n      this.responseDeleteSection = true\n    } else {\n      //when error\n      this.apiFetching = false\n      this.responseApiError = true\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}