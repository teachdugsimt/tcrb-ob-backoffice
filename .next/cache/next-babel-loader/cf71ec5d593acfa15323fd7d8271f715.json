{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/function/function-list.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility';\nlet functionName = null;\nconst FunctionList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore\n  } = props;\n  const {\n    0: functionList,\n    1: setFunctionList\n  } = useState([]);\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const [form] = Form.useForm();\n  useEffect(() => {\n    // setMockFunctionList(testFunctionList())\n    userAccessManagementStore.getDataFunction();\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.functionList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.functionList).then(result => {\n        setFunctionList(result);\n      });\n    }\n  }, [userAccessManagementStore.functionList]);\n\n  const isEditing = record => record.key === editingKey;\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 15\n      }\n    })) : children);\n  };\n\n  const FormAddNewMenu = () => {\n    return __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }, \"Function Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => functionName = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  const openModalAddFunction = () => {\n    setModalTitle('Add new function');\n    setModalString(__jsx(FormAddNewMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  const addNewFunction = () => {\n    //waiting call api\n    let request = {\n      name: functionName\n    };\n    userAccessManagementStore.submitAddNewFunction(request);\n    setVisible(false);\n  };\n\n  const deactivateFunctionSelect = record => {//waiting call api\n  };\n\n  const renderActionGroup = record => {\n    const editable = isEditing(record);\n\n    if (record.request_status === 'APPROVE') {\n      return editable ? __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: () => submitEditFunction(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 15\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: () => cancelEditFunction(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 15\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: () => deactivateFunctionSelect(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 17\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status === 'PENDING') {\n      return null;\n    } else if (record.request_status === 'REJECT') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const columnFunction = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Name',\n    dataIndex: 'name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionGroup(record)\n  }];\n  const mergedColumns = columnFunction.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddFunction(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, \"Add Function\"))), __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: functionList,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 11\n    }\n  })), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addNewFunction(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default FunctionList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/function/function-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","SimpleModal","SimpleInput","checkDefaultStatus","addKeyToDataSource","functionName","FunctionList","props","userAccessManagementStore","functionList","setFunctionList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","editingKey","setEditingKey","form","useForm","getDataFunction","length","then","result","isEditing","record","key","edit","setFieldsValue","name","status","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","margin","required","message","FormAddNewMenu","value","openModalAddFunction","addNewFunction","request","submitAddNewFunction","deactivateFunctionSelect","renderActionGroup","editable","request_status","submitEditFunction","marginRight","cancelEditFunction","color","textAlign","columnFunction","width","render","text","mergedColumns","map","col","onCell","body","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility'\nlet functionName = null\nconst FunctionList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [functionList, setFunctionList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setModalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n    const [editingKey, setEditingKey] = useState('')\n\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n      // setMockFunctionList(testFunctionList())\n      userAccessManagementStore.getDataFunction()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.functionList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.functionList).then(result => {\n          setFunctionList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.functionList])\n\n    const isEditing = record => record.key === editingKey\n    const edit = record => {\n      form.setFieldsValue({\n        name: '',\n        status: record.status,\n        ...record,\n      });\n      setEditingKey(record.key);\n    }\n\n    const EditableCell = ({\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    }) => {\n      return (\n        <td {...restProps}>\n          {editing ? (\n            <Form.Item\n              name={dataIndex}\n              style={{\n                margin: 0\n              }}\n              rules={[\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          ) : (\n              children\n            )\n          }\n        </td>\n      )\n    }\n\n    const FormAddNewMenu = () => {\n      return (\n        <Row>\n          <Col span={10} >\n            <span>\n              Function Name\n            </span>\n          </Col>\n          <Col span={14}>\n            <SimpleInput onChange={(value) => functionName = value} />\n          </Col>\n        </Row>\n      )\n    }\n\n    const openModalAddFunction = () => {\n      setModalTitle('Add new function')\n      setModalString(<FormAddNewMenu />)\n      setVisible(true)\n    }\n\n    const addNewFunction = () => {\n      //waiting call api\n      let request = {\n        name: functionName\n      }\n      userAccessManagementStore.submitAddNewFunction(request)\n      setVisible(false)\n    }\n\n    const deactivateFunctionSelect = (record) => {\n      //waiting call api\n    }\n    const renderActionGroup = (record) => {\n      const editable = isEditing(record);\n      if (record.request_status === 'APPROVE') {\n        return editable ? (\n          <span>\n            <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => submitEditFunction(record.key)}>\n              <a style={{ marginRight: 8, }}>\n                Save\n                </a>\n            </TcrbPopconfirm>\n            <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={() => cancelEditFunction()}>\n              <a style={{ color: '#3e3e3e' }}>Cancel</a>\n            </TcrbPopconfirm>\n          </span>\n        ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                Edit\n                </a>\n              <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateFunctionSelect(record)}>\n                <a style={{ color: '#FBA928' }}>Deactivate</a>\n              </TcrbPopconfirm>\n            </div>\n          );\n      } else if (record.request_status === 'PENDING') {\n        return null\n      } else if (record.request_status === 'REJECT') {\n        return null\n      }\n      else {\n        return null\n      }\n    }\n    const columnFunction = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        editable: true\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroup(record)\n      }\n    ]\n    const mergedColumns = columnFunction.map(col => {\n      if (!col.editable) {\n        return col;\n      }\n\n      return {\n        ...col,\n        onCell: record => ({\n          record,\n          inputType: 'text',\n          dataIndex: col.dataIndex,\n          title: col.title,\n          editing: isEditing(record),\n        }),\n      };\n    });\n\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddFunction()} >Add Function</TcrbButton>\n          </Col>\n        </Row>\n        <Form form={form} component={false}>\n          <Table\n            components={{\n              body: {\n                cell: EditableCell,\n              },\n            }}\n            bordered\n            dataSource={functionList}\n            columns={mergedColumns}\n            size=\"small\"\n          />\n        </Form>\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewFunction()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default FunctionList\n"]},"metadata":{},"sourceType":"module"}