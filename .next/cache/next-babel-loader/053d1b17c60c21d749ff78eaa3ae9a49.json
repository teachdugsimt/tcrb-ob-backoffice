{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/group-list.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport SimpleModal from '../../simple-modal';\nimport SimpleInput from '../../simple-input';\nimport { checkDefaultStatus, renderAction } from '../../data-utility';\nimport UserAccessManagement from '../../../stores/user-access-management-store';\nconst {\n  Option\n} = Select;\nlet groupName = null;\nlet roleSelect = null;\nconst GroupList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore\n  } = props;\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: roleList,\n    1: setRoleList\n  } = useState([]);\n  useEffect(() => {\n    setRoleList(mockRoleList);\n  }, []);\n  const mockRoleList = [{\n    id: 1,\n    key: 1,\n    role_name: \"role_1\"\n  }, {\n    id: 2,\n    key: 2,\n    role_name: \"role_2\"\n  }, {\n    id: 3,\n    key: 3,\n    role_name: \"role_3\"\n  }, {\n    id: 4,\n    key: 4,\n    role_name: \"role_4\"\n  }, {\n    id: 5,\n    key: 5,\n    role_name: \"role_5\"\n  }];\n  const mockGroupList = [{\n    id: 1,\n    key: 1,\n    group_name: \"group_1\",\n    role_name: \"role_1\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    group_name: \"group_2\",\n    role_name: \"role_2\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    group_name: \"group_3\",\n    role_name: \"role_3\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    group_name: \"group_4\",\n    role_name: \"role_4\",\n    user: 5,\n    status: '2'\n  }, {\n    id: 5,\n    key: 5,\n    group_name: \"group_5\",\n    role_name: \"role_5\",\n    user: 0,\n    status: '1'\n  }];\n  const mockUserList = [{\n    id: 1,\n    key: 1,\n    user_name: \"name_1\",\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    user_name: \"name_2\",\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    user_name: \"name_3\",\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    user_name: \"name_4\",\n    status: '1'\n  }, {\n    id: 5,\n    key: 5,\n    user_name: \"name_5\",\n    status: '1'\n  }];\n\n  const viewUsers = () => {\n    setmodalString(__jsx(UserList, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 22\n      }\n    }));\n    setModalType('');\n    setModalTitle('User List');\n    setvisible(true);\n  };\n\n  const viewManageGroup = record => {\n    userAccessManagementStore.groupSelected = record;\n    userAccessManagementStore.nextPageIsManageGroup = true;\n  };\n\n  const renderUsers = record => {\n    if (record.user <= 0) {\n      return __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 16\n        }\n      }, \"0 user\");\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 16\n        }\n      }, __jsx(\"a\", {\n        onClick: () => viewUsers(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }\n      }, record.user, \" Users\"));\n    }\n  };\n\n  const renderActionGroup = record => {\n    if (record.status === '1') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Edit?\",\n        onConfirm: () => viewManageGroup(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 15\n        }\n      }, \"Edit\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 15\n        }\n      }, \"Deactivate\")));\n    } else if (record.status === '2') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const columnGroup = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(text)\n  }, {\n    title: 'Name',\n    dataIndex: 'group_name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Role',\n    dataIndex: 'role_name' // render: (text, record) => renderSection(record)\n\n  }, {\n    title: 'Users',\n    dataIndex: 'user',\n    render: (text, record) => renderUsers(record)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    // render: (text, record) => renderActionGroup(record)\n    render: (text, record) => renderAction(record, viewManageGroup())\n  }];\n  const columnUser = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(text)\n  }, {\n    title: 'Name',\n    dataIndex: 'user_name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Last Name',\n    dataIndex: 'role_name' // render: (text, record) => renderSection(record)\n\n  }];\n\n  const addNewGroup = () => {\n    //call api\n    setvisible(false);\n    console.log(groupName, roleSelect);\n  };\n\n  const FormAddNewGroup = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 15\n      }\n    }, \"Group Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 13\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => groupName = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 15\n      }\n    }))), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }, \"Role\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: value => roleSelect = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }\n    }, roleList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 48\n      }\n    }, item.role_name))))));\n  };\n\n  const UserList = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      flex: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      dataSource: mockUserList,\n      columns: columnUser,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 15\n      }\n    }))));\n  };\n\n  const openModalAddGroup = () => {\n    setModalTitle('Add New Group');\n    setModalType('confirm');\n    setmodalString(__jsx(FormAddNewGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 22\n      }\n    }));\n    setvisible(true);\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddGroup(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 13\n    }\n  }, \"Add Group\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: mockGroupList,\n    columns: columnGroup,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addNewGroup(),\n    onCancel: () => setvisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default GroupList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/group-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","orange","green","gold","SimpleModal","SimpleInput","checkDefaultStatus","renderAction","UserAccessManagement","Option","groupName","roleSelect","GroupList","props","userAccessManagementStore","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","roleList","setRoleList","mockRoleList","id","key","role_name","mockGroupList","group_name","user","status","mockUserList","user_name","viewUsers","viewManageGroup","record","groupSelected","nextPageIsManageGroup","renderUsers","renderActionGroup","textAlign","marginRight","color","columnGroup","title","dataIndex","width","render","text","columnUser","addNewGroup","console","log","FormAddNewGroup","padding","value","map","item","index","UserList","openModalAddGroup"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\n\nimport SimpleModal from '../../simple-modal'\nimport SimpleInput from '../../simple-input'\n\nimport { checkDefaultStatus, renderAction } from '../../data-utility'\nimport UserAccessManagement from '../../../stores/user-access-management-store';\n\nconst { Option } = Select;\nlet groupName = null\nlet roleSelect = null\nconst GroupList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setvisible] = useState(false)\n    const [roleList, setRoleList] = useState([])\n    useEffect(() => {\n      setRoleList(mockRoleList)\n    }, [])\n    const mockRoleList = [\n      {\n        id: 1,\n        key: 1,\n        role_name: \"role_1\"\n      },\n      {\n        id: 2,\n        key: 2,\n        role_name: \"role_2\",\n      },\n      {\n        id: 3,\n        key: 3,\n        role_name: \"role_3\",\n      },\n      {\n        id: 4,\n        key: 4,\n        role_name: \"role_4\",\n      },\n      {\n        id: 5,\n        key: 5,\n        role_name: \"role_5\",\n      }\n    ]\n\n    const mockGroupList = [\n      {\n        id: 1,\n        key: 1,\n        group_name: \"group_1\",\n        role_name: \"role_1\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        group_name: \"group_2\",\n        role_name: \"role_2\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        group_name: \"group_3\",\n        role_name: \"role_3\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        group_name: \"group_4\",\n        role_name: \"role_4\",\n        user: 5,\n        status: '2'\n      },\n      {\n        id: 5,\n        key: 5,\n        group_name: \"group_5\",\n        role_name: \"role_5\",\n        user: 0,\n        status: '1'\n      }\n    ]\n\n    const mockUserList = [\n      {\n        id: 1,\n        key: 1,\n        user_name: \"name_1\",\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        user_name: \"name_2\",\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        user_name: \"name_3\",\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        user_name: \"name_4\",\n        status: '1'\n      },\n      {\n        id: 5,\n        key: 5,\n        user_name: \"name_5\",\n        status: '1'\n      }\n    ]\n\n    const viewUsers = () => {\n      setmodalString(<UserList />)\n      setModalType('')\n      setModalTitle('User List')\n      setvisible(true)\n    }\n\n    const viewManageGroup = (record) => {\n      userAccessManagementStore.groupSelected = record\n      userAccessManagementStore.nextPageIsManageGroup = true\n    }\n\n    const renderUsers = (record) => {\n      if (record.user <= 0) {\n        return <span>0 user</span>\n      } else {\n        return <div>\n          <a onClick={() => viewUsers(record)}>{record.user} Users</a>\n        </div>\n      }\n    }\n\n    const renderActionGroup = (record) => {\n      if (record.status === '1') {\n        return (\n          <div style={{ textAlign: \"center\" }}>\n            <TcrbPopconfirm title=\"Sure to Edit?\" onConfirm={() => viewManageGroup(record)}>\n              <a style={{ marginRight: 8 }}>Edit</a>\n\n            </TcrbPopconfirm>\n            <TcrbPopconfirm title=\"Sure to Deactivate?\" >\n              <a style={{ color: '#FBA928' }}>Deactivate</a>\n            </TcrbPopconfirm>\n          </div>\n        )\n\n      } else if (record.status === '2') {\n        return null\n      } else {\n        return null\n      }\n    }\n\n    const columnGroup = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(text)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'group_name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Role',\n        dataIndex: 'role_name',\n        // render: (text, record) => renderSection(record)\n      },\n      {\n        title: 'Users',\n        dataIndex: 'user',\n        render: (text, record) => renderUsers(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        // render: (text, record) => renderActionGroup(record)\n        render: (text, record) => renderAction(record, viewManageGroup())\n      }\n    ]\n\n    const columnUser = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(text)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'user_name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Last Name',\n        dataIndex: 'role_name',\n        // render: (text, record) => renderSection(record)\n      }\n    ]\n\n    const addNewGroup = () => {\n      //call api\n      setvisible(false)\n      console.log(groupName, roleSelect)\n    }\n\n    const FormAddNewGroup = () => {\n      return (\n        <div>\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>\n                Group Name\n            </p>\n            </Col>\n            <Col span={14}>\n              <SimpleInput onChange={(value) => groupName = value} />\n            </Col>\n          </Row>\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>Role</p>\n            </Col>\n            <Col span={14}>\n              <Select\n                style={{ width: '100%' }}\n                placeholder=\"Please select\"\n                onChange={(value) => roleSelect = value}\n              >\n                {roleList.map((item, index) => <Option key={index} value={item.id}>{item.role_name}</Option>)}\n              </Select>\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    const UserList = () => {\n      return (\n        <div>\n          <Row>\n            <Col flex={100}>\n              <Table\n                dataSource={mockUserList}\n                columns={columnUser}\n                size=\"small\"\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    const openModalAddGroup = () => {\n      setModalTitle('Add New Group')\n      setModalType('confirm')\n      setmodalString(<FormAddNewGroup />)\n      setvisible(true)\n    }\n\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddGroup()} >Add Group</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={mockGroupList}\n          columns={columnGroup}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewGroup()}\n          onCancel={() => setvisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default GroupList\n"]},"metadata":{},"sourceType":"module"}