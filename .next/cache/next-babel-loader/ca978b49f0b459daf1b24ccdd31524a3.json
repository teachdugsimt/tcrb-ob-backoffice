{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _initializerDefineProperty from \"@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _applyDecoratedDescriptor from \"@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _temp;\n\n// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx';\nimport { BusinessParameterSetupApi } from '../services';\nvar BusinessParameterSetup = (_class = (_temp = /*#__PURE__*/function () {\n  function BusinessParameterSetup() {\n    _classCallCheck(this, BusinessParameterSetup);\n\n    _initializerDefineProperty(this, \"editOtpMaximumRetry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"editOtpExpirationPeriod\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"responseGetOtpValue\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"fetchingGetOtp\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"errorGetOtp\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"responseUpdateOtp\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"fetchingUpdateOtp\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"errorUpdateOtp\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"pendingApprovals\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"closeExpire\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"closeMaximum\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"getOTPdata\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"updateOTPdata\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"setCitizenId\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"setAccountId\", _descriptor15, this);\n  }\n\n  _createClass(BusinessParameterSetup, [{\n    key: \"selectProductToDelete\",\n    value: function selectProductToDelete(productSelected) {\n      productSelected.ticket = '00000' + this.pendingApprovals.length + 1;\n      productSelected.requestType = productSelected.ProductDescription;\n      this.pendingApprovals.push(productSelected);\n    } // @computed\n    // get doubleCount() {\n    //   return this.count * 2\n    // }\n\n  }]);\n\n  return BusinessParameterSetup;\n}(), _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"editOtpMaximumRetry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"editOtpExpirationPeriod\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"responseGetOtpValue\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"fetchingGetOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"errorGetOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"responseUpdateOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"fetchingUpdateOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"errorUpdateOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"pendingApprovals\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    return [];\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"closeExpire\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this = this;\n\n    return function (val) {\n      _this.editOtpExpirationPeriod = val;\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"closeMaximum\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this2 = this;\n\n    return function (val) {\n      _this2.editOtpMaximumRetry = val;\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"getOTPdata\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this3 = this;\n\n    return /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(params) {\n        var tmp, raw_Data;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _this3.fetchingGetOtp = true;\n                _context.next = 3;\n                return BusinessParameterSetupApi.getOtpValue(params);\n\n              case 3:\n                tmp = _context.sent;\n\n                if (tmp.ok == true && tmp.status == 200) {\n                  raw_Data = toJS(tmp.data.responseData.paramStoreData);\n                  console.log(\"On Success : \", raw_Data);\n                  _this3.fetchingGetOtp = false;\n                  _this3.errorGetOtp = null;\n                  _this3.responseGetOtpValue = raw_Data;\n                } else {\n                  console.log(\"= Call get otp failure = \", tmp);\n                  _this3.fetchingGetOtp = false;\n                  _this3.responseGetOtpValue = null;\n                  _this3.errorGetOtp = tmp.problem;\n                }\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"updateOTPdata\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this4 = this;\n\n    return /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(params) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _this4.fetchingUpdateOtp = true;\n                _context2.next = 3;\n                return BusinessParameterSetupApi.setOtpValue(params);\n\n              case 3:\n                response = _context2.sent;\n\n                if (response.ok && response.status == 200) {\n                  console.log(\"Update OTP Success :: \", resopnse);\n                  _this4.responseUpdateOtp = response.data;\n                  _this4.fetchingUpdateOtp = false;\n                  _this4.errorUpdateOtp = null;\n                } else {\n                  console.log(\"Update OTP FAIL :: \", response);\n                  _this4.fetchingUpdateOtp = false;\n                  _this4.responseUpdateOtp = null;\n                  _this4.errorUpdateOtp = resopnse.problem;\n                }\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"setCitizenId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this5 = this;\n\n    return function (id) {\n      _this5.citizenId = {\n        idCard: id\n      };\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"setAccountId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function initializer() {\n    var _this6 = this;\n\n    return function (id) {\n      _this6.accountId = id;\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"selectProductToDelete\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"selectProductToDelete\"), _class.prototype)), _class);\nexport default BusinessParameterSetup;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/business-parameter-setup.js"],"names":["observable","action","computed","toJS","BusinessParameterSetupApi","BusinessParameterSetup","productSelected","ticket","pendingApprovals","length","requestType","ProductDescription","push","val","editOtpExpirationPeriod","editOtpMaximumRetry","params","fetchingGetOtp","getOtpValue","tmp","ok","status","raw_Data","data","responseData","paramStoreData","console","log","errorGetOtp","responseGetOtpValue","problem","fetchingUpdateOtp","setOtpValue","response","resopnse","responseUpdateOtp","errorUpdateOtp","id","citizenId","idCard","accountId"],"mappings":"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","sourcesContent":["// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx'\nimport { BusinessParameterSetupApi } from '../services'\n\nclass BusinessParameterSetup {\n  @observable\n  editOtpMaximumRetry = null\n  @observable\n  editOtpExpirationPeriod = null\n\n  @observable\n  responseGetOtpValue = null\n  @observable\n  fetchingGetOtp = null\n  @observable\n  errorGetOtp = null\n\n  @observable\n  responseUpdateOtp = null\n  @observable\n  fetchingUpdateOtp = null\n  @observable\n  errorUpdateOtp = null\n\n  @observable pendingApprovals = []\n\n  @action\n  closeExpire = (val) => {\n    this.editOtpExpirationPeriod = val\n  }\n\n  @action\n  closeMaximum = (val) => {\n    this.editOtpMaximumRetry = val\n  }\n\n  @action getOTPdata = async (params) => {\n    this.fetchingGetOtp = true\n    let tmp = await BusinessParameterSetupApi.getOtpValue(params)\n    if (tmp.ok == true && tmp.status == 200) {\n      let raw_Data = toJS(tmp.data.responseData.paramStoreData)\n      console.log(\"On Success : \", raw_Data)\n      this.fetchingGetOtp = false\n      this.errorGetOtp = null\n      this.responseGetOtpValue = raw_Data\n    } else {\n      console.log(\"= Call get otp failure = \", tmp)\n      this.fetchingGetOtp = false\n      this.responseGetOtpValue = null\n      this.errorGetOtp = tmp.problem\n    }\n  }\n\n  @action\n  updateOTPdata = async (params) => {\n    this.fetchingUpdateOtp = true\n    let response = await BusinessParameterSetupApi.setOtpValue(params)\n    if (response.ok && response.status == 200) {\n      console.log(\"Update OTP Success :: \", resopnse)\n      this.responseUpdateOtp = response.data\n      this.fetchingUpdateOtp = false\n      this.errorUpdateOtp = null\n    } else {\n      console.log(\"Update OTP FAIL :: \", response)\n      this.fetchingUpdateOtp = false\n      this.responseUpdateOtp = null\n      this.errorUpdateOtp = resopnse.problem\n    }\n  }\n\n  @action setCitizenId = (id) => {\n    this.citizenId = { idCard: id }\n  }\n  @action setAccountId = (id) => {\n    this.accountId = id\n  }\n\n  @action\n  selectProductToDelete(productSelected) {\n    productSelected.ticket = '00000' + this.pendingApprovals.length + 1\n    productSelected.requestType = productSelected.ProductDescription\n    this.pendingApprovals.push(productSelected)\n  }\n  // @computed\n  // get doubleCount() {\n  //   return this.count * 2\n  // }\n}\nexport default BusinessParameterSetup\n"]},"metadata":{},"sourceType":"module"}