{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/product-limit-setup/manage-partner.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { inject, observer } from 'mobx-react';\nimport { withTranslation } from '../../../i18n';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Popconfirm, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { addKeyToDataSource, addCommaInData } from '../../data-utility';\nimport SimpleInput from '../../simple-input';\nimport SimpleModal from '../../simple-modal';\nimport { toJS } from 'mobx';\nconst managePartner = inject('businessParametersSetupStore')(observer(props => {\n  const {\n    businessParametersSetupStore,\n    t\n  } = props;\n  const [form] = Form.useForm();\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n\n  const isEditing = record => record.key === editingKey;\n\n  const {\n    0: mockDataPartnerList,\n    1: setMockDataPartnerList\n  } = useState([]);\n  const {\n    0: isEnableEditButton,\n    1: setIsEnableEditButton\n  } = useState(true);\n  const {\n    0: visible,\n    1: setVisble\n  } = useState(false);\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState('');\n  const {\n    0: titleModal,\n    1: setTitleModal\n  } = useState('');\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState(''); // var mockDataPartnerList = []\n\n  useEffect(() => {\n    addKeyToDataSource(businessParametersSetupStore.channelPartnerList).then(result => {\n      // mockDataPartnerList = result\n      setMockDataPartnerList(result);\n    });\n  }, []);\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      partner_code: record.product_type,\n      partner_description: record.product_description,\n      transaction_limit: '',\n      daily_limit: ''\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    const inputNode = inputType === 'number' ? __jsx(InputNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 52\n      }\n    }) : __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 70\n      }\n    });\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex == 'product_type' ? 'product_code' : dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: inputType === 'number' ? true : false,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }\n    }, inputNode) : children);\n  };\n\n  const submitChangeProductLimitSelect = () => {\n    //call api\n    let request = {\n      partner_code: selectPartnerAndProduct.partner_code,\n      product_code: businessParametersSetupStore.productLimitDetail.product_code,\n      transaction_code: '6931',\n      transaction_limit: txnLimit,\n      daily_limit: dailyLimit\n    };\n    setVisble(false);\n  };\n\n  const prepareAllLimitToSubmitAndUpdate = () => {\n    setModalString( //waiting for confirm task\n    __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 13\n      }\n    }, \"Confirm to Change Limit Product Code \", businessParametersSetupStore.productLimitDetail.product_type, \"  !!!\")));\n    setVisble(true);\n    setTitleModal('Confirm');\n    setModalType(\"confirm\");\n  };\n\n  const goBackToProductList = () => {\n    businessParametersSetupStore.goBack = true;\n  };\n\n  const save = async key => {\n    const row = await form.validateFields();\n    const newData = [...mockDataPartnerList];\n    const index = newData.findIndex(item => key === item.key);\n\n    if (index > -1) {\n      const item = newData[index];\n      console.log(_objectSpread(_objectSpread({}, item), row));\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setMockDataPartnerList(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setMockDataPartnerList(newData);\n      setEditingKey('');\n    }\n    /* try {\n      const row = await form.validateFields();\n      const newData = [...mockDataPartnerList];\n      const index = newData.findIndex(item => key === item.key);\n       if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, { ...item, ...row });\n        setData(newData);\n        setEditingKey('');\n      } else {\n        newData.push(row);\n        setData(newData);\n        setEditingKey('');\n      }\n    } catch (errInfo) {\n      console.log('Validate Failed:', errInfo);\n    } */\n\n  };\n\n  const deletePartnerSelect = record => {\n    console.log(toJS(record)); //waiting call api\n  };\n\n  const setEditEnableLimit = () => {\n    setIsEnableEditButton(false);\n  };\n\n  const cancelEditLimit = () => {\n    setIsEnableEditButton(true);\n  };\n\n  const renderAction = record => {\n    /* if (record.status === '1') {\n      return (\n        <div>\n          <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={(e) => { submitDeleteProduct(record) }} disabled={editingKey !== ''}>\n            <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n          </TcrbPopconfirm>\n          <a onClick={() => selectProductToViewDetail(record)}><SettingOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n          <a onClick={() => selectProductToSpecificLimit(record)}><FormOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n        </div>)\n    } else if (record.status === '2') {\n      return null\n    } else {\n      return (<div>\n        <TcrbPopconfirm title={\"Confirm to Add !!!\"} onConfirm={() => { submitAddnewProduct(record.key) }} >\n          <a>Confirm</a>\n        </TcrbPopconfirm><br />\n        <TcrbPopconfirm title={\"Confirm to Cancel !!!\"} onConfirm={() => { cancelAddNewProduct(record.key) }} >\n          <a>Cancel</a>\n        </TcrbPopconfirm>\n      </div>)\n    } */\n    const editable = isEditing(record);\n    return editable ? __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }\n    }, __jsx(TcrbPopconfirm, {\n      title: \"Sure to Delete?\",\n      onConfirm: () => save(record.key),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      style: {\n        marginRight: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 15\n      }\n    }, \"Save\")), __jsx(TcrbPopconfirm, {\n      title: \"Sure to cancel?\",\n      onConfirm: cancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    }, \"Cancel\"))) : __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }\n    }, __jsx(TcrbPopconfirm, {\n      title: \"Sure to Delete?\",\n      disabled: editingKey !== '',\n      onConfirm: () => deletePartnerSelect(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 15\n      }\n    }, __jsx(\"a\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }\n    }, __jsx(DeleteOutlined, {\n      style: {\n        fontSize: '18px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 20\n      }\n    }))), __jsx(\"a\", {\n      disabled: editingKey !== '',\n      onClick: () => edit(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 15\n      }\n    }, __jsx(EditOutlined, {\n      style: {\n        fontSize: '18px',\n        color: '#FBA928'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 76\n      }\n    })));\n    {\n      /* <EditOutlined /> */\n    }\n  };\n\n  const columnPartnerList = [{\n    title: 'Partner / Channel',\n    dataIndex: 'partner_code',\n    render: (text, record) => addCommaInData(text)\n  }, {\n    title: 'Partner Description',\n    dataIndex: 'partner_abbreviation',\n    render: (text, record) => addCommaInData(text)\n  }, {\n    title: 'Txn Limit',\n    dataIndex: 'transaction_limit',\n    editable: true,\n    render: (text, record) => addCommaInData(text, true)\n  }, {\n    title: ' Daily Limit',\n    dataIndex: 'daily_limit',\n    editable: true,\n    render: (text, record) => addCommaInData(text, true)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '5%',\n    render: (text, record, index) => renderAction(record, index)\n  }];\n  const mergedColumns = columnPartnerList.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'product_description' ? 'text' : 'number',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackToProductList(),\n    shape: \"round\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 15\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, \"Product_Code\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, businessParametersSetupStore.productLimitDetail.product_type), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }\n  }, \"Product_Description\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 13\n    }\n  }, businessParametersSetupStore.productLimitDetail.product_description)), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }, \"All-Channel Txn Limit\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }\n  }, \" \", isEnableEditButton ? businessParametersSetupStore.productLimitDetail.transaction_limit : __jsx(SimpleInput, {\n    defaultValue: businessParametersSetupStore.productLimitDetail.transaction_limit,\n    halfSize: true,\n    onChange: e => console.log(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 13\n    }\n  }, \"All-Channel Daily Limit\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 13\n    }\n  }, \" \", isEnableEditButton ? businessParametersSetupStore.productLimitDetail.daily_limit : __jsx(SimpleInput, {\n    defaultValue: businessParametersSetupStore.productLimitDetail.daily_limit,\n    halfSize: true,\n    onChange: e => console.log(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 15\n    }\n  }))), __jsx(Row, {\n    justify: \"end\",\n    style: {\n      marginTop: 8,\n      textAlign: \"right\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 13\n    }\n  }, isEnableEditButton ? __jsx(TcrbButton, {\n    shape: \"round\",\n    className: \"primary\",\n    onClick: () => {\n      setEditEnableLimit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 17\n    }\n  }, \"Edit\") : __jsx(Space, {\n    size: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 19\n    }\n  }, __jsx(TcrbButton, {\n    shape: \"round\",\n    className: \"default\",\n    onClick: () => {\n      cancelEditLimit();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 21\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    shape: \"round\",\n    className: \"primary\",\n    onClick: () => {\n      prepareAllLimitToSubmitAndUpdate();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 21\n    }\n  }, \"Submit\")))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 11\n    }\n  }), __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 11\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: mockDataPartnerList,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 13\n    }\n  })), __jsx(SimpleModal, {\n    title: titleModal,\n    type: modalType,\n    onOk: () => {\n      submitChangeProductLimitSelect();\n    },\n    onCancel: () => setVisble(false),\n    textOk: t(\"confirm\"),\n    textCancel: t(\"cancel\"),\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default withTranslation('common')(managePartner);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/product-limit-setup/manage-partner.js"],"names":["React","useState","useEffect","inject","observer","withTranslation","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Popconfirm","Space","DeleteOutlined","EditOutlined","FormOutlined","TcrbButton","TcrbPopconfirm","addKeyToDataSource","addCommaInData","SimpleInput","SimpleModal","toJS","managePartner","props","businessParametersSetupStore","t","form","useForm","editingKey","setEditingKey","isEditing","record","key","mockDataPartnerList","setMockDataPartnerList","isEnableEditButton","setIsEnableEditButton","visible","setVisble","modalString","setModalString","titleModal","setTitleModal","modalType","setModalType","channelPartnerList","then","result","edit","setFieldsValue","partner_code","product_type","partner_description","product_description","transaction_limit","daily_limit","cancel","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","inputNode","margin","required","message","submitChangeProductLimitSelect","request","selectPartnerAndProduct","product_code","productLimitDetail","transaction_code","txnLimit","dailyLimit","prepareAllLimitToSubmitAndUpdate","textAlign","goBackToProductList","goBack","save","row","validateFields","newData","findIndex","item","console","log","splice","push","deletePartnerSelect","setEditEnableLimit","cancelEditLimit","renderAction","editable","marginRight","fontSize","color","columnPartnerList","render","text","width","mergedColumns","map","col","onCell","e","marginTop","body","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { withTranslation } from '../../../i18n'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Popconfirm, Space } from 'antd'\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\n\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { addKeyToDataSource, addCommaInData } from '../../data-utility'\nimport SimpleInput from '../../simple-input'\nimport SimpleModal from '../../simple-modal'\nimport { toJS } from 'mobx';\n\nconst managePartner =\n  inject('businessParametersSetupStore')\n    (observer((props) => {\n      const { businessParametersSetupStore, t } = props\n      const [form] = Form.useForm();\n      const [editingKey, setEditingKey] = useState('')\n      const isEditing = record => record.key === editingKey;\n      const [mockDataPartnerList, setMockDataPartnerList] = useState([])\n      const [isEnableEditButton, setIsEnableEditButton] = useState(true)\n      const [visible, setVisble] = useState(false)\n      const [modalString, setModalString] = useState('')\n      const [titleModal, setTitleModal] = useState('')\n      const [modalType, setModalType] = useState('')\n\n      // var mockDataPartnerList = []\n      useEffect(() => {\n        addKeyToDataSource(businessParametersSetupStore.channelPartnerList).then((result) => {\n          // mockDataPartnerList = result\n          setMockDataPartnerList(result)\n        })\n      }, [])\n\n      const edit = record => {\n        form.setFieldsValue({\n          partner_code: record.product_type,\n          partner_description: record.product_description,\n          transaction_limit: '',\n          daily_limit: '',\n          ...record,\n        });\n        setEditingKey(record.key);\n      };\n\n      const cancel = () => {\n        setEditingKey('');\n      };\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n        return (\n          <td {...restProps}>\n            {editing ? (\n\n              <Form.Item\n                name={dataIndex == 'product_type' ? 'product_code' : dataIndex}\n                style={{\n                  margin: 0,\n                }}\n                rules={[\n                  {\n                    required: (inputType === 'number') ? true : false,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                {inputNode}\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        );\n      };\n      const submitChangeProductLimitSelect = () => {\n        //call api\n        let request = {\n          partner_code: selectPartnerAndProduct.partner_code,\n          product_code: businessParametersSetupStore.productLimitDetail.product_code,\n          transaction_code: '6931',\n          transaction_limit: txnLimit,\n          daily_limit: dailyLimit\n        }\n        setVisble(false)\n      }\n\n      const prepareAllLimitToSubmitAndUpdate = () => {\n        setModalString(\n          //waiting for confirm task\n          <div style={{ textAlign: \"center\" }}>\n            <p>Confirm to Change Limit Product Code {businessParametersSetupStore.productLimitDetail.product_type}  !!!</p>\n            {/* <p>for {selectPartnerAndProduct.partner_code}/{selectPartnerAndProduct.partner_abbreviation} Channel/Partner !!!</p> */}\n          </div>\n        )\n        setVisble(true)\n        setTitleModal('Confirm')\n        setModalType(\"confirm\")\n      }\n      const goBackToProductList = () => {\n        businessParametersSetupStore.goBack = true\n      }\n\n      const save = async key => {\n        const row = await form.validateFields();\n        const newData = [...mockDataPartnerList];\n        const index = newData.findIndex(item => key === item.key);\n\n        if (index > -1) {\n          const item = newData[index];\n          console.log({ ...item, ...row })\n          newData.splice(index, 1, { ...item, ...row });\n          setMockDataPartnerList(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setMockDataPartnerList(newData);\n          setEditingKey('');\n        }\n        /* try {\n          const row = await form.validateFields();\n          const newData = [...mockDataPartnerList];\n          const index = newData.findIndex(item => key === item.key);\n\n          if (index > -1) {\n            const item = newData[index];\n            newData.splice(index, 1, { ...item, ...row });\n            setData(newData);\n            setEditingKey('');\n          } else {\n            newData.push(row);\n            setData(newData);\n            setEditingKey('');\n          }\n        } catch (errInfo) {\n          console.log('Validate Failed:', errInfo);\n        } */\n      };\n\n      const deletePartnerSelect = (record) => {\n        console.log(toJS(record))\n        //waiting call api\n      }\n\n      const setEditEnableLimit = () => {\n        setIsEnableEditButton(false)\n      }\n\n      const cancelEditLimit = () => {\n        setIsEnableEditButton(true)\n      }\n\n      const renderAction = (record) => {\n        /* if (record.status === '1') {\n          return (\n            <div>\n              <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={(e) => { submitDeleteProduct(record) }} disabled={editingKey !== ''}>\n                <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n              </TcrbPopconfirm>\n              <a onClick={() => selectProductToViewDetail(record)}><SettingOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n              <a onClick={() => selectProductToSpecificLimit(record)}><FormOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n            </div>)\n        } else if (record.status === '2') {\n          return null\n        } else {\n          return (<div>\n            <TcrbPopconfirm title={\"Confirm to Add !!!\"} onConfirm={() => { submitAddnewProduct(record.key) }} >\n              <a>Confirm</a>\n            </TcrbPopconfirm><br />\n            <TcrbPopconfirm title={\"Confirm to Cancel !!!\"} onConfirm={() => { cancelAddNewProduct(record.key) }} >\n              <a>Cancel</a>\n            </TcrbPopconfirm>\n          </div>)\n        } */\n        const editable = isEditing(record);\n        return editable ? (\n          <span>\n            <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={() => save(record.key)}>\n              <a\n                style={{\n                  marginRight: 8,\n                }}\n              >\n                Save\n            </a>\n            </TcrbPopconfirm>\n            <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n              <a>Cancel</a>\n            </TcrbPopconfirm>\n          </span>\n        ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <TcrbPopconfirm title=\"Sure to Delete?\" disabled={editingKey !== ''} onConfirm={() => deletePartnerSelect(record)}>\n                <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n              </TcrbPopconfirm>\n              <a disabled={editingKey !== ''} onClick={() => edit(record)}><EditOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n            </div>\n          );\n        {/* <EditOutlined /> */ }\n      }\n      const columnPartnerList = [\n        {\n          title: 'Partner / Channel',\n          dataIndex: 'partner_code',\n          render: (text, record) => addCommaInData(text)\n        },\n        {\n          title: 'Partner Description',\n          dataIndex: 'partner_abbreviation',\n          render: (text, record) => addCommaInData(text)\n        },\n        {\n          title: 'Txn Limit',\n          dataIndex: 'transaction_limit',\n          editable: true,\n          render: (text, record) => addCommaInData(text, true)\n        },\n        {\n          title: ' Daily Limit',\n          dataIndex: 'daily_limit',\n          editable: true,\n          render: (text, record) => addCommaInData(text, true)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '5%',\n          render: (text, record, index) =>\n            renderAction(record, index)\n        },\n      ]\n      const mergedColumns = columnPartnerList.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: col.dataIndex === 'product_description' ? 'text' : 'number',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToProductList()} shape=\"round\">Back</TcrbButton>\n            </Col>\n          </Row>\n          <Row gutter={[4, 24]}>\n            <Col span={6}>Product_Code</Col>\n            <Col span={6}>{businessParametersSetupStore.productLimitDetail.product_type}</Col>\n            <Col span={6}>Product_Description</Col>\n            <Col span={6}>{businessParametersSetupStore.productLimitDetail.product_description}</Col>\n\n          </Row>\n          <Row gutter={[4, 24]}>\n            <Col span={6}>All-Channel Txn Limit</Col>\n            {/* <Col span={6}>{businessParametersSetupStore.productLimitDetail.transaction_limit}</Col> */}\n            <Col span={6}> {isEnableEditButton ?\n              businessParametersSetupStore.productLimitDetail.transaction_limit :\n              <SimpleInput defaultValue={businessParametersSetupStore.productLimitDetail.transaction_limit} halfSize={true} onChange={(e) => console.log(e)} />}\n            </Col>\n\n            <Col span={6}>All-Channel Daily Limit</Col>\n            {/* <Col span={6}>{businessParametersSetupStore.productLimitDetail.daily_limit}</Col> */}\n            <Col span={6}> {isEnableEditButton ?\n              businessParametersSetupStore.productLimitDetail.daily_limit :\n              <SimpleInput defaultValue={businessParametersSetupStore.productLimitDetail.daily_limit} halfSize={true} onChange={(e) => console.log(e)} />}\n            </Col>\n          </Row>\n          <Row justify=\"end\" style={{ marginTop: 8, textAlign: \"right\" }}>\n            {/* <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToProductList()} shape=\"round\">Back</TcrbButton>\n            </Col> */}\n            <Col span={4}>\n              {isEnableEditButton ? (\n                <TcrbButton shape=\"round\" className=\"primary\" onClick={() => { setEditEnableLimit() }}>Edit</TcrbButton>\n              ) : (\n                  <Space size={8}>\n                    <TcrbButton shape=\"round\" className=\"default\" onClick={() => { cancelEditLimit() }}>Cancel</TcrbButton>\n                    <TcrbButton shape=\"round\" className=\"primary\" onClick={() => { prepareAllLimitToSubmitAndUpdate() }}>Submit</TcrbButton>\n                  </Space>\n                )}\n            </Col>\n          </Row>\n          <Divider />\n          <Form form={form} component={false}>\n            <Table\n              components={{\n                body: {\n                  cell: EditableCell,\n                },\n              }}\n              bordered\n              dataSource={mockDataPartnerList}\n              columns={mergedColumns}\n              size=\"small\"\n            />\n          </Form>\n          <SimpleModal\n            title={titleModal}\n            type={modalType}\n            onOk={() => { submitChangeProductLimitSelect() }}\n            onCancel={() => setVisble(false)}\n            textOk={t(\"confirm\")}\n            textCancel={t(\"cancel\")}\n            modalString={modalString}\n            visible={visible}\n          />\n        </div>\n      )\n    }))\nexport default withTranslation('common')(managePartner)\n"]},"metadata":{},"sourceType":"module"}