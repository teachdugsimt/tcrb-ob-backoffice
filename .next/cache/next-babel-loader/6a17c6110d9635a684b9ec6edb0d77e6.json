{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/department/manage-department.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport SimpleInput from '../../simple-input';\nimport SimpleModal from '../../simple-modal';\nimport { addKeyToDataSource, checkDefaultStatus } from '../../data-utility';\nimport { toJS } from 'mobx';\nlet sectionList = [];\nlet departmentName = null;\nlet selectSectionDeactivate = {};\nconst ManageDepartment = inject('userAccessManagementStore')(observer(props => {\n  const {\n    0: showEditDepartment,\n    1: setShowEditDepartment\n  } = useState(false);\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const {\n    0: dataSourceSection,\n    1: setDataSourceSection\n  } = useState('');\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: setTextOk\n  } = useState(\"Submit\");\n  const {\n    0: textEdit,\n    1: setTextEdit\n  } = useState(\"Add Section\");\n  const {\n    0: textCancel,\n    1: setTextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: isDisableButtonAddSection,\n    1: setIsDisableButtonAddSection\n  } = useState(false);\n  const [form] = Form.useForm();\n  const {\n    userAccessManagementStore,\n    t\n  } = props;\n\n  const isEditing = record => record.key === editingKey;\n\n  useEffect(() => {\n    addKeyToDataSource(userAccessManagementStore.departmentSelected.sections).then(result => {\n      setDataSourceSection(result);\n    });\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.responseDeleteSection == true) {\n      const newData = [...dataSourceSection];\n      const sectionSelect = selectSectionDeactivate;\n      sectionSelect.request_status = \"PENDING\"; // sectionSelect.request_status = \"PENDING\"\n\n      console.log(toJS(newData));\n      console.log(toJS(sectionSelect));\n      const index = newData.findIndex(item => sectionSelect.key === item.key);\n\n      if (index > -1) {\n        const item = newData[index];\n        newData.splice(index, 1, _objectSpread(_objectSpread({}, item), sectionSelect));\n        setDataSourceSection(newData);\n      } else {\n        newData.push(sectionSelect);\n        setDataSourceSection(newData);\n      }\n\n      userAccessManagementStore.responseDeleteSection = false; // setSelectSectionDeactivate({})\n    }\n  }, [userAccessManagementStore.responseDeleteSection]);\n\n  const addSectionToDepartment = () => {\n    const newData = [...dataSourceSection];\n    let sections = [];\n\n    for (let index = 0; index < sectionList.length; index++) {\n      sections.push({\n        name: sectionList[index],\n        request_status: 'PENDING'\n      });\n      newData.push(sections[index]);\n    } //waiting call api\n\n\n    addKeyToDataSource(newData).then(result => {\n      setDataSourceSection(result);\n    });\n    setVisible(false);\n  };\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    })) : children);\n  };\n\n  const enableEditDepartment = () => {\n    setShowEditDepartment(true);\n  };\n\n  const cancelEditDepartment = () => {\n    setShowEditDepartment(false);\n  };\n\n  const cancelAddNewSection = async key => {\n    // setDisabledButtonAddRow(false)\n    let indexSection = dataSourceSection.findIndex(item => key === item.key);\n    const newData = [...dataSourceSection];\n    newData.splice(indexSection, 1);\n    setDataSourceSection(newData);\n    setEditingKey('');\n    setIsDisableButtonAddSection(false);\n  };\n\n  const deactivateSectionSelect = record => {\n    console.log(toJS(record));\n    userAccessManagementStore.submitDeleteSection(record);\n    /* userAccessManagementStore.responseDeleteSection = false\n    userAccessManagementStore.responseDeleteSection = true */\n\n    selectSectionDeactivate = record;\n  };\n\n  const goBackToDepartmentList = () => {\n    userAccessManagementStore.nextPageIsManageDepartment = false;\n  };\n\n  const SelectDepartment = () => {\n    return __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 15\n      }\n    }, \"Section / Team\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      mode: \"tags\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: value => sectionList = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 15\n      }\n    })));\n  };\n\n  const openModalAddSection = () => {\n    setTitle('Add Section to Department');\n    setModalType('confirm');\n    setModalString(__jsx(SelectDepartment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }\n    }));\n    setVisible(true);\n  };\n\n  const openModalSubmitEditDepartmentName = () => {\n    setTitle('Confirm');\n    setModalType('confirm');\n    setModalString(__jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, \"Confirm to Change Name Department \", userAccessManagementStore.departmentSelected.name, \" to \", departmentName, \".\"), __jsx(\"p\", {\n      style: {\n        color: orange[6]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, \"Your changes will take effect after being approved.\")));\n    setVisible(true);\n  };\n\n  const submitEditSection = async key => {\n    // Call api to update record status\n    const row = await form.validateFields();\n    row.status = 'INACTIVE';\n    row.request_status = 'PENDING'; //waiting confirm now use call new api\n\n    const newData = [...dataSourceSection];\n    const index = newData.findIndex(item => key === item.key);\n    let request = {\n      newData: {\n        name: row.name\n      },\n      currentData: newData[index]\n    };\n\n    if (index > -1) {\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setDataSourceSection(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setDataSourceSection(newData);\n      setEditingKey('');\n    }\n\n    userAccessManagementStore.updateSection(request);\n    setIsDisableButtonAddSection(false); // setEditingKey('');\n  };\n\n  const addNewSection = async key => {\n    const row = await form.validateFields();\n    row.status = 'INACTIVE';\n    row.request_status = 'PENDING'; //waiting confirm now use call new api\n\n    const newData = [...dataSourceSection];\n    const index = newData.findIndex(item => key === item.key);\n\n    if (index > -1) {\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setDataSourceSection(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setDataSourceSection(newData);\n      setEditingKey('');\n    }\n\n    let request = {\n      name: row.name,\n      department_id: userAccessManagementStore.departmentSelected.id\n    }; // console.log(row)\n\n    userAccessManagementStore.submitAddNewSection(request);\n    setIsDisableButtonAddSection(false);\n  };\n\n  const cancelEditSection = () => {\n    setIsDisableButtonAddSection(false);\n    setEditingKey('');\n  };\n\n  const renderActionSectionAndTeam = record => {\n    const editable = isEditing(record);\n\n    if (record.request_status === 'APPROVE') {\n      return editable ? __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: () => submitEditSection(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: () => cancelEditSection(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 17\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 17\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: () => deactivateSectionSelect(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 19\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status === 'PENDING') {\n      return null;\n    } else if (record.request_status === 'REJECT') {\n      return null;\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 19\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Confirm to Add !!!\",\n        onConfirm: () => {\n          addNewSection(record.key);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, \"Confirm\")), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 30\n        }\n      }), __jsx(TcrbPopconfirm, {\n        title: \"Confirm to Cancel !!!\",\n        onConfirm: () => {\n          cancelAddNewSection(record.key);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 15\n        }\n      }, \"Cancel\")));\n    }\n  };\n\n  const addRowProductList = () => {\n    let newSection = {\n      key: dataSourceSection.length + 1,\n      name: ''\n    };\n    setDataSourceSection([...dataSourceSection, newSection]);\n    edit(newSection);\n    setIsDisableButtonAddSection(true); // setDisabledButtonAddRow(true)\n  };\n\n  const submitEditDepartmentName = () => {\n    console.log(departmentName);\n    setVisible(false);\n    let request = {\n      newData: {\n        name: departmentName\n      },\n      currentData: userAccessManagementStore.departmentSelected\n    };\n    userAccessManagementStore.updateDepartment(request);\n    setShowEditDepartment(false);\n  };\n\n  const columnSection = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Section Name',\n    dataIndex: 'name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionSectionAndTeam(record)\n  }];\n  const mergedColumns = columnSection.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackToDepartmentList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 15\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 13\n    }\n  }, \"Department\"), __jsx(Col, {\n    span: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, \" \", showEditDepartment ? __jsx(SimpleInput, {\n    defaultValue: userAccessManagementStore.departmentSelected.name,\n    onChange: value => departmentName = value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 15\n    }\n  }) : userAccessManagementStore.departmentSelected.name)), __jsx(Row, {\n    justify: \"center\",\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }\n  }, showEditDepartment ? __jsx(Space, {\n    size: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 17\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => {\n      cancelEditDepartment();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 19\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      openModalSubmitEditDepartmentName();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 19\n    }\n  }, \"Submit\")) : __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      enableEditDepartment();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 17\n    }\n  }, \"Edit\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 11\n    }\n  }), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => addRowProductList(),\n    disabled: isDisableButtonAddSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 15\n    }\n  }, \"Add Section\"))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    flex: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }\n  }, __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 15\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: dataSourceSection,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 17\n    }\n  })))), __jsx(SimpleModal, {\n    title: title,\n    type: modalType,\n    onOk: () => submitEditDepartmentName(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default ManageDepartment;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/department/manage-department.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","TcrbButton","TcrbPopconfirm","inject","observer","orange","green","gold","SimpleInput","SimpleModal","addKeyToDataSource","checkDefaultStatus","toJS","sectionList","departmentName","selectSectionDeactivate","ManageDepartment","props","showEditDepartment","setShowEditDepartment","editingKey","setEditingKey","dataSourceSection","setDataSourceSection","title","setTitle","textOk","setTextOk","textEdit","setTextEdit","textCancel","setTextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","isDisableButtonAddSection","setIsDisableButtonAddSection","form","useForm","userAccessManagementStore","t","isEditing","record","key","departmentSelected","sections","then","result","responseDeleteSection","newData","sectionSelect","request_status","console","log","index","findIndex","item","splice","push","addSectionToDepartment","length","name","edit","setFieldsValue","status","EditableCell","editing","dataIndex","inputType","children","restProps","margin","required","message","enableEditDepartment","cancelEditDepartment","cancelAddNewSection","indexSection","deactivateSectionSelect","submitDeleteSection","goBackToDepartmentList","nextPageIsManageDepartment","SelectDepartment","padding","width","value","openModalAddSection","openModalSubmitEditDepartmentName","textAlign","color","submitEditSection","row","validateFields","request","currentData","updateSection","addNewSection","department_id","id","submitAddNewSection","cancelEditSection","renderActionSectionAndTeam","editable","marginRight","addRowProductList","newSection","submitEditDepartmentName","updateDepartment","columnSection","render","text","mergedColumns","map","col","onCell","marginTop","body","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\n\nimport SimpleInput from '../../simple-input'\nimport SimpleModal from '../../simple-modal'\nimport { addKeyToDataSource, checkDefaultStatus } from '../../data-utility';\nimport { toJS } from 'mobx';\n\nlet sectionList = []\nlet departmentName = null\nlet selectSectionDeactivate = {}\n\nconst ManageDepartment =\n  inject('userAccessManagementStore')\n    (observer((props) => {\n      const [showEditDepartment, setShowEditDepartment] = useState(false)\n      const [editingKey, setEditingKey] = useState('')\n      const [dataSourceSection, setDataSourceSection] = useState('')\n      const [title, setTitle] = useState(\"\")\n      const [textOk, setTextOk] = useState(\"Submit\")\n      const [textEdit, setTextEdit] = useState(\"Add Section\")\n      const [textCancel, setTextCancel] = useState(\"Cancel\")\n      const [modalString, setModalString] = useState(\"\")\n      const [modalType, setModalType] = useState('')\n      const [visible, setVisible] = useState(false)\n      const [isDisableButtonAddSection, setIsDisableButtonAddSection] = useState(false)\n      const [form] = Form.useForm();\n\n      const { userAccessManagementStore, t } = props\n      const isEditing = record => record.key === editingKey\n\n      useEffect(() => {\n        addKeyToDataSource(userAccessManagementStore.departmentSelected.sections).then(result => {\n          setDataSourceSection(result)\n        })\n      }, [])\n\n      useEffect(() => {\n        if (userAccessManagementStore.responseDeleteSection == true) {\n          const newData = [...dataSourceSection]\n          const sectionSelect = selectSectionDeactivate\n          sectionSelect.request_status = \"PENDING\"\n          // sectionSelect.request_status = \"PENDING\"\n          console.log(toJS(newData))\n          console.log(toJS(sectionSelect))\n          const index = newData.findIndex(item => sectionSelect.key === item.key);\n          if (index > -1) {\n            const item = newData[index];\n            newData.splice(index, 1, { ...item, ...sectionSelect });\n            setDataSourceSection(newData);\n          } else {\n            newData.push(sectionSelect);\n            setDataSourceSection(newData);\n          }\n          userAccessManagementStore.responseDeleteSection = false\n\n          // setSelectSectionDeactivate({})\n        }\n      }, [userAccessManagementStore.responseDeleteSection])\n\n      const addSectionToDepartment = () => {\n        const newData = [...dataSourceSection];\n\n        let sections = []\n        for (let index = 0; index < sectionList.length; index++) {\n          sections.push({\n            name: sectionList[index],\n            request_status: 'PENDING'\n\n          })\n          newData.push(sections[index]);\n\n        }\n        //waiting call api\n        addKeyToDataSource(newData).then(result => {\n          setDataSourceSection(result)\n        })\n        setVisible(false)\n      }\n\n      const edit = record => {\n        form.setFieldsValue({\n          name: '',\n          status: record.status,\n          ...record,\n        });\n        setEditingKey(record.key);\n      }\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        return (\n          <td {...restProps}>\n            {editing ? (\n              <Form.Item\n                name={dataIndex}\n                style={{\n                  margin: 0\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        )\n      }\n\n      const enableEditDepartment = () => {\n        setShowEditDepartment(true)\n      }\n\n      const cancelEditDepartment = () => {\n        setShowEditDepartment(false)\n      }\n\n      const cancelAddNewSection = async (key) => {\n        // setDisabledButtonAddRow(false)\n        let indexSection = dataSourceSection.findIndex(item => key === item.key)\n        const newData = [...dataSourceSection]\n        newData.splice(indexSection, 1)\n        setDataSourceSection(newData);\n        setEditingKey('');\n        setIsDisableButtonAddSection(false)\n      }\n\n      const deactivateSectionSelect = (record) => {\n        console.log(toJS(record))\n        userAccessManagementStore.submitDeleteSection(record)\n        /* userAccessManagementStore.responseDeleteSection = false\n        userAccessManagementStore.responseDeleteSection = true */\n        selectSectionDeactivate = record\n\n      }\n\n      const goBackToDepartmentList = () => {\n        userAccessManagementStore.nextPageIsManageDepartment = false\n      }\n\n      const SelectDepartment = () => {\n        return (\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>Section / Team</p>\n            </Col>\n            <Col span={14}>\n              <Select\n                mode=\"tags\"\n                style={{ width: '100%' }}\n                placeholder=\"Please select\"\n                onChange={(value) => sectionList = value}\n              >\n                {/* {children} */}\n              </Select>\n            </Col>\n          </Row>\n        )\n      }\n\n      const openModalAddSection = () => {\n        setTitle('Add Section to Department')\n        setModalType('confirm')\n        setModalString(\n          <SelectDepartment />\n        )\n        setVisible(true)\n      }\n\n      const openModalSubmitEditDepartmentName = () => {\n        setTitle('Confirm')\n        setModalType('confirm')\n        setModalString(\n          <div style={{ textAlign: \"center\" }}>\n            <p>Confirm to Change Name Department {userAccessManagementStore.departmentSelected.name} to {departmentName}.</p>\n            <p style={{ color: orange[6] }}>Your changes will take effect after being approved.</p>\n          </div>\n        )\n        setVisible(true)\n      }\n\n      const submitEditSection = async (key) => {\n        // Call api to update record status\n        const row = await form.validateFields();\n        row.status = 'INACTIVE'\n        row.request_status = 'PENDING' //waiting confirm now use call new api\n\n        const newData = [...dataSourceSection];\n        const index = newData.findIndex(item => key === item.key);\n        let request = {\n          newData: {\n            name: row.name\n          },\n          currentData: newData[index]\n        }\n        if (index > -1) {\n          const item = newData[index];\n          newData.splice(index, 1, { ...item, ...row });\n          setDataSourceSection(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setDataSourceSection(newData);\n          setEditingKey('');\n        }\n\n        userAccessManagementStore.updateSection(request)\n        setIsDisableButtonAddSection(false)\n        // setEditingKey('');\n      }\n\n      const addNewSection = async (key) => {\n        const row = await form.validateFields();\n        row.status = 'INACTIVE'\n        row.request_status = 'PENDING' //waiting confirm now use call new api\n        const newData = [...dataSourceSection]\n        const index = newData.findIndex(item => key === item.key);\n        if (index > -1) {\n          const item = newData[index];\n          newData.splice(index, 1, { ...item, ...row });\n          setDataSourceSection(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setDataSourceSection(newData);\n          setEditingKey('');\n        }\n        let request = {\n          name: row.name,\n          department_id: userAccessManagementStore.departmentSelected.id\n        }\n\n        // console.log(row)\n        userAccessManagementStore.submitAddNewSection(request)\n        setIsDisableButtonAddSection(false)\n      }\n\n      const cancelEditSection = () => {\n        setIsDisableButtonAddSection(false)\n        setEditingKey('')\n      }\n      const renderActionSectionAndTeam = (record) => {\n        const editable = isEditing(record);\n        if (record.request_status === 'APPROVE') {\n          return editable ? (\n            <span>\n              <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => submitEditSection(record.key)}>\n                <a style={{ marginRight: 8, }}>\n                  Save\n                </a>\n              </TcrbPopconfirm>\n              <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={() => cancelEditSection()}>\n                <a style={{ color: '#3e3e3e' }}>Cancel</a>\n              </TcrbPopconfirm>\n            </span>\n          ) : (\n              <div style={{ textAlign: \"center\" }}>\n                <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                  Edit\n                </a>\n                <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateSectionSelect(record)}>\n                  <a style={{ color: '#FBA928' }}>Deactivate</a>\n                </TcrbPopconfirm>\n              </div>\n            );\n        } else if (record.request_status === 'PENDING') {\n          return null\n        } else if (record.request_status === 'REJECT') {\n          return null\n        }\n        else {\n          return (<div>\n            <TcrbPopconfirm title={\"Confirm to Add !!!\"} onConfirm={() => { addNewSection(record.key) }} >\n              <a>Confirm</a>\n            </TcrbPopconfirm><br />\n            <TcrbPopconfirm title={\"Confirm to Cancel !!!\"} onConfirm={() => { cancelAddNewSection(record.key) }} >\n              <a>Cancel</a>\n            </TcrbPopconfirm>\n          </div>)\n        }\n      }\n\n      const addRowProductList = () => {\n        let newSection = {\n          key: dataSourceSection.length + 1,\n          name: ''\n        }\n        setDataSourceSection([...dataSourceSection, newSection])\n        edit(newSection)\n        setIsDisableButtonAddSection(true)\n        // setDisabledButtonAddRow(true)\n      }\n\n      const submitEditDepartmentName = () => {\n        console.log(departmentName)\n        setVisible(false)\n        let request = {\n          newData: {\n            name: departmentName\n          },\n          currentData: userAccessManagementStore.departmentSelected\n        }\n        userAccessManagementStore.updateDepartment(request)\n        setShowEditDepartment(false)\n      }\n\n      const columnSection = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n        },\n        {\n          title: 'Section Name',\n          dataIndex: 'name',\n          editable: true,\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '10%',\n          render: (text, record) => renderActionSectionAndTeam(record)\n        }\n      ]\n\n      const mergedColumns = columnSection.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: 'text',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToDepartmentList()}>Back</TcrbButton>\n            </Col>\n          </Row>\n          <Row gutter={[4, 24]}>\n            <Col span={5}>Department</Col>\n            <Col span={7}> {showEditDepartment ?\n              <SimpleInput defaultValue={userAccessManagementStore.departmentSelected.name} onChange={(value) => departmentName = value} /> : userAccessManagementStore.departmentSelected.name\n            }\n            </Col>\n          </Row>\n\n          <Row justify=\"center\" style={{ marginTop: 8 }}>\n            <Col span={4}>\n              {showEditDepartment ?\n                <Space size={8}>\n                  <TcrbButton className=\"default\" onClick={() => { cancelEditDepartment() }} >Cancel</TcrbButton>\n                  <TcrbButton className=\"primary\" onClick={() => { openModalSubmitEditDepartmentName() }} >Submit</TcrbButton>\n                </Space>\n                :\n                <TcrbButton className=\"primary\" onClick={() => { enableEditDepartment() }} >Edit</TcrbButton>}\n            </Col>\n          </Row>\n          <Divider />\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"primary\" onClick={() => addRowProductList()} disabled={isDisableButtonAddSection}>Add Section</TcrbButton>\n            </Col>\n          </Row>\n          <Row>\n            <Col flex={100}>\n              <Form form={form} component={false}>\n                <Table\n                  components={{\n                    body: {\n                      cell: EditableCell,\n                    },\n                  }}\n                  bordered\n                  dataSource={dataSourceSection}\n                  columns={mergedColumns}\n                  size=\"small\"\n                />\n              </Form>\n            </Col>\n          </Row>\n          <SimpleModal\n            title={title}\n            type={modalType}\n            onOk={() => submitEditDepartmentName()}\n            onCancel={() => setVisible(false)}\n            textCancel={textCancel}\n            textOk={textOk}\n            width={600}\n            modalString={modalString}\n            visible={visible}\n          />\n\n        </div>\n      )\n    }))\n\nexport default ManageDepartment\n"]},"metadata":{},"sourceType":"module"}