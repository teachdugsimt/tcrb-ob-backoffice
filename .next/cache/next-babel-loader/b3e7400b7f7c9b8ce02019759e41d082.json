{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/menu-list.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm, TcrbModal } from '../../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility';\nvar roleName = null;\nvar Option = Select.Option;\nvar MenuList = inject('userAccessManagementStore')(observer(_s(function (props) {\n  _s();\n\n  var userAccessManagementStore = props.userAccessManagementStore;\n\n  var _useState = useState([]),\n      menuList = _useState[0],\n      setMenuList = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      modalTitle = _useState2[0],\n      setModalTitle = _useState2[1];\n\n  var _useState3 = useState(\"Submit\"),\n      textOk = _useState3[0],\n      settextOk = _useState3[1];\n\n  var _useState4 = useState(\"Cancel\"),\n      textCancel = _useState4[0],\n      settextCancel = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      modalString = _useState5[0],\n      setModalString = _useState5[1];\n\n  var _useState6 = useState('confirm'),\n      modalType = _useState6[0],\n      setModalType = _useState6[1];\n\n  var _useState7 = useState(false),\n      visible = _useState7[0],\n      setVisible = _useState7[1];\n\n  var _useState8 = useState([]),\n      functionList = _useState8[0],\n      setFunctionList = _useState8[1];\n\n  var _useState9 = useState(false),\n      visibleFormAddNewMenu = _useState9[0],\n      setVisibleFormAddNewMenu = _useState9[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  useEffect(function () {\n    userAccessManagementStore.getDataMenu();\n    userAccessManagementStore.getDataFunctionList();\n  }, []);\n  useEffect(function () {\n    if (userAccessManagementStore.menuList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.menuList).then(function (result) {\n        setMenuList(result);\n      });\n    }\n  }, [userAccessManagementStore.menuList]);\n  useEffect(function () {\n    if (userAccessManagementStore.functionOptionList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.functionOptionList).then(function (result) {\n        setFunctionList(result);\n      });\n    }\n  }, [userAccessManagementStore.functionOptionList]);\n  /* const FormAddNewMenu = () => {\n    return (\n      <div>\n        <Row gutter={[16, 16]}>\n          <Col span={10} >\n            <span>\n              Menu Name\n          </span>\n          </Col>\n          <Col span={14}>\n            <SimpleInput onChange={(value) => roleName = value} />\n          </Col>\n        </Row>\n        <Row >\n          <Col span={10} >\n            <span>\n              Functions\n            </span>\n          </Col>\n          <Col span={14}>\n            <Select\n              mode=\"multiple\"\n              style={{ width: '100%' }}\n              placeholder=\"Please select Functions\"\n              onChange={(value) => null}\n            >\n              {functionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n     )\n  } */\n\n  var FormAddNewDepartment = function FormAddNewDepartment(_ref) {\n    var visible = _ref.visible,\n        onCreate = _ref.onCreate,\n        _onCancel = _ref.onCancel;\n    return __jsx(TcrbModal, {\n      visible: visible,\n      title: \"Add new menu\",\n      okText: \"Submit\",\n      cancelText: \"Cancel\",\n      onCancel: function onCancel() {\n        form.resetFields();\n\n        _onCancel();\n      },\n      width: 600,\n      onOk: function onOk() {\n        form.validateFields().then(function (values) {\n          form.resetFields();\n          onCreate(values);\n        })[\"catch\"](function (info) {\n          console.log('Validate Failed:', info);\n        });\n      },\n      maskClosable: false,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, __jsx(Form, {\n      form: form,\n      layout: \"vertical\",\n      name: \"form_in_modal\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, \"Menu Name\")), __jsx(Col, {\n      span: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 15\n      }\n    }, __jsx(Form.Item, {\n      name: \"name\",\n      rules: [{\n        required: true,\n        message: 'Please input Menu Name'\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }\n    }, __jsx(SimpleInput, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 19\n      }\n    })))), __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, \"Functions\")), __jsx(Col, {\n      span: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, __jsx(Form.Item, {\n      name: \"function_list_id\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 17\n      }\n    }, __jsx(Select, {\n      mode: \"tags\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select Function\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 19\n      }\n    }, functionList.map(function (item, index) {\n      return __jsx(Option, {\n        key: index,\n        value: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 56\n        }\n      }, item.name);\n    })))))));\n  };\n\n  var openModalAddNewMenu = function openModalAddNewMenu() {\n    setModalTitle('Add new menu');\n    setModalString(__jsx(FormAddNewMenu, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  var addNewMenu = function addNewMenu(values) {\n    setVisibleFormAddNewMenu(false);\n    userAccessManagementStore.submitAddNewMenu(values);\n  };\n\n  var deactivateMenuSelect = function deactivateMenuSelect(record) {\n    userAccessManagementStore.submitDeleteMenu(record);\n  };\n\n  var openModalShowFunctionList = function openModalShowFunctionList(functionList) {\n    setModalType('');\n    setModalTitle('Function ');\n    addKeyToDataSource(functionList).then(function (result) {\n      setModalString(__jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }\n      }, __jsx(Table, {\n        bordered: true,\n        dataSource: result,\n        columns: columnFunction,\n        size: \"small\",\n        pagination: false,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }\n      })));\n    });\n    setVisible(true);\n  };\n\n  var renderFunction = function renderFunction(record) {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 14\n      }\n    }, __jsx(\"a\", {\n      onClick: function onClick() {\n        return openModalShowFunctionList(record.functions);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }\n    }, record.functions.length, \" Function\"));\n  };\n\n  var viewMenuManage = function viewMenuManage(record) {\n    userAccessManagementStore.menuSelected = record;\n    userAccessManagementStore.nextPageIsManageMenu = true;\n  };\n\n  var renderActionMenu = function renderActionMenu(record) {\n    if (record.request_status == 'APPROVE') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        onClick: function onClick() {\n          return viewMenuManage(record);\n        },\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: function onConfirm() {\n          return deactivateMenuSelect(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 15\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status == 'PENDING') {\n      return null;\n    } else if (record.request_status == 'REJECT') {\n      return null;\n    }\n  };\n\n  var columnMenu = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(record.status, record.request_status);\n    }\n  }, {\n    title: 'Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Functions',\n    dataIndex: 'functions',\n    render: function render(text, record) {\n      return renderFunction(record);\n    }\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: function render(text, record) {\n      return renderActionMenu(record);\n    }\n  }];\n  var columnFunction = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(record.status, record.request_status);\n    }\n  }, {\n    title: 'Function Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }];\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      return setVisibleFormAddNewMenu(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 13\n    }\n  }, \"Add Menu\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: menuList,\n    columns: columnMenu,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }\n  }), __jsx(FormAddNewDepartment, {\n    visible: visibleFormAddNewMenu,\n    onCreate: addNewMenu,\n    onCancel: function onCancel() {\n      setVisibleFormAddNewMenu(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: function onOk() {\n      return addNewMenu();\n    },\n    onCancel: function onCancel() {\n      return setVisible(false);\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 9\n    }\n  }));\n}, \"MQFcbdswuBpeZ4T7CVtMvqdEqDI=\", false, function () {\n  return [Form.useForm];\n})));\nexport default MenuList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/menu-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","TcrbModal","inject","observer","SimpleModal","SimpleInput","checkDefaultStatus","addKeyToDataSource","roleName","Option","MenuList","props","userAccessManagementStore","menuList","setMenuList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","functionList","setFunctionList","visibleFormAddNewMenu","setVisibleFormAddNewMenu","useForm","form","getDataMenu","getDataFunctionList","length","then","result","functionOptionList","FormAddNewDepartment","onCreate","onCancel","resetFields","validateFields","values","info","console","log","padding","required","message","width","map","item","index","id","name","openModalAddNewMenu","addNewMenu","submitAddNewMenu","deactivateMenuSelect","record","submitDeleteMenu","openModalShowFunctionList","columnFunction","renderFunction","functions","viewMenuManage","menuSelected","nextPageIsManageMenu","renderActionMenu","request_status","textAlign","marginRight","color","columnMenu","title","dataIndex","render","text","status"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm, TcrbModal } from '../../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility'\nlet roleName = null\n\nconst { Option } = Select;\n\nconst MenuList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [menuList, setMenuList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setModalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n    const [functionList, setFunctionList] = useState([])\n    const [visibleFormAddNewMenu, setVisibleFormAddNewMenu] = useState(false)\n\n    const [form] = Form.useForm();\n\n\n    useEffect(() => {\n      userAccessManagementStore.getDataMenu()\n      userAccessManagementStore.getDataFunctionList()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.menuList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.menuList).then(result => {\n          setMenuList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.menuList])\n\n    useEffect(() => {\n      if (userAccessManagementStore.functionOptionList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.functionOptionList).then(result => {\n          setFunctionList(result)\n        })\n      }\n    }, [userAccessManagementStore.functionOptionList])\n\n\n    /* const FormAddNewMenu = () => {\n      return (\n        <div>\n          <Row gutter={[16, 16]}>\n            <Col span={10} >\n              <span>\n                Menu Name\n            </span>\n            </Col>\n            <Col span={14}>\n              <SimpleInput onChange={(value) => roleName = value} />\n            </Col>\n          </Row>\n          <Row >\n            <Col span={10} >\n              <span>\n                Functions\n              </span>\n            </Col>\n            <Col span={14}>\n              <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Please select Functions\"\n                onChange={(value) => null}\n              >\n                {functionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n              </Select>\n            </Col>\n          </Row>\n        </div>\n\n      )\n    } */\n\n    const FormAddNewDepartment = ({ visible, onCreate, onCancel }) => {\n      return (\n        <TcrbModal\n          visible={visible}\n          title=\"Add new menu\"\n          okText=\"Submit\"\n          cancelText=\"Cancel\"\n          onCancel={() => {\n            form.resetFields();\n            onCancel()\n          }}\n          width={600}\n          onOk={() => {\n            form\n              .validateFields()\n              .then(values => {\n                form.resetFields();\n                onCreate(values);\n              })\n              .catch(info => {\n                console.log('Validate Failed:', info);\n              });\n          }}\n          maskClosable={false}\n\n        >\n          <Form\n            form={form}\n            layout=\"vertical\"\n            name=\"form_in_modal\"\n          >\n\n            <Row >\n              <Col span={10} style={{ padding: 4 }}>\n                <span>\n                  Menu Name\n            </span>\n              </Col>\n              <Col span={14}>\n                <Form.Item\n                  name=\"name\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input Menu Name',\n                    },\n                  ]}\n                >\n                  <SimpleInput />\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={10} style={{ padding: 4 }}>\n                <p>Functions</p>\n              </Col>\n              <Col span={14}>\n                <Form.Item\n                  name=\"function_list_id\"\n                >\n                  <Select\n                    mode=\"tags\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Please select Function\"\n                  >\n                    {functionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n                  </Select>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </TcrbModal>\n      )\n    }\n\n    const openModalAddNewMenu = () => {\n      setModalTitle('Add new menu')\n      setModalString(<FormAddNewMenu />)\n      setVisible(true)\n    }\n\n    const addNewMenu = (values) => {\n      setVisibleFormAddNewMenu(false)\n      userAccessManagementStore.submitAddNewMenu(values)\n    }\n\n    const deactivateMenuSelect = (record) => {\n      userAccessManagementStore.submitDeleteMenu(record)\n    }\n\n    const openModalShowFunctionList = (functionList) => {\n      setModalType('')\n      setModalTitle('Function ')\n      addKeyToDataSource(functionList).then(result => {\n        setModalString(\n          <div>\n            <Table\n              bordered\n              dataSource={result}\n              columns={columnFunction}\n              size=\"small\"\n              pagination={false}\n            />\n          </div>\n        )\n      })\n      setVisible(true)\n    }\n\n    const renderFunction = (record) => {\n      return <div>\n        <a onClick={() => openModalShowFunctionList(record.functions)}>{record.functions.length} Function</a>\n      </div>\n    }\n\n    const viewMenuManage = (record) => {\n      userAccessManagementStore.menuSelected = record\n      userAccessManagementStore.nextPageIsManageMenu = true\n    }\n\n    const renderActionMenu = (record) => {\n\n      if (record.request_status == 'APPROVE') {\n        return (\n          <div style={{ textAlign: \"center\" }}>\n            <a onClick={() => viewMenuManage(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n              Edit\n                </a>\n            <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateMenuSelect(record)}>\n              <a style={{ color: '#FBA928' }}>Deactivate</a>\n            </TcrbPopconfirm>\n          </div>\n        )\n      } else if (record.request_status == 'PENDING') {\n        return null\n      } else if (record.request_status == 'REJECT') {\n        return null\n      }\n    }\n\n    const columnMenu = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Functions',\n        dataIndex: 'functions',\n        render: (text, record) => renderFunction(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionMenu(record)\n      }\n    ]\n\n    const columnFunction = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Function Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      }\n    ]\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            {/* <TcrbButton className=\"primary\" onClick={() => openModalAddNewMenu()} >Add Menu</TcrbButton> */}\n            <TcrbButton className=\"primary\" onClick={() => setVisibleFormAddNewMenu(true)} >Add Menu</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={menuList}\n          columns={columnMenu}\n          size=\"small\"\n        />\n        <FormAddNewDepartment\n          visible={visibleFormAddNewMenu}\n          onCreate={addNewMenu}\n          onCancel={() => {\n            setVisibleFormAddNewMenu(false);\n          }}\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewMenu()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default MenuList\n"]},"metadata":{},"sourceType":"module"}