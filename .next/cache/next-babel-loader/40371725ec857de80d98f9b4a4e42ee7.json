{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/otp-setup.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Input, Row, Col, Alert, Table } from 'antd';\nimport styled from 'styled-components';\nimport { inject, observer } from 'mobx-react';\nimport { withTranslation } from '../../i18n';\nimport SimpleModal from '../simple-modal';\nimport { TcrbButton } from '../antd-styles/styles';\nimport { toJS } from 'mobx';\nimport { addKeyToDataSource } from '../data-utility';\nvar StyledInput = styled(Input).withConfig({\n  displayName: \"otp-setup__StyledInput\",\n  componentId: \"y1xkpv-0\"\n})([\"background-color:unset !important;border:unset !important;border-bottom:1px solid black !important;box-shadow:none !important;.ant-input{text-align:right !important;background-color:unset !important;padding-right:8px !important;\", \"}.ant-input-suffix{width:50px !important;}\"], ''\n/* cursor:not-allowed !important; */\n);\n_c = StyledInput;\nvar OtpSetup = inject('businessParametersSetupStore')(observer(_s(function (props) {\n  _s();\n\n  var t = props.t,\n      businessParametersSetupStore = props.businessParametersSetupStore;\n\n  var _useState = useState(null),\n      expireOtp = _useState[0],\n      setExpire = _useState[1];\n\n  var _useState2 = useState(true),\n      visibleExpireEdit = _useState2[0],\n      setvisibleExpireEdit = _useState2[1];\n\n  var _useState3 = useState(false),\n      visibleExpireSubmit = _useState3[0],\n      setvisibleExpireSubmit = _useState3[1];\n\n  var _useState4 = useState(null),\n      newMaximumOtp = _useState4[0],\n      setNewMaximumOtp = _useState4[1];\n\n  var _useState5 = useState(true),\n      visibleEditMaximum = _useState5[0],\n      setvisibleEditMaximum = _useState5[1];\n\n  var _useState6 = useState(false),\n      visibleSubmitMaximum = _useState6[0],\n      setvisibleSubmitMaximum = _useState6[1];\n\n  var _useState7 = useState(false),\n      visible = _useState7[0],\n      setVisible = _useState7[1];\n\n  var _useState8 = useState(\"\"),\n      modalString = _useState8[0],\n      setModal = _useState8[1];\n\n  var _useState9 = useState(true),\n      isReadOnlyInputExpiration = _useState9[0],\n      setIsReadOnlyInputExpiration = _useState9[1];\n\n  var _useState10 = useState(true),\n      isReadOnlyInputMaximum = _useState10[0],\n      setIsReadOnlyInputMaximum = _useState10[1];\n\n  var _useState11 = useState(false),\n      isDisableEditExpiration = _useState11[0],\n      setIsDisableEditExpiration = _useState11[1];\n\n  var _useState12 = useState(false),\n      isDisableEditMaximum = _useState12[0],\n      setIsDisabledEditMaximum = _useState12[1];\n\n  var _useState13 = useState([]),\n      dataSourceOtpPendingList = _useState13[0],\n      setDataSourceOtpPendingList = _useState13[1];\n\n  var _useState14 = useState(\"\"),\n      titleModal = _useState14[0],\n      setTitleModal = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      modalType = _useState15[0],\n      setModalType = _useState15[1];\n\n  var _useState16 = useState(\"\"),\n      textCancel = _useState16[0],\n      setTextCancel = _useState16[1];\n\n  var _useState17 = useState(\"\"),\n      textOk = _useState17[0],\n      setTextOk = _useState17[1];\n\n  var _useState18 = useState(\"\"),\n      typeUpdate = _useState18[0],\n      setTypeUpdate = _useState18[1];\n\n  useEffect(function () {\n    if (!businessParametersSetupStore.responseGetOtpValue || businessParametersSetupStore.fetchingGetOtp == null) {\n      var data = {\n        otpParamsField: \"OTP_EXPIRE_TIME,OTP_MAXIMUM_ENTERED,OTP_TOKEN_EXPIRE_TIME\"\n      };\n      businessParametersSetupStore.getOTPdata(data);\n    }\n\n    businessParametersSetupStore.responseUpdateOtp = null;\n    businessParametersSetupStore.getDataOtpPendingList();\n  }, []);\n  useEffect(function () {\n    if (businessParametersSetupStore.responseGetOtpPending != null) {\n      var newRequestOtpPending = businessParametersSetupStore.responseGetOtpPending;\n\n      for (var index = 0; index < newRequestOtpPending.length; index++) {\n        var dataToJs = JSON.parse(newRequestOtpPending[index].data);\n\n        switch (newRequestOtpPending[index].change_sub_type) {\n          case \"OTP_EXPIRE_TIME\":\n            newRequestOtpPending[index].currentData = dataToJs.Current.OTP_EXPIRE_TIME;\n            newRequestOtpPending[index].newData = dataToJs.New.OTP_EXPIRE_TIME;\n            break;\n\n          case \"OTP_MAXIMUM_ENTERED\":\n            newRequestOtpPending[index].currentData = dataToJs.Current.OTP_MAXIMUM_ENTERED;\n            newRequestOtpPending[index].newData = dataToJs.New.OTP_MAXIMUM_ENTERED;\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      console.log(toJS(newRequestOtpPending));\n      addKeyToDataSource(newRequestOtpPending).then(function (result) {\n        setDataSourceOtpPendingList(result);\n      });\n    }\n  }, [businessParametersSetupStore.responseGetOtpPending]);\n  useEffect(function () {\n    var newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue));\n\n    if (newProps && newProps != undefined) {\n      if (!expireOtp || !newMaximumOtp) {\n        var tmpExpire = newProps.find(function (e) {\n          return e.Name == \"OTP_EXPIRE_TIME\";\n        });\n        var tmpMaximum = newProps.find(function (e) {\n          return e.Name == \"OTP_MAXIMUM_ENTERED\";\n        });\n        setExpire(tmpExpire.Value);\n        setNewMaximumOtp(tmpMaximum.Value);\n      }\n    }\n  }, [businessParametersSetupStore.responseGetOtpValue]);\n  useEffect(function () {\n    var newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseUpdateOtp));\n    var fetch = businessParametersSetupStore.fetchingUpdateOtp;\n    var error = businessParametersSetupStore.errorUpdateOtp;\n\n    if (newProps && !fetch && !error) {\n      setVisible(true);\n      setModal(__jsx(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 20\n        }\n      }, \"Update\", \" \", typeUpdate, \" \", \"Success\", __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 92\n        }\n      }), \"Your changes will take effect after being approved.\"));\n      setTitleModal(\"Success\");\n      setModalType(\"close\");\n      setTextCancel(\"close\");\n    } else if (error) {\n      setVisible(true);\n      setModal(__jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          color: 'red'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 20\n        }\n      }, \"Error Message : \", \" \", newProps.userMessage));\n      setTitleModal(\"Error\");\n      setModalType(\"error\");\n      setTextCancel(\"close\");\n    }\n  }, [businessParametersSetupStore.responseUpdateOtp]);\n\n  var _onClickExpiration = function _onClickExpiration() {\n    setIsReadOnlyInputExpiration(false);\n    var expire = document.getElementById(\"otp-expiration-period\");\n    expire.style.color = \"orange\";\n    expire.focus();\n    setvisibleExpireEdit(false);\n    setvisibleExpireSubmit(true);\n    setIsDisabledEditMaximum(true);\n  };\n\n  var _onClickMaximumRetry = function _onClickMaximumRetry() {\n    setIsReadOnlyInputMaximum(false);\n    var maximum = document.getElementById(\"otp-maximum-retrying\");\n    maximum.style.color = \"orange\";\n    maximum.focus();\n    setvisibleEditMaximum(false);\n    setvisibleSubmitMaximum(true);\n    setIsDisableEditExpiration(true);\n  };\n\n  var _openPopup = function _openPopup(text) {\n    setVisible(true);\n\n    if (text == \"maximum\") {\n      var currentMaximumOtp = getValueFromStore(\"maximum\");\n\n      if (newMaximumOtp == currentMaximumOtp) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Maximum is not change \", __jsx(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 106\n          }\n        }), \"value : \", newMaximumOtp));\n        setTitleModal(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else if (!newMaximumOtp) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Maximum is not empty\"));\n        setTitleModal(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 22\n          }\n        }, \"Confirm update OTP \", text, \" Retrying !!!\", __jsx(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 97\n          }\n        }), currentMaximumOtp, \" to \", newMaximumOtp));\n        setTitleModal(\"Confirm\");\n        setModalType(\"confirm\");\n        setTextCancel(\"cancel\");\n        setTextOk(\"confirm\");\n      }\n    } else {\n      var currentExpireOtp = getValueFromStore(\"expire\");\n\n      if (expireOtp == currentExpireOtp) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Expire is not change \", __jsx(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 105\n          }\n        }), \"value : \", expireOtp));\n        setTitleModal(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else if (!expireOtp) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Expire is not empty\"));\n        setTitleModal(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 22\n          }\n        }, \"Confirm update OTP \", text, \" Period !!!\", __jsx(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 95\n          }\n        }), currentExpireOtp, \" to \", expireOtp));\n        setTitleModal(\"Confirm\");\n        setModalType(\"confirm\");\n        setTextCancel(\"cancel\");\n        setTextOk(\"confirm\");\n      }\n    }\n  };\n\n  var _setUnfocus = function _setUnfocus(type) {\n    if (type == \"expire\") {\n      var expire = document.getElementById(\"otp-expiration-period\");\n      expire.style.color = \"rgba(0, 0, 0, 0.65)\";\n      expire.blur();\n    } else {\n      var maximum = document.getElementById(\"otp-maximum-retrying\");\n      maximum.style.color = \"rgba(0, 0, 0, 0.65)\";\n      maximum.focus();\n    }\n  };\n\n  var _onConfirm = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var currentMaximumOtp, currentExpireOtp, data, _data;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              currentMaximumOtp = getValueFromStore(\"maximum\");\n              currentExpireOtp = getValueFromStore(\"expire\");\n\n              if (!(currentMaximumOtp != newMaximumOtp)) {\n                _context.next = 14;\n                break;\n              }\n\n              data = {\n                currentData: {\n                  OTP_MAXIMUM_ENTERED: currentMaximumOtp\n                },\n                newData: {\n                  OTP_MAXIMUM_ENTERED: newMaximumOtp\n                },\n                maker_id: 51\n              };\n              setVisible(false);\n              setIsReadOnlyInputMaximum(true);\n              setvisibleEditMaximum(true);\n              setvisibleSubmitMaximum(false);\n              setIsDisableEditExpiration(false);\n\n              _setUnfocus(\"maximum\");\n\n              setNewMaximumOtp(currentMaximumOtp);\n              setTypeUpdate(\"Maximum OTP\");\n              _context.next = 14;\n              return businessParametersSetupStore.updateOTPdata(data);\n\n            case 14:\n              if (!(currentExpireOtp != expireOtp)) {\n                _context.next = 26;\n                break;\n              }\n\n              _data = {\n                currentData: {\n                  OTP_EXPIRE_TIME: currentExpireOtp\n                },\n                newData: {\n                  OTP_EXPIRE_TIME: expireOtp\n                },\n                maker_id: 59\n              };\n              setVisible(false);\n              setIsReadOnlyInputExpiration(true);\n              setvisibleExpireEdit(true);\n              setvisibleExpireSubmit(false);\n              setIsDisabledEditMaximum(false);\n\n              _setUnfocus(\"expire\");\n\n              setExpire(currentExpireOtp);\n              setTypeUpdate(\"Expire OTP\");\n              _context.next = 26;\n              return businessParametersSetupStore.updateOTPdata(_data);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function _onConfirm() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var columnOtpPending = [{\n    title: 'Change Type',\n    dataIndex: 'change_sub_type'\n  }, {\n    title: 'Current Value',\n    dataIndex: 'currentData'\n  }, {\n    title: 'New Value',\n    dataIndex: 'newData'\n  }];\n\n  var getValueFromStore = function getValueFromStore(type) {\n    var old_data = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue));\n\n    if (type == \"expire\") {\n      var tmpExpire = old_data.find(function (oldData) {\n        return oldData.Name == \"OTP_EXPIRE_TIME\";\n      });\n      return tmpExpire.Value;\n    } else {\n      var tmpMaximum = old_data.find(function (oldData) {\n        return oldData.Name == \"OTP_MAXIMUM_ENTERED\";\n      });\n      return tmpMaximum.Value;\n    }\n  };\n\n  var _onCancel = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var currentMaximum, currentExpire, expire, maximum;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              setVisible(false);\n              currentMaximum = getValueFromStore(\"maximum\");\n              currentExpire = getValueFromStore(\"expire\");\n              setNewMaximumOtp(currentMaximum);\n              setIsReadOnlyInputMaximum(true);\n              setvisibleEditMaximum(true);\n              setvisibleSubmitMaximum(false);\n              setIsDisableEditExpiration(false);\n              setExpire(currentExpire);\n              setIsReadOnlyInputExpiration(true);\n              setvisibleExpireEdit(true);\n              setvisibleExpireSubmit(false);\n              setIsDisabledEditMaximum(false);\n              expire = document.getElementById(\"otp-expiration-period\");\n              maximum = document.getElementById(\"otp-maximum-retrying\");\n              expire.style.color = \"rgba(0, 0, 0, 0.65)\";\n              expire.blur();\n              maximum.style.color = \"rgba(0, 0, 0, 0.65)\";\n              maximum.blur();\n              _context2.next = 21;\n              return businessParametersSetupStore.resetOTPrequest();\n\n            case 21:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function _onCancel() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [8, 8],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, __jsx(StyledInput, {\n    readOnly: isReadOnlyInputMaximum,\n    id: \"otp-maximum-retrying\",\n    disabled: isDisableEditMaximum,\n    value: newMaximumOtp,\n    onChange: function onChange(e) {\n      return setNewMaximumOtp(e.target.value);\n    },\n    prefix: t(\"otpMaximumRetrying\"),\n    suffix: t(\"otpTime\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 13\n    }\n  }, visibleEditMaximum && __jsx(TcrbButton, {\n    disabled: isDisableEditMaximum,\n    onClick: function onClick() {\n      return _onClickMaximumRetry();\n    },\n    className: \"default\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 38\n    }\n  }, t(\"edit\")), visibleSubmitMaximum && __jsx(TcrbButton, {\n    onClick: function onClick() {\n      return _openPopup(\"maximum\");\n    },\n    className: \"default\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 40\n    }\n  }, t(\"submit\")))), __jsx(Row, {\n    gutter: [8, 8],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 10,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }\n  }, __jsx(StyledInput, {\n    readOnly: isReadOnlyInputExpiration,\n    disabled: isDisableEditExpiration,\n    id: \"otp-expiration-period\",\n    value: expireOtp,\n    onChange: function onChange(e) {\n      return setExpire(e.target.value);\n    },\n    prefix: t(\"otpExpirationPeriod\"),\n    suffix: t(\"otpSecond\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 15\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 13\n    }\n  }, visibleExpireEdit && __jsx(TcrbButton, {\n    disabled: isDisableEditExpiration,\n    onClick: function onClick() {\n      return _onClickExpiration();\n    },\n    className: \"default\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 37\n    }\n  }, t(\"edit\")), visibleExpireSubmit && __jsx(TcrbButton, {\n    onClick: function onClick() {\n      return _openPopup(\"expire\");\n    },\n    className: \"default\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 39\n    }\n  }, t(\"submit\")))), __jsx(Row, {\n    gutter: [8, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 13\n    }\n  }, __jsx(Table, {\n    bordered: true,\n    dataSource: dataSourceOtpPendingList,\n    columns: columnOtpPending,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 15\n    }\n  }))), __jsx(SimpleModal, {\n    title: titleModal,\n    type: modalType,\n    onOk: function onOk() {\n      return _onConfirm();\n    },\n    onCancel: function onCancel() {\n      return _onCancel();\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 11\n    }\n  }));\n}, \"8Sjy+Rn9FrnG5bPvEnwImY6Smk4=\")));\nexport default withTranslation('common')(OtpSetup);\n\nvar _c;\n\n$RefreshReg$(_c, \"StyledInput\");","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/otp-setup.js"],"names":["React","useEffect","useRef","useState","Input","Row","Col","Alert","Table","styled","inject","observer","withTranslation","SimpleModal","TcrbButton","toJS","addKeyToDataSource","StyledInput","OtpSetup","props","t","businessParametersSetupStore","expireOtp","setExpire","visibleExpireEdit","setvisibleExpireEdit","visibleExpireSubmit","setvisibleExpireSubmit","newMaximumOtp","setNewMaximumOtp","visibleEditMaximum","setvisibleEditMaximum","visibleSubmitMaximum","setvisibleSubmitMaximum","visible","setVisible","modalString","setModal","isReadOnlyInputExpiration","setIsReadOnlyInputExpiration","isReadOnlyInputMaximum","setIsReadOnlyInputMaximum","isDisableEditExpiration","setIsDisableEditExpiration","isDisableEditMaximum","setIsDisabledEditMaximum","dataSourceOtpPendingList","setDataSourceOtpPendingList","titleModal","setTitleModal","modalType","setModalType","textCancel","setTextCancel","textOk","setTextOk","typeUpdate","setTypeUpdate","responseGetOtpValue","fetchingGetOtp","data","otpParamsField","getOTPdata","responseUpdateOtp","getDataOtpPendingList","responseGetOtpPending","newRequestOtpPending","index","length","dataToJs","JSON","parse","change_sub_type","currentData","Current","OTP_EXPIRE_TIME","newData","New","OTP_MAXIMUM_ENTERED","console","log","then","result","newProps","stringify","undefined","tmpExpire","find","e","Name","tmpMaximum","Value","fetch","fetchingUpdateOtp","error","errorUpdateOtp","textAlign","color","userMessage","_onClickExpiration","expire","document","getElementById","style","focus","_onClickMaximumRetry","maximum","_openPopup","text","currentMaximumOtp","getValueFromStore","currentExpireOtp","_setUnfocus","type","blur","_onConfirm","maker_id","updateOTPdata","columnOtpPending","title","dataIndex","old_data","oldData","_onCancel","currentMaximum","currentExpire","resetOTPrequest","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { Input, Row, Col, Alert, Table } from 'antd'\nimport styled from 'styled-components'\nimport { inject, observer } from 'mobx-react'\nimport { withTranslation } from '../../i18n'\nimport SimpleModal from '../simple-modal'\nimport { TcrbButton } from '../antd-styles/styles'\nimport { toJS } from 'mobx'\nimport { addKeyToDataSource } from '../data-utility'\n\nconst StyledInput = styled(Input)`\n  background-color: unset !important;\n  border: unset !important;\n  border-bottom: 1px solid black !important;\n  box-shadow: none !important;\n  .ant-input{\n    text-align: right !important;\n    background-color: unset !important;\n    padding-right:8px !important;\n    ${'' /* cursor:not-allowed !important; */}\n  }\n  .ant-input-suffix{\n            width:50px !important;\n          }\n`\n\nconst OtpSetup =\n  inject('businessParametersSetupStore')\n    (observer((props) => {\n      const { t, businessParametersSetupStore } = props\n      const [expireOtp, setExpire] = useState(null)\n      const [visibleExpireEdit, setvisibleExpireEdit] = useState(true)\n      const [visibleExpireSubmit, setvisibleExpireSubmit] = useState(false)\n\n      const [newMaximumOtp, setNewMaximumOtp] = useState(null)\n      const [visibleEditMaximum, setvisibleEditMaximum] = useState(true)\n      const [visibleSubmitMaximum, setvisibleSubmitMaximum] = useState(false)\n\n      const [visible, setVisible] = useState(false)\n      const [modalString, setModal] = useState(\"\")\n      const [isReadOnlyInputExpiration, setIsReadOnlyInputExpiration] = useState(true)\n      const [isReadOnlyInputMaximum, setIsReadOnlyInputMaximum] = useState(true)\n      const [isDisableEditExpiration, setIsDisableEditExpiration] = useState(false)\n      const [isDisableEditMaximum, setIsDisabledEditMaximum] = useState(false)\n      const [dataSourceOtpPendingList, setDataSourceOtpPendingList] = useState([])\n\n      const [titleModal, setTitleModal] = useState(\"\")\n      const [modalType, setModalType] = useState(\"\")\n      const [textCancel, setTextCancel] = useState(\"\")\n      const [textOk, setTextOk] = useState(\"\")\n      const [typeUpdate, setTypeUpdate] = useState(\"\")\n\n      useEffect(() => {\n        if (!businessParametersSetupStore.responseGetOtpValue || businessParametersSetupStore.fetchingGetOtp == null) {\n          let data = { otpParamsField: \"OTP_EXPIRE_TIME,OTP_MAXIMUM_ENTERED,OTP_TOKEN_EXPIRE_TIME\" }\n          businessParametersSetupStore.getOTPdata(data)\n        }\n        businessParametersSetupStore.responseUpdateOtp = null\n        businessParametersSetupStore.getDataOtpPendingList()\n      }, [])\n\n      useEffect(() => {\n        if (businessParametersSetupStore.responseGetOtpPending != null) {\n          let newRequestOtpPending = businessParametersSetupStore.responseGetOtpPending\n          for (let index = 0; index < newRequestOtpPending.length; index++) {\n            let dataToJs = JSON.parse(newRequestOtpPending[index].data)\n            switch (newRequestOtpPending[index].change_sub_type) {\n              case \"OTP_EXPIRE_TIME\":\n                newRequestOtpPending[index].currentData = dataToJs.Current.OTP_EXPIRE_TIME\n                newRequestOtpPending[index].newData = dataToJs.New.OTP_EXPIRE_TIME\n                break;\n              case \"OTP_MAXIMUM_ENTERED\":\n                newRequestOtpPending[index].currentData = dataToJs.Current.OTP_MAXIMUM_ENTERED\n                newRequestOtpPending[index].newData = dataToJs.New.OTP_MAXIMUM_ENTERED\n                break;\n\n              default:\n                break;\n            }\n          }\n          console.log(toJS(newRequestOtpPending))\n          addKeyToDataSource(newRequestOtpPending).then(result => {\n            setDataSourceOtpPendingList(result)\n          })\n        }\n\n      }, [businessParametersSetupStore.responseGetOtpPending])\n      useEffect(() => {\n\n        let newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue))\n        if (newProps && newProps != undefined) {\n          if (!expireOtp || !newMaximumOtp) {\n            let tmpExpire = newProps.find(e => e.Name == \"OTP_EXPIRE_TIME\")\n            let tmpMaximum = newProps.find(e => e.Name == \"OTP_MAXIMUM_ENTERED\")\n            setExpire(tmpExpire.Value)\n            setNewMaximumOtp(tmpMaximum.Value)\n          }\n        }\n      }, [businessParametersSetupStore.responseGetOtpValue])\n\n      useEffect(() => {\n        let newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseUpdateOtp))\n        let fetch = businessParametersSetupStore.fetchingUpdateOtp\n        let error = businessParametersSetupStore.errorUpdateOtp\n        if ((newProps && !fetch) && !error) {\n          setVisible(true)\n          setModal(<div style={{ textAlign: 'center' }}>Update{\" \"}{typeUpdate}{\" \"}Success<br />Your changes will take effect after being approved.</div>)\n          setTitleModal(\"Success\")\n          setModalType(\"close\")\n          setTextCancel(\"close\")\n        } else if (error) {\n          setVisible(true)\n          setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error Message : {\" \"}{newProps.userMessage}</div>)\n          setTitleModal(\"Error\")\n          setModalType(\"error\")\n          setTextCancel(\"close\")\n        }\n\n      }, [businessParametersSetupStore.responseUpdateOtp])\n\n      const _onClickExpiration = () => {\n        setIsReadOnlyInputExpiration(false)\n        let expire = document.getElementById(\"otp-expiration-period\")\n        expire.style.color = \"orange\"\n        expire.focus()\n        setvisibleExpireEdit(false)\n        setvisibleExpireSubmit(true)\n        setIsDisabledEditMaximum(true)\n      }\n\n      const _onClickMaximumRetry = () => {\n        setIsReadOnlyInputMaximum(false)\n        let maximum = document.getElementById(\"otp-maximum-retrying\")\n        maximum.style.color = \"orange\"\n        maximum.focus()\n        setvisibleEditMaximum(false)\n        setvisibleSubmitMaximum(true)\n        setIsDisableEditExpiration(true)\n      }\n\n      const _openPopup = (text) => {\n        setVisible(true)\n        if (text == \"maximum\") {\n          let currentMaximumOtp = getValueFromStore(\"maximum\")\n          if (newMaximumOtp == currentMaximumOtp) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Maximum is not change <br />value : {newMaximumOtp}</div>)\n            setTitleModal(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else if (!newMaximumOtp) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Maximum is not empty</div>)\n            setTitleModal(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else {\n            setModal(<div style={{ textAlign: 'center' }}>Confirm update OTP {text} Retrying !!!<br />{currentMaximumOtp} to {newMaximumOtp}</div>)\n            setTitleModal(\"Confirm\")\n            setModalType(\"confirm\")\n            setTextCancel(\"cancel\")\n            setTextOk(\"confirm\")\n          }\n        }\n        else {\n          let currentExpireOtp = getValueFromStore(\"expire\")\n          if (expireOtp == currentExpireOtp) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Expire is not change <br />value : {expireOtp}</div>)\n            setTitleModal(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else if (!expireOtp) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Expire is not empty</div>)\n            setTitleModal(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else {\n            setModal(<div style={{ textAlign: 'center' }}>Confirm update OTP {text} Period !!!<br />{currentExpireOtp} to {expireOtp}</div>)\n            setTitleModal(\"Confirm\")\n            setModalType(\"confirm\")\n            setTextCancel(\"cancel\")\n            setTextOk(\"confirm\")\n          }\n        }\n\n      }\n\n      const _setUnfocus = (type) => {\n        if (type == \"expire\") {\n          let expire = document.getElementById(\"otp-expiration-period\")\n          expire.style.color = \"rgba(0, 0, 0, 0.65)\"\n          expire.blur()\n        } else {\n          let maximum = document.getElementById(\"otp-maximum-retrying\")\n          maximum.style.color = \"rgba(0, 0, 0, 0.65)\"\n          maximum.focus()\n        }\n      }\n\n      const _onConfirm = async () => {\n        let currentMaximumOtp = getValueFromStore(\"maximum\")\n        let currentExpireOtp = getValueFromStore(\"expire\")\n        if (currentMaximumOtp != newMaximumOtp) {\n\n          let data = {\n            currentData: {\n              OTP_MAXIMUM_ENTERED: currentMaximumOtp\n            },\n            newData: {\n              OTP_MAXIMUM_ENTERED: newMaximumOtp\n            },\n            maker_id: 51\n          }\n          setVisible(false)\n          setIsReadOnlyInputMaximum(true)\n          setvisibleEditMaximum(true)\n          setvisibleSubmitMaximum(false)\n          setIsDisableEditExpiration(false)\n          _setUnfocus(\"maximum\")\n          setNewMaximumOtp(currentMaximumOtp)\n          setTypeUpdate(\"Maximum OTP\")\n          await businessParametersSetupStore.updateOTPdata(data)\n\n        }\n        if (currentExpireOtp != expireOtp) {\n          let data = {\n            currentData: {\n              OTP_EXPIRE_TIME: currentExpireOtp\n            },\n            newData: {\n              OTP_EXPIRE_TIME: expireOtp\n            },\n            maker_id: 59\n          }\n\n          setVisible(false)\n          setIsReadOnlyInputExpiration(true)\n          setvisibleExpireEdit(true)\n          setvisibleExpireSubmit(false)\n          setIsDisabledEditMaximum(false)\n          _setUnfocus(\"expire\")\n          setExpire(currentExpireOtp)\n          setTypeUpdate(\"Expire OTP\")\n          await businessParametersSetupStore.updateOTPdata(data)\n\n        }\n      }\n\n      const columnOtpPending = [\n        {\n          title: 'Change Type',\n          dataIndex: 'change_sub_type',\n        },\n        {\n          title: 'Current Value',\n          dataIndex: 'currentData',\n        },\n        {\n          title: 'New Value',\n          dataIndex: 'newData',\n        }\n      ]\n      const getValueFromStore = (type) => {\n        let old_data = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue))\n        if (type == \"expire\") {\n          let tmpExpire = old_data.find(oldData => oldData.Name == \"OTP_EXPIRE_TIME\")\n          return tmpExpire.Value\n        } else {\n          let tmpMaximum = old_data.find(oldData => oldData.Name == \"OTP_MAXIMUM_ENTERED\")\n          return tmpMaximum.Value\n        }\n      }\n\n      const _onCancel = async () => {\n        setVisible(false)\n        let currentMaximum = getValueFromStore(\"maximum\")\n        let currentExpire = getValueFromStore(\"expire\")\n\n        setNewMaximumOtp(currentMaximum)\n        setIsReadOnlyInputMaximum(true)\n        setvisibleEditMaximum(true)\n        setvisibleSubmitMaximum(false)\n        setIsDisableEditExpiration(false)\n\n        setExpire(currentExpire)\n        setIsReadOnlyInputExpiration(true)\n        setvisibleExpireEdit(true)\n        setvisibleExpireSubmit(false)\n        setIsDisabledEditMaximum(false)\n\n        let expire = document.getElementById(\"otp-expiration-period\")\n        let maximum = document.getElementById(\"otp-maximum-retrying\")\n        expire.style.color = \"rgba(0, 0, 0, 0.65)\"\n        expire.blur()\n        maximum.style.color = \"rgba(0, 0, 0, 0.65)\"\n        maximum.blur()\n\n        await businessParametersSetupStore.resetOTPrequest()\n      }\n\n      return (\n        <div>\n          <Row gutter={[8, 8]}>\n            <Col span={10}>\n              <StyledInput readOnly={isReadOnlyInputMaximum} id={\"otp-maximum-retrying\"} disabled={isDisableEditMaximum} value={newMaximumOtp} onChange={(e) => setNewMaximumOtp(e.target.value)} prefix={t(\"otpMaximumRetrying\")} suffix={t(\"otpTime\")} />\n            </Col>\n            <Col span={6}>\n              {visibleEditMaximum && <TcrbButton disabled={isDisableEditMaximum} onClick={() => _onClickMaximumRetry()} className=\"default\">{t(\"edit\")}</TcrbButton>}\n              {visibleSubmitMaximum && <TcrbButton onClick={() => _openPopup(\"maximum\")} className=\"default\">{t(\"submit\")}</TcrbButton>}\n            </Col>\n          </Row>\n          <Row gutter={[8, 8]}>\n            <Col span={10}>\n              <StyledInput readOnly={isReadOnlyInputExpiration} disabled={isDisableEditExpiration} id={\"otp-expiration-period\"} value={expireOtp} onChange={(e) => setExpire(e.target.value)} prefix={t(\"otpExpirationPeriod\")} suffix={t(\"otpSecond\")} />\n            </Col>\n            <Col span={6}>\n              {visibleExpireEdit && <TcrbButton disabled={isDisableEditExpiration} onClick={() => _onClickExpiration()} className=\"default\">{t(\"edit\")}</TcrbButton>}\n              {visibleExpireSubmit && <TcrbButton onClick={() => _openPopup(\"expire\")} className=\"default\">{t(\"submit\")}</TcrbButton>}\n            </Col>\n          </Row>\n          <Row gutter={[8, 24]}>\n            <Col>\n              <Table\n                bordered\n                dataSource={dataSourceOtpPendingList}\n                columns={columnOtpPending}\n                size=\"small\"\n              />\n            </Col>\n\n          </Row>\n\n          <SimpleModal\n            title={titleModal}\n            type={modalType}\n            onOk={() => _onConfirm()}\n            onCancel={() => _onCancel()}\n            textCancel={textCancel}\n            textOk={textOk}\n            modalString={modalString}\n            visible={visible}\n          />\n        </div>\n      )\n    }))\n\nexport default withTranslation('common')(OtpSetup)\n"]},"metadata":{},"sourceType":"module"}