{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/role/role-list.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleModal from '../../simple-modal';\nimport SimpleInput from '../../simple-input';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility';\nvar roleName = null;\nvar RoleList = inject('userAccessManagementStore')(observer(_s(function (props) {\n  _s();\n\n  var userAccessManagementStore = props.userAccessManagementStore;\n\n  var _useState = useState([]),\n      roleList = _useState[0],\n      setRoleList = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      modalTitle = _useState2[0],\n      setModalTitle = _useState2[1];\n\n  var _useState3 = useState(\"Submit\"),\n      textOk = _useState3[0],\n      settextOk = _useState3[1];\n\n  var _useState4 = useState(\"Cancel\"),\n      textCancel = _useState4[0],\n      settextCancel = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      modalString = _useState5[0],\n      setmodalString = _useState5[1];\n\n  var _useState6 = useState('confirm'),\n      modalType = _useState6[0],\n      setModalType = _useState6[1];\n\n  var _useState7 = useState(false),\n      visible = _useState7[0],\n      setVisible = _useState7[1];\n\n  var _useState8 = useState(''),\n      editingKey = _useState8[0],\n      setEditingKey = _useState8[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  useEffect(function () {\n    userAccessManagementStore.getDataRole();\n  }, []);\n  useEffect(function () {\n    if (userAccessManagementStore.roleList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.roleList).then(function (result) {\n        setRoleList(result);\n      });\n    }\n  }, [userAccessManagementStore.roleList]);\n\n  var isEditing = function isEditing(record) {\n    return record.key === editingKey;\n  };\n\n  var edit = function edit(record) {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  var EditableCell = function EditableCell(_ref) {\n    var editing = _ref.editing,\n        dataIndex = _ref.dataIndex,\n        title = _ref.title,\n        inputType = _ref.inputType,\n        record = _ref.record,\n        index = _ref.index,\n        children = _ref.children,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: \"Please Input \".concat(title, \"!\")\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }, __jsx(Input, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    })) : children);\n  };\n\n  var FormAddNewRole = function FormAddNewRole() {\n    return __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, \"Role Name\")), __jsx(Col, {\n      span: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, __jsx(SimpleInput, {\n      onChange: function onChange(value) {\n        return roleName = value;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  var openModalAddNewRole = function openModalAddNewRole() {\n    setModalTitle('Add new role');\n    setmodalString(__jsx(FormAddNewRole, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  var addNewRole = function addNewRole() {\n    //waiting call api\n    setVisible(false);\n    var request = {\n      name: roleName\n    };\n    userAccessManagementStore.submitAddNewRole(request);\n  };\n\n  var submitEditRole = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(key) {\n      var row, index, request;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return form.validateFields();\n\n            case 2:\n              row = _context.sent;\n              index = roleList.findIndex(function (item) {\n                return key === item.key;\n              });\n              request = {\n                newData: {\n                  name: row.name\n                },\n                currentData: roleList[index]\n              };\n              userAccessManagementStore.updateFunction(request);\n              setEditingKey('');\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function submitEditRole(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var renderActionRole = function renderActionRole(record) {\n    var editable = isEditing(record);\n\n    if (record.request_status === 'APPROVE') {\n      return editable ? __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: function onConfirm() {\n          return submitEditRole(record.key);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: function onConfirm() {\n          return cancelEditFunction();\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 15\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: function onClick() {\n          return edit(record);\n        },\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: function onConfirm() {\n          return deactivateFunctionSelect(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status === 'PENDING') {\n      return null;\n    } else if (record.request_status === 'REJECT') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  var columnRole = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(record.status, record.request_status);\n    }\n  }, {\n    title: 'Role Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: function render(text, record) {\n      return renderActionRole(record);\n    }\n  }];\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      return openModalAddNewRole();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"Add Role\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: roleList,\n    columns: columnRole,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: function onOk() {\n      return addNewRole();\n    },\n    onCancel: function onCancel() {\n      return setVisible(false);\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }));\n}, \"8T8+4t8kqrJwDKgZDcAZcD5W4bY=\", false, function () {\n  return [Form.useForm];\n})));\nexport default RoleList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/role/role-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","SimpleModal","SimpleInput","checkDefaultStatus","addKeyToDataSource","roleName","RoleList","props","userAccessManagementStore","roleList","setRoleList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setVisible","editingKey","setEditingKey","useForm","form","getDataRole","length","then","result","isEditing","record","key","edit","setFieldsValue","name","status","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","margin","required","message","FormAddNewRole","value","openModalAddNewRole","addNewRole","request","submitAddNewRole","submitEditRole","validateFields","row","findIndex","item","newData","currentData","updateFunction","renderActionRole","editable","request_status","marginRight","cancelEditFunction","color","textAlign","deactivateFunctionSelect","columnRole","width","render","text"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleModal from '../../simple-modal'\nimport SimpleInput from '../../simple-input'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility'\nlet roleName = null\nconst RoleList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [roleList, setRoleList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n    const [editingKey, setEditingKey] = useState('')\n\n    const [form] = Form.useForm();\n\n    useEffect(() => {\n      userAccessManagementStore.getDataRole()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.roleList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.roleList).then(result => {\n          setRoleList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.roleList])\n\n    const isEditing = record => record.key === editingKey\n    const edit = record => {\n      form.setFieldsValue({\n        name: '',\n        status: record.status,\n        ...record,\n      });\n      setEditingKey(record.key);\n    }\n\n    const EditableCell = ({\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children,\n      ...restProps\n    }) => {\n      return (\n        <td {...restProps}>\n          {editing ? (\n            <Form.Item\n              name={dataIndex}\n              style={{\n                margin: 0\n              }}\n              rules={[\n                {\n                  required: true,\n                  message: `Please Input ${title}!`,\n                },\n              ]}\n            >\n              <Input />\n            </Form.Item>\n          ) : (\n              children\n            )\n          }\n        </td>\n      )\n    }\n\n    const FormAddNewRole = () => {\n      return (\n        <Row>\n          <Col span={10} >\n            <span>\n              Role Name\n            </span>\n          </Col>\n          <Col span={14}>\n            <SimpleInput onChange={(value) => roleName = value} />\n          </Col>\n        </Row>\n      )\n    }\n\n    const openModalAddNewRole = () => {\n      setModalTitle('Add new role')\n      setmodalString(<FormAddNewRole />)\n      setVisible(true)\n    }\n\n    const addNewRole = () => {\n      //waiting call api\n      setVisible(false)\n      let request = {\n        name: roleName\n      }\n      userAccessManagementStore.submitAddNewRole(request)\n    }\n\n    const submitEditRole = async (key) => {\n      const row = await form.validateFields()\n      const index = roleList.findIndex(item => key === item.key);\n      let request = {\n        newData: {\n          name: row.name\n        },\n        currentData: roleList[index]\n      }\n      userAccessManagementStore.updateFunction(request)\n      setEditingKey('');\n    }\n\n    const renderActionRole = (record) => {\n      const editable = isEditing(record);\n      if (record.request_status === 'APPROVE') {\n        return editable ? (\n          <span>\n            <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => submitEditRole(record.key)}>\n              <a style={{ marginRight: 8, }}>\n                Save\n                </a>\n            </TcrbPopconfirm>\n            <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={() => cancelEditFunction()}>\n              <a style={{ color: '#3e3e3e' }}>Cancel</a>\n            </TcrbPopconfirm>\n          </span>\n        ) : (\n            <div style={{ textAlign: \"center\" }}>\n              <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                Edit\n                </a>\n              <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateFunctionSelect(record)}>\n                <a style={{ color: '#FBA928' }}>Deactivate</a>\n              </TcrbPopconfirm>\n            </div>\n          );\n      } else if (record.request_status === 'PENDING') {\n        return null\n      } else if (record.request_status === 'REJECT') {\n        return null\n      }\n      else {\n        return null\n      }\n    }\n    const columnRole = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Role Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionRole(record)\n      }\n    ]\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddNewRole()} >Add Role</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={roleList}\n          columns={columnRole}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewRole()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default RoleList\n"]},"metadata":{},"sourceType":"module"}