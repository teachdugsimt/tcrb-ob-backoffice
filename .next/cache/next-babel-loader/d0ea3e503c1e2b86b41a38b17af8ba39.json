{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/test-lazy-loading.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// import React,{ lazy, useState } from 'react'\n// export default function TestLazyLoading() {\n//   return (\n//     <div>\n//     </div>\n//   )\n// }\nimport React, { lazy, useState } from 'react';\nimport shortid from 'shortid';\n\nvar importView = function importView(chartName) {\n  return lazy(function () {\n    return import(\"./charts/\".concat(chartName))[\"catch\"](function () {\n      return import(\"./charts/NullChart\");\n    });\n  });\n};\n\nvar data = [{\n  id: 'php',\n  label: 'php',\n  value: 372,\n  color: 'hsl(233, 70%, 50%)'\n}, {\n  id: 'scala',\n  label: 'scala',\n  value: 363,\n  color: 'hsl(15, 70%, 50%)'\n}, {\n  id: 'go',\n  label: 'go',\n  value: 597,\n  color: 'hsl(79, 70%, 50%)'\n}, {\n  id: 'css',\n  label: 'css',\n  value: 524,\n  color: 'hsl(142, 70%, 50%)'\n}, {\n  id: 'hack',\n  label: 'hack',\n  value: 514,\n  color: 'hsl(198, 70%, 50%)'\n}];\n\nvar ChartList = function ChartList(_ref) {\n  var charts = _ref.charts;\n  return Object.values(charts).map(function (Chart) {\n    return __jsx(Chart, {\n      key: shortid.generate(),\n      data: data,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 5\n      }\n    });\n  });\n};\n\n_c = ChartList;\nexport default function TestLazyLoading() {\n  _s();\n\n  var _useState = useState({}),\n      charts = _useState[0],\n      setCharts = _useState[1];\n\n  var addChart = function addChart(chartName) {\n    // Optional step: Chart is already loaded. Don't load again.\n    if (charts[chartName]) return;\n    var Chart = importView(chartName);\n    setCharts(function (charts) {\n      return _objectSpread(_objectSpread({}, charts), {}, _defineProperty({}, chartName, Chart));\n    });\n  };\n\n  var loadPieChart = function loadPieChart() {\n    return addChart('Pie');\n  };\n\n  var loadWaffleChart = function loadWaffleChart() {\n    return addChart('Waffle');\n  };\n\n  return __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"section\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    disabled: charts['Pie'],\n    onClick: loadPieChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Pie Chart\"), __jsx(\"button\", {\n    disabled: charts['Waffle'],\n    onClick: loadWaffleChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Waffle Chart\")), __jsx(\"section\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(React.Suspense, {\n    fallback: \"Loading charts...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, __jsx(ChartList, {\n    charts: charts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })))));\n}\n\n_s(TestLazyLoading, \"XL0CDAJPFDQVh9W5O4NtoyW1W3o=\");\n\n_c2 = TestLazyLoading;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ChartList\");\n$RefreshReg$(_c2, \"TestLazyLoading\");","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/test-lazy-loading.js"],"names":["React","lazy","useState","shortid","importView","chartName","data","id","label","value","color","ChartList","charts","Object","values","map","Chart","generate","TestLazyLoading","setCharts","addChart","loadPieChart","loadWaffleChart"],"mappings":"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","sourcesContent":["// import React,{ lazy, useState } from 'react'\n\n// export default function TestLazyLoading() {\n//   return (\n//     <div>\n\n//     </div>\n//   )\n// }\nimport React, { lazy, useState } from 'react';\nimport shortid from 'shortid';\n\nconst importView = chartName =>\n  lazy(() =>\n    import(`./charts/${chartName}`).catch(() => import(`./charts/NullChart`))\n  );\n\nconst data = [\n  {\n    id: 'php',\n    label: 'php',\n    value: 372,\n    color: 'hsl(233, 70%, 50%)'\n  },\n  {\n    id: 'scala',\n    label: 'scala',\n    value: 363,\n    color: 'hsl(15, 70%, 50%)'\n  },\n  {\n    id: 'go',\n    label: 'go',\n    value: 597,\n    color: 'hsl(79, 70%, 50%)'\n  },\n  {\n    id: 'css',\n    label: 'css',\n    value: 524,\n    color: 'hsl(142, 70%, 50%)'\n  },\n  {\n    id: 'hack',\n    label: 'hack',\n    value: 514,\n    color: 'hsl(198, 70%, 50%)'\n  }\n];\n\nconst ChartList = ({ charts }) =>\n  Object.values(charts).map(Chart => (\n    <Chart key={shortid.generate()} data={data} />\n  ));\n\nexport default function TestLazyLoading() {\n    const [charts, setCharts] = useState({});\n\n  const addChart = chartName => {\n    // Optional step: Chart is already loaded. Don't load again.\n    if (charts[chartName]) return;\n\n    const Chart = importView(chartName);\n    setCharts(charts => ({ ...charts, [chartName]: Chart }));\n  };\n  const loadPieChart = () => addChart('Pie');\n  const loadWaffleChart = () => addChart('Waffle');\n\n  return (\n    <main>\n      <section className=\"container\">\n        <button disabled={charts['Pie']} onClick={loadPieChart}>\n          Pie Chart\n        </button>\n        <button disabled={charts['Waffle']} onClick={loadWaffleChart}>\n          Waffle Chart\n        </button>\n      </section>\n      <section className=\"container\">\n        <React.Suspense fallback=\"Loading charts...\">\n          <div className=\"row\">\n            <ChartList charts={charts} />\n          </div>\n        </React.Suspense>\n      </section>\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}