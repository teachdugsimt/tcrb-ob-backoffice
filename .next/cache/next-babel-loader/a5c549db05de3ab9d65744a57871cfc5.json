{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action } from 'mobx';\nimport { StartupApi } from '../services';\nimport getGeneralApiProblem from '../services/api-integrations/ErrorHandler';\nlet CustomerServicesMenuStore = (_class = (_temp = class CustomerServicesMenuStore {\n  constructor() {\n    _initializerDefineProperty(this, \"citizenId\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"accountId\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"accountSelected\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"accountInfo\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"arrayAccountInfo\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"getData\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"setCitizenId\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"setAccountId\", _descriptor8, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"citizenId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"accountId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"accountSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"accountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"arrayAccountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"getData\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async citizenId => {\n      this.citizenId = {\n        idCard: citizenId\n      };\n      let tmp = await StartupApi.getAccountInfo(this.citizenId);\n      this.accountInfo = tmp; // if (tmp.ok) {\n      //   this.accountInfo = tmp.data\n      // } else {\n      //   let problem = getGeneralApiProblem(response)\n      // }\n    };\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"setCitizenId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.citizenId = {\n        idCard: id\n      };\n    };\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"setAccountId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.accountId = id;\n    };\n  }\n})), _class);\nexport default CustomerServicesMenuStore;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/customer-services-menu-store.js"],"names":["observable","action","StartupApi","getGeneralApiProblem","CustomerServicesMenuStore","citizenId","idCard","tmp","getAccountInfo","accountInfo","id","accountId"],"mappings":";;;;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAOC,oBAAP,MAAiC,2CAAjC;IAEMC,yB,sBAAN,MAAMA,yBAAN,CAAgC;AAAA;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AAAA,C,mFAC7BJ,U;;;;;WAAuB,E;;6EACvBA,U;;;;;WAAuB,E;;mFACvBA,U;;;;;WAA6B,E;;+EAC7BA,U;;;;;WAAyB,E;;oFACzBA,U;;;;;WAA8B,E;;2EAE9BC,M;;;;;WAAiB,MAAOI,SAAP,IAAqB;AACrC,WAAKA,SAAL,GAAiB;AAAEC,QAAAA,MAAM,EAAED;AAAV,OAAjB;AACA,UAAIE,GAAG,GAAG,MAAML,UAAU,CAACM,cAAX,CAA0B,KAAKH,SAA/B,CAAhB;AACA,WAAKI,WAAL,GAAmBF,GAAnB,CAHqC,CAIrC;AACA;AACA;AACA;AACA;AACD,K;;gFACAN,M;;;;;WAAuBS,EAAD,IAAQ;AAC7B,WAAKL,SAAL,GAAiB;AAAEC,QAAAA,MAAM,EAAEI;AAAV,OAAjB;AACD,K;;gFACAT,M;;;;;WAAuBS,EAAD,IAAQ;AAC7B,WAAKC,SAAL,GAAiBD,EAAjB;AACD,K;;;AAEH,eAAeN,yBAAf","sourcesContent":["import { observable, action } from 'mobx'\nimport { StartupApi } from '../services'\nimport getGeneralApiProblem from '../services/api-integrations/ErrorHandler'\n\nclass CustomerServicesMenuStore {\n  @observable citizenId = ''\n  @observable accountId = {}\n  @observable accountSelected = {}\n  @observable accountInfo = []\n  @observable arrayAccountInfo = []\n\n  @action getData = async (citizenId) => {\n    this.citizenId = { idCard: citizenId }\n    let tmp = await StartupApi.getAccountInfo(this.citizenId)\n    this.accountInfo = tmp\n    // if (tmp.ok) {\n    //   this.accountInfo = tmp.data\n    // } else {\n    //   let problem = getGeneralApiProblem(response)\n    // }\n  }\n  @action setCitizenId = (id) => {\n    this.citizenId = { idCard: id }\n  }\n  @action setAccountId = (id) => {\n    this.accountId = id\n  }\n}\nexport default CustomerServicesMenuStore\n"]},"metadata":{},"sourceType":"module"}