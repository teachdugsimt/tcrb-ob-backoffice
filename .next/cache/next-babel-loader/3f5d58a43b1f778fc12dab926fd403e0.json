{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/department.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport SimpleModal from '../simple-modal';\nimport SimpleInput from '../simple-input';\nimport { addKeyToDataSource } from '../data-utility';\nconst {\n  Option\n} = Select;\nconst Department = inject('UserAccessManagementStore')(observer(props => {\n  const {\n    UserAccessManagementStore,\n    t\n  } = props;\n  const {\n    0: title,\n    1: settitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textEdit,\n    1: setTextEdit\n  } = useState(\"Add Section\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"initialState\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('');\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: visibleSection,\n    1: setVisibleSection\n  } = useState(false);\n  const {\n    0: mockDataDepartment,\n    1: setMockDataDepartment\n  } = useState([]);\n  const {\n    0: addSection,\n    1: setAddSection\n  } = useState(false);\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const {\n    0: editingKeySection,\n    1: setEditingKeySection\n  } = useState('');\n  const [form] = Form.useForm();\n\n  const isEditing = record => record.key === editingKey;\n\n  const isEditingSection = record => record.key === editingKeySection;\n\n  const children = [];\n\n  for (let i = 10; i < 36; i++) {\n    children.push(__jsx(Option, {\n      key: i.toString(36) + i,\n      value: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 23\n      }\n    }, \"Section_\", i));\n  }\n\n  const edit = record => {\n    console.log(record);\n    form.setFieldsValue(_objectSpread({\n      department: '',\n      section: record.section,\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const editSection = record => {\n    console.log(record);\n    form.setFieldsValue(_objectSpread({\n      section: '',\n      status: record.status\n    }, record));\n    setEditingKeySection(record.key);\n    /* setmodalString(\n       <div>\n        <ListSection />\n      </div>\n     ) */\n  };\n\n  const cancel = () => {\n    setEditingKey('');\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    // const inputNode = inputType === 'number' ? <InputNumber style={{ width: \"100%\" }} /> : <Input />;\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    })) : children);\n  };\n\n  const mockData = [{\n    status: '1',\n    department: 'Information Technology',\n    request_status: '1',\n    section: 3\n    /*  section: [{\n       section_name: 'section_1',\n       section_id: '01',\n       status: '1',\n       key: 1\n     },\n     {\n       section_name: 'section_2',\n       section_id: '02',\n       status: '1',\n       key: 2\n     },\n     {\n       section_name: 'section_3',\n       section_id: '03',\n       status: '1',\n       key: 3\n     }] */\n\n  }];\n  const mockSection = [{\n    section_name: 'section_1',\n    section_id: '01',\n    status: '1',\n    key: 1\n  }, {\n    section_name: 'section_2',\n    section_id: '02',\n    status: '1',\n    key: 2\n  }, {\n    section_name: 'section_3',\n    section_id: '03',\n    status: '1',\n    key: 3\n  }];\n  useEffect(() => {\n    //cal api\n    addKeyToDataSource(mockData).then(result => {\n      setMockDataDepartment(result);\n    });\n  }, []);\n  /*  const mockDataDepartment = [\n     {\n       status: '1',\n       department: 'Information Technology',\n       section: []\n     }\n   ] */\n\n  const save = async key => {\n    const row = await form.validateFields();\n    const newData = [...mockDataDepartment];\n    const index = newData.findIndex(item => key === item.key); //waiting for call api\n\n    if (index > -1) {\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setMockDataDepartment(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setMockDataDepartment(newData);\n      setEditingKey('');\n    } //config request api\n\n    /*  let request = {\n       currentData: item,\n       newData: { ...item, ...row }\n     } */\n    // setEditingKey('');\n\n  };\n\n  const renderActionDepartment = record => {\n    const editable = isEditing(record);\n\n    if (record.status === '1') {\n      return editable ? __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: () => save(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 17\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKey !== '',\n        onClick: () => edit(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 17\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 19\n        }\n      }, \"Deactivate\")));\n    } else if (record.status === '2') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const renderActionSectionAndTeam = record => {\n    console.log(record);\n    const editable = isEditingSection(record);\n\n    if (record.status === '1') {\n      return editable ? __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Save?\",\n        onConfirm: () => save(record.key),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 17\n        }\n      }, \"Save\")), __jsx(TcrbPopconfirm, {\n        title: \"Sure to cancel?\",\n        onConfirm: cancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 17\n        }\n      }, \"Cancel\"))) : __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        disabled: editingKeySection !== '',\n        onClick: () => editSection(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 17\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 17\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#3e3e3e'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 19\n        }\n      }, \"Deactivate\")));\n    } else if (record.status === '2') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  const renderSection = record => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 16\n      }\n    }, __jsx(\"a\", {\n      onClick: () => selectSection(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }\n    }, record.section, \" Section\"));\n  };\n\n  const checkStatus = record => {\n    if (record.status === '1') {\n      return __jsx(\"span\", {\n        style: {\n          color: green[6]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 18\n        }\n      }, \"Active\");\n    } else if (record.status === '2') {\n      return __jsx(\"span\", {\n        style: {\n          color: gold[6]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 18\n        }\n      }, \"Pending\");\n    } else {\n      return null;\n    }\n  };\n\n  const columnDepartment = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkStatus(record)\n  }, {\n    title: 'Department',\n    dataIndex: 'department',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Section / Team',\n    dataIndex: 'section',\n    render: (text, record) => renderSection(record)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionDepartment(record)\n  }];\n  const columnSection = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkStatus(record)\n  }, {\n    title: 'Section / Team',\n    dataIndex: 'section_name',\n    editable: true // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    render: (text, record) => renderActionSectionAndTeam(record)\n  }];\n  const mergedColumnsDepartment = columnDepartment.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  const mergedColumnsSection = columnSection.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: 'text',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditingSection(record)\n      })\n    });\n  });\n\n  const AddDepartment = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 11\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 15\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 17\n      }\n    }, \"Department Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 15\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => console.log(value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }\n    }))));\n  };\n\n  const handleChange = value => {\n    console.log(value);\n  };\n\n  const ModalSection = ({\n    visible\n  }) => {\n    const [form] = Form.useForm();\n    return __jsx(Modal, {\n      visible: visible,\n      title: \"Create a new collection\",\n      okText: \"Create\",\n      cancelText: \"Cancel\",\n      onCancel: () => {\n        setVisibleSection(false);\n      },\n      onOk: () => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      form: form,\n      component: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      components: {\n        body: {\n          cell: EditableCell\n        }\n      },\n      bordered: true,\n      dataSource: mockSection,\n      columns: mergedColumnsSection,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 15\n      }\n    })));\n  };\n\n  const SelectDepartment = props => {\n    return __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 15\n      }\n    }, \"Section / Team\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      mode: \"tags\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: value => handleChange(value),\n      defaultValue: [10, 11, 14],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 15\n      }\n    })));\n  };\n\n  const ListSection = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 11\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      flex: 100,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 448,\n        columnNumber: 15\n      }\n    }, __jsx(Form, {\n      form: form,\n      component: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 17\n      }\n    }, __jsx(Table, {\n      components: {\n        body: {\n          cell: EditableCell\n        }\n      },\n      bordered: true,\n      dataSource: mockSection,\n      columns: mergedColumnsSection,\n      size: \"small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 19\n      }\n    })))));\n  };\n\n  const selectSection = () => {\n    /* setModalType('edit')\n    settitle('Edit Section and Team')\n    setmodalString(\n      <div>\n        <ListSection />\n      </div>\n    )\n    setvisible(true) */\n    setVisibleSection(true);\n    /*  return (\n       <ModalSection visible={visibleSection} />\n     ) */\n  };\n\n  const openModalSection = () => {};\n\n  const openModalAddDepartment = () => {\n    setModalType('confirm');\n    settitle('Add New Department');\n    setmodalString(__jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 492,\n        columnNumber: 11\n      }\n    }, __jsx(AddDepartment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 13\n      }\n    }), __jsx(SelectDepartment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 13\n      }\n    })));\n    setvisible(true);\n  };\n\n  const confirmDepartmentSelected = () => {};\n\n  const onEditSection = () => {\n    setAddSection(true);\n    setModalType('');\n    setmodalString(__jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 11\n      }\n    }, __jsx(SelectDepartment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 13\n      }\n    }), __jsx(Row, {\n      justify: \"end\",\n      style: {\n        marginTop: 8\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 4,\n      style: {\n        textAlign: \"right\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511,\n        columnNumber: 15\n      }\n    }, __jsx(TcrbPopconfirm, {\n      title: \"Confirm to Add Section/Team to Department\",\n      onConfirm: () => {\n        /*waiting for api */\n      },\n      okText: \"Confirm\",\n      cancelText: \"No\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 19\n      }\n    }, \"Add\")))), __jsx(Divider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }\n    }), __jsx(ListSection, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 13\n      }\n    })));\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddDepartment(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 15\n    }\n  }, \"Add\"))), __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 11\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: mockDataDepartment,\n    columns: mergedColumnsDepartment,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 531,\n      columnNumber: 13\n    }\n  })), __jsx(SimpleModal, {\n    title: title,\n    type: modalType,\n    onOk: () => setvisible(false),\n    onCancel: () => setvisible(false),\n    onEdit: () => onEditSection(),\n    textCancel: textCancel,\n    textOk: textOk,\n    textEdit: textEdit,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 11\n    }\n  }), __jsx(ModalSection, {\n    visible: visibleSection,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 556,\n      columnNumber: 11\n    }\n  }));\n}));\nexport default Department;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/department.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","TcrbButton","TcrbPopconfirm","inject","observer","orange","green","gold","SimpleModal","SimpleInput","addKeyToDataSource","Option","Department","props","UserAccessManagementStore","t","title","settitle","textOk","settextOk","textEdit","setTextEdit","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","visibleSection","setVisibleSection","mockDataDepartment","setMockDataDepartment","addSection","setAddSection","editingKey","setEditingKey","editingKeySection","setEditingKeySection","form","useForm","isEditing","record","key","isEditingSection","children","i","push","toString","edit","console","log","setFieldsValue","department","section","status","editSection","cancel","EditableCell","editing","dataIndex","inputType","index","restProps","margin","required","message","mockData","request_status","mockSection","section_name","section_id","then","result","save","row","validateFields","newData","findIndex","item","splice","renderActionDepartment","editable","marginRight","color","textAlign","renderActionSectionAndTeam","renderSection","selectSection","checkStatus","columnDepartment","width","render","text","columnSection","mergedColumnsDepartment","map","col","onCell","mergedColumnsSection","AddDepartment","padding","value","handleChange","ModalSection","body","cell","SelectDepartment","ListSection","openModalSection","openModalAddDepartment","confirmDepartmentSelected","onEditSection","marginTop"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,IAArD,EAA2DC,WAA3D,EAAwEC,OAAxE,EAAiFC,MAAjF,EAAyFC,KAAzF,QAAsG,MAAtG;AACA,SAASC,UAAT,EAAqBC,cAArB,QAA2C,uBAA3C;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,IAAxB,QAAoC,oBAApC;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AAEA,SAASC,kBAAT,QAAmC,iBAAnC;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAahB,MAAnB;AAEA,MAAMiB,UAAU,GACdT,MAAM,CAAC,2BAAD,CAAN,CACGC,QAAQ,CAAES,KAAD,IAAW;AACnB,QAAM;AAAEC,IAAAA,yBAAF;AAA6BC,IAAAA;AAA7B,MAAmCF,KAAzC;AACA,QAAM;AAAA,OAACG,KAAD;AAAA,OAAQC;AAAR,MAAoB9B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAAC+B,MAAD;AAAA,OAASC;AAAT,MAAsBhC,QAAQ,CAAC,QAAD,CAApC;AACA,QAAM;AAAA,OAACiC,QAAD;AAAA,OAAWC;AAAX,MAA0BlC,QAAQ,CAAC,aAAD,CAAxC;AACA,QAAM;AAAA,OAACmC,UAAD;AAAA,OAAaC;AAAb,MAA8BpC,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM;AAAA,OAACqC,WAAD;AAAA,OAAcC;AAAd,MAAgCtC,QAAQ,CAAC,cAAD,CAA9C;AACA,QAAM;AAAA,OAACuC,SAAD;AAAA,OAAYC;AAAZ,MAA4BxC,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACyC,OAAD;AAAA,OAAUC;AAAV,MAAwB1C,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAAC2C,cAAD;AAAA,OAAiBC;AAAjB,MAAsC5C,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM;AAAA,OAAC6C,kBAAD;AAAA,OAAqBC;AAArB,MAA8C9C,QAAQ,CAAC,EAAD,CAA5D;AACA,QAAM;AAAA,OAAC+C,UAAD;AAAA,OAAaC;AAAb,MAA8BhD,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAAA,OAACiD,UAAD;AAAA,OAAaC;AAAb,MAA8BlD,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACmD,iBAAD;AAAA,OAAoBC;AAApB,MAA4CpD,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACqD,IAAD,IAAS5C,IAAI,CAAC6C,OAAL,EAAf;;AAGA,QAAMC,SAAS,GAAGC,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeR,UAA3C;;AAGA,QAAMS,gBAAgB,GAAGF,MAAM,IAAIA,MAAM,CAACC,GAAP,KAAeN,iBAAlD;;AACA,QAAMQ,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,EAAb,EAAiBA,CAAC,GAAG,EAArB,EAAyBA,CAAC,EAA1B,EAA8B;AAC5BD,IAAAA,QAAQ,CAACE,IAAT,CAAc,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAED,CAAC,CAACE,QAAF,CAAW,EAAX,IAAiBF,CAA9B;AAAiC,MAAA,KAAK,EAAEA,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAoDA,CAApD,CAAd;AACD;;AAED,QAAMG,IAAI,GAAGP,MAAM,IAAI;AACrBQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACAH,IAAAA,IAAI,CAACa,cAAL;AACEC,MAAAA,UAAU,EAAE,EADd;AAEEC,MAAAA,OAAO,EAAEZ,MAAM,CAACY,OAFlB;AAGEC,MAAAA,MAAM,EAAEb,MAAM,CAACa;AAHjB,OAIKb,MAJL;AAMAN,IAAAA,aAAa,CAACM,MAAM,CAACC,GAAR,CAAb;AACD,GATD;;AAWA,QAAMa,WAAW,GAAGd,MAAM,IAAI;AAC5BQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACAH,IAAAA,IAAI,CAACa,cAAL;AACEE,MAAAA,OAAO,EAAE,EADX;AAEEC,MAAAA,MAAM,EAAEb,MAAM,CAACa;AAFjB,OAGKb,MAHL;AAKAJ,IAAAA,oBAAoB,CAACI,MAAM,CAACC,GAAR,CAApB;AACA;;;;;AAOD,GAfD;;AAiBA,QAAMc,MAAM,GAAG,MAAM;AACnBrB,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAFD;;AAIA,QAAMsB,YAAY,GAAG,UASf;AAAA,QATgB;AACpBC,MAAAA,OADoB;AAEpBC,MAAAA,SAFoB;AAGpB7C,MAAAA,KAHoB;AAIpB8C,MAAAA,SAJoB;AAKpBnB,MAAAA,MALoB;AAMpBoB,MAAAA,KANoB;AAOpBjB,MAAAA;AAPoB,KAShB;AAAA,QADDkB,SACC;;AACJ;AACA,WACE,yBAAQA,SAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QACGJ,OAAO,GACN,MAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAEC,SADR;AAEE,MAAA,KAAK,EAAE;AACLI,QAAAA,MAAM,EAAE;AADH,OAFT;AAKE,MAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAG,gBAAenD,KAAM;AAFjC,OADK,CALT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAYE,MAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZF,CADM,GAgBJ8B,QAjBN,CADF;AAuBD,GAlCD;;AAsCA,QAAMsB,QAAQ,GAAG,CACf;AACEZ,IAAAA,MAAM,EAAE,GADV;AAEEF,IAAAA,UAAU,EAAE,wBAFd;AAGEe,IAAAA,cAAc,EAAE,GAHlB;AAIEd,IAAAA,OAAO,EAAE;AACT;;;;;;;;;;;;;;;;;;;AALF,GADe,CAAjB;AA2BA,QAAMe,WAAW,GAAG,CAAC;AACnBC,IAAAA,YAAY,EAAE,WADK;AAEnBC,IAAAA,UAAU,EAAE,IAFO;AAGnBhB,IAAAA,MAAM,EAAE,GAHW;AAInBZ,IAAAA,GAAG,EAAE;AAJc,GAAD,EAMpB;AACE2B,IAAAA,YAAY,EAAE,WADhB;AAEEC,IAAAA,UAAU,EAAE,IAFd;AAGEhB,IAAAA,MAAM,EAAE,GAHV;AAIEZ,IAAAA,GAAG,EAAE;AAJP,GANoB,EAYpB;AACE2B,IAAAA,YAAY,EAAE,WADhB;AAEEC,IAAAA,UAAU,EAAE,IAFd;AAGEhB,IAAAA,MAAM,EAAE,GAHV;AAIEZ,IAAAA,GAAG,EAAE;AAJP,GAZoB,CAApB;AAqBAxD,EAAAA,SAAS,CAAC,MAAM;AACd;AACAsB,IAAAA,kBAAkB,CAAC0D,QAAD,CAAlB,CAA6BK,IAA7B,CAAkCC,MAAM,IAAI;AAC1CzC,MAAAA,qBAAqB,CAACyC,MAAD,CAArB;AACD,KAFD;AAGD,GALQ,EAKN,EALM,CAAT;AAOA;;;;;;;;AAQA,QAAMC,IAAI,GAAG,MAAM/B,GAAN,IAAa;AACxB,UAAMgC,GAAG,GAAG,MAAMpC,IAAI,CAACqC,cAAL,EAAlB;AACA,UAAMC,OAAO,GAAG,CAAC,GAAG9C,kBAAJ,CAAhB;AACA,UAAM+B,KAAK,GAAGe,OAAO,CAACC,SAAR,CAAkBC,IAAI,IAAIpC,GAAG,KAAKoC,IAAI,CAACpC,GAAvC,CAAd,CAHwB,CAKxB;;AACA,QAAImB,KAAK,GAAG,CAAC,CAAb,EAAgB;AACd,YAAMiB,IAAI,GAAGF,OAAO,CAACf,KAAD,CAApB;AACAe,MAAAA,OAAO,CAACG,MAAR,CAAelB,KAAf,EAAsB,CAAtB,kCAA8BiB,IAA9B,GAAuCJ,GAAvC;AACA3C,MAAAA,qBAAqB,CAAC6C,OAAD,CAArB;AACAzC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KALD,MAKO;AACLyC,MAAAA,OAAO,CAAC9B,IAAR,CAAa4B,GAAb;AACA3C,MAAAA,qBAAqB,CAAC6C,OAAD,CAArB;AACAzC,MAAAA,aAAa,CAAC,EAAD,CAAb;AACD,KAfuB,CAgBxB;;AACA;;;;AAIA;;AACD,GAtBD;;AAwBA,QAAM6C,sBAAsB,GAAIvC,MAAD,IAAY;AACzC,UAAMwC,QAAQ,GAAGzC,SAAS,CAACC,MAAD,CAA1B;;AACA,QAAIA,MAAM,CAACa,MAAP,KAAkB,GAAtB,EAA2B;AACzB,aAAO2B,QAAQ,GACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,eAAtB;AAAsC,QAAA,SAAS,EAAE,MAAMR,IAAI,CAAChC,MAAM,CAACC,GAAR,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAEwC,UAAAA,WAAW,EAAE;AAAf,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,EAME,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,iBAAtB;AAAwC,QAAA,SAAS,EAAE1B,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAE2B,UAAAA,KAAK,EAAE;AAAT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CANF,CADa,GAYX;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAG,QAAA,QAAQ,EAAElD,UAAU,KAAK,EAA5B;AAAgC,QAAA,OAAO,EAAE,MAAMc,IAAI,CAACP,MAAD,CAAnD;AAA6D,QAAA,KAAK,EAAE;AAAEyC,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAME,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,qBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CANF,CAZJ;AA2BD,KA5BD,MA4BO,IAAI1C,MAAM,CAACa,MAAP,KAAkB,GAAtB,EAA2B;AAChC,aAAO,IAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAP;AACD;AACF,GAnCD;;AAqCA,QAAM+B,0BAA0B,GAAI5C,MAAD,IAAY;AAC7CQ,IAAAA,OAAO,CAACC,GAAR,CAAYT,MAAZ;AACA,UAAMwC,QAAQ,GAAGtC,gBAAgB,CAACF,MAAD,CAAjC;;AACA,QAAIA,MAAM,CAACa,MAAP,KAAkB,GAAtB,EAA2B;AACzB,aAAO2B,QAAQ,GACb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,eAAtB;AAAsC,QAAA,SAAS,EAAE,MAAMR,IAAI,CAAChC,MAAM,CAACC,GAAR,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAEwC,UAAAA,WAAW,EAAE;AAAf,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CADF,EAME,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,iBAAtB;AAAwC,QAAA,SAAS,EAAE1B,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAE2B,UAAAA,KAAK,EAAE;AAAT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CANF,CADa,GAYX;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAEE;AAAG,QAAA,QAAQ,EAAEhD,iBAAiB,KAAK,EAAnC;AAAuC,QAAA,OAAO,EAAE,MAAMmB,WAAW,CAACd,MAAD,CAAjE;AAA2E,QAAA,KAAK,EAAE;AAAEyC,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,EAME,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,qBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CANF,CAZJ;AA2BD,KA5BD,MA4BO,IAAI1C,MAAM,CAACa,MAAP,KAAkB,GAAtB,EAA2B;AAChC,aAAO,IAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAP;AACD;AACF,GApCD;;AAsCA,QAAMgC,aAAa,GAAI7C,MAAD,IAAY;AAChC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL;AAAG,MAAA,OAAO,EAAE,MAAM8C,aAAa,CAAC9C,MAAD,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA0CA,MAAM,CAACY,OAAjD,aADK,CAAP;AAGD,GAJD;;AAMA,QAAMmC,WAAW,GAAI/C,MAAD,IAAY;AAC9B,QAAIA,MAAM,CAACa,MAAP,KAAkB,GAAtB,EAA2B;AACzB,aAAO;AAAM,QAAA,KAAK,EAAE;AAAE6B,UAAAA,KAAK,EAAE/E,KAAK,CAAC,CAAD;AAAd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAP;AACD,KAFD,MAEO,IAAIqC,MAAM,CAACa,MAAP,KAAkB,GAAtB,EAA2B;AAChC,aAAO;AAAM,QAAA,KAAK,EAAE;AAAE6B,UAAAA,KAAK,EAAE9E,IAAI,CAAC,CAAD;AAAb,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAP;AACD,KAFM,MAEA;AACL,aAAO,IAAP;AACD;AACF,GARD;;AAUA,QAAMoF,gBAAgB,GAAG,CACvB;AACE3E,IAAAA,KAAK,EAAE,EADT;AAEE6C,IAAAA,SAAS,EAAE,QAFb;AAGE+B,IAAAA,KAAK,EAAE,IAHT;AAIEC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOnD,MAAP,KAAkB+C,WAAW,CAAC/C,MAAD;AAJvC,GADuB,EAOvB;AACE3B,IAAAA,KAAK,EAAE,YADT;AAEE6C,IAAAA,SAAS,EAAE,YAFb;AAGEsB,IAAAA,QAAQ,EAAE,IAHZ,CAIE;;AAJF,GAPuB,EAavB;AACEnE,IAAAA,KAAK,EAAE,gBADT;AAEE6C,IAAAA,SAAS,EAAE,SAFb;AAGEgC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOnD,MAAP,KAAkB6C,aAAa,CAAC7C,MAAD;AAHzC,GAbuB,EAkBvB;AACE3B,IAAAA,KAAK,EAAE,QADT;AAEE6C,IAAAA,SAAS,EAAE,WAFb;AAGE+B,IAAAA,KAAK,EAAE,KAHT;AAIEC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOnD,MAAP,KAAkBuC,sBAAsB,CAACvC,MAAD;AAJlD,GAlBuB,CAAzB;AA0BA,QAAMoD,aAAa,GAAG,CACpB;AACE/E,IAAAA,KAAK,EAAE,EADT;AAEE6C,IAAAA,SAAS,EAAE,QAFb;AAGE+B,IAAAA,KAAK,EAAE,IAHT;AAIEC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOnD,MAAP,KAAkB+C,WAAW,CAAC/C,MAAD;AAJvC,GADoB,EAOpB;AACE3B,IAAAA,KAAK,EAAE,gBADT;AAEE6C,IAAAA,SAAS,EAAE,cAFb;AAGEsB,IAAAA,QAAQ,EAAE,IAHZ,CAIE;;AAJF,GAPoB,EAapB;AACEnE,IAAAA,KAAK,EAAE,QADT;AAEE6C,IAAAA,SAAS,EAAE,WAFb;AAGEgC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOnD,MAAP,KAAkB4C,0BAA0B,CAAC5C,MAAD;AAHtD,GAboB,CAAtB;AAoBA,QAAMqD,uBAAuB,GAAGL,gBAAgB,CAACM,GAAjB,CAAqBC,GAAG,IAAI;AAC1D,QAAI,CAACA,GAAG,CAACf,QAAT,EAAmB;AACjB,aAAOe,GAAP;AACD;;AAED,2CACKA,GADL;AAEEC,MAAAA,MAAM,EAAExD,MAAM,KAAK;AACjBA,QAAAA,MADiB;AAEjBmB,QAAAA,SAAS,EAAE,MAFM;AAGjBD,QAAAA,SAAS,EAAEqC,GAAG,CAACrC,SAHE;AAIjB7C,QAAAA,KAAK,EAAEkF,GAAG,CAAClF,KAJM;AAKjB4C,QAAAA,OAAO,EAAElB,SAAS,CAACC,MAAD;AALD,OAAL;AAFhB;AAUD,GAf+B,CAAhC;AAiBA,QAAMyD,oBAAoB,GAAGL,aAAa,CAACE,GAAd,CAAkBC,GAAG,IAAI;AACpD,QAAI,CAACA,GAAG,CAACf,QAAT,EAAmB;AACjB,aAAOe,GAAP;AACD;;AAED,2CACKA,GADL;AAEEC,MAAAA,MAAM,EAAExD,MAAM,KAAK;AACjBA,QAAAA,MADiB;AAEjBmB,QAAAA,SAAS,EAAE,MAFM;AAGjBD,QAAAA,SAAS,EAAEqC,GAAG,CAACrC,SAHE;AAIjB7C,QAAAA,KAAK,EAAEkF,GAAG,CAAClF,KAJM;AAKjB4C,QAAAA,OAAO,EAAEf,gBAAgB,CAACF,MAAD;AALR,OAAL;AAFhB;AAUD,GAf4B,CAA7B;;AAiBA,QAAM0D,aAAa,GAAG,MAAM;AAC1B,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAe,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CADF,EAME,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,WAAD;AAAa,MAAA,QAAQ,EAAGC,KAAD,IAAWpD,OAAO,CAACC,GAAR,CAAYmD,KAAZ,CAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CANF,CADF,CADF;AAcD,GAfD;;AAiBA,QAAMC,YAAY,GAAID,KAAD,IAAW;AAC9BpD,IAAAA,OAAO,CAACC,GAAR,CAAYmD,KAAZ;AACD,GAFD;;AAIA,QAAME,YAAY,GAAG,CAAC;AAAE7E,IAAAA;AAAF,GAAD,KAAiB;AACpC,UAAM,CAACY,IAAD,IAAS5C,IAAI,CAAC6C,OAAL,EAAf;AACA,WACE,MAAC,KAAD;AACE,MAAA,OAAO,EAAEb,OADX;AAEE,MAAA,KAAK,EAAC,yBAFR;AAGE,MAAA,MAAM,EAAC,QAHT;AAIE,MAAA,UAAU,EAAC,QAJb;AAKE,MAAA,QAAQ,EAAE,MAAM;AAAEG,QAAAA,iBAAiB,CAAC,KAAD,CAAjB;AAA0B,OAL9C;AAME,MAAA,IAAI,EAAE,MAAM,CAEX,CARH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAUE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAES,IAAZ;AAAkB,MAAA,SAAS,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,MAAC,KAAD;AACE,MAAA,UAAU,EAAE;AACVkE,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEhD;AADF;AADI,OADd;AAME,MAAA,QAAQ,MANV;AAOE,MAAA,UAAU,EAAEW,WAPd;AAQE,MAAA,OAAO,EAAE8B,oBARX;AASE,MAAA,IAAI,EAAC,OATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CAVF,CADF;AA2BD,GA7BD;;AA+BA,QAAMQ,gBAAgB,GAAI/F,KAAD,IAAW;AAClC,WACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAe,MAAA,KAAK,EAAE;AAAEyF,QAAAA,OAAO,EAAE;AAAX,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,CADF,EAIE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAE;AAAEV,QAAAA,KAAK,EAAE;AAAT,OAFT;AAGE,MAAA,WAAW,EAAC,eAHd;AAIE,MAAA,QAAQ,EAAGW,KAAD,IAAWC,YAAY,CAACD,KAAD,CAJnC;AAKE,MAAA,YAAY,EAAE,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,CALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAJF,CADF;AAmBD,GApBD;;AAsBA,QAAMM,WAAW,GAAG,MAAM;AACxB,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,GAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD;AAAM,MAAA,IAAI,EAAErE,IAAZ;AAAkB,MAAA,SAAS,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,MAAC,KAAD;AACE,MAAA,UAAU,EAAE;AACVkE,QAAAA,IAAI,EAAE;AACJC,UAAAA,IAAI,EAAEhD;AADF;AADI,OADd;AAME,MAAA,QAAQ,MANV;AAOE,MAAA,UAAU,EAAEW,WAPd;AAQE,MAAA,OAAO,EAAE8B,oBARX;AASE,MAAA,IAAI,EAAC,OATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF,CADF,CADF,CADF;AAsBD,GAvBD;;AAyBA,QAAMX,aAAa,GAAG,MAAM;AAC1B;;;;;;;;AAQA1D,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA;;;AAGD,GAbD;;AAeA,QAAM+E,gBAAgB,GAAG,MAAM,CAE9B,CAFD;;AAIA,QAAMC,sBAAsB,GAAG,MAAM;AACnCpF,IAAAA,YAAY,CAAC,SAAD,CAAZ;AACAV,IAAAA,QAAQ,CAAC,oBAAD,CAAR;AACAQ,IAAAA,cAAc,CACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADY,CAAd;AAMAI,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAVD;;AAYA,QAAMmF,yBAAyB,GAAG,MAAM,CAEvC,CAFD;;AAIA,QAAMC,aAAa,GAAG,MAAM;AAC1B9E,IAAAA,aAAa,CAAC,IAAD,CAAb;AACAR,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAF,IAAAA,cAAc,CACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,MAAC,GAAD;AAAK,MAAA,OAAO,EAAC,KAAb;AAAmB,MAAA,KAAK,EAAE;AAAEyF,QAAAA,SAAS,EAAE;AAAb,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,CAAX;AAAc,MAAA,KAAK,EAAE;AAAE5B,QAAAA,SAAS,EAAE;AAAb,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,cAAD;AAAgB,MAAA,KAAK,EAAC,2CAAtB;AAAkE,MAAA,SAAS,EAAE,MAAM;AAAE;AAAsB,OAA3G;AAA6G,MAAA,MAAM,EAAC,SAApH;AAA8H,MAAA,UAAU,EAAC,IAAzI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,MAAD;AAAQ,MAAA,SAAS,EAAC,SAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,CADF,CADF,CAFF,EASE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,EAUE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVF,CADY,CAAd;AAcD,GAjBD;;AAmBA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAgC,IAAA,OAAO,EAAE,MAAMyB,sBAAsB,EAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CADF,CADF,EAME,MAAC,IAAD;AAAM,IAAA,IAAI,EAAEvE,IAAZ;AAAkB,IAAA,SAAS,EAAE,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,UAAU,EAAE;AACVkE,MAAAA,IAAI,EAAE;AACJC,QAAAA,IAAI,EAAEhD;AADF;AADI,KADd;AAME,IAAA,QAAQ,MANV;AAOE,IAAA,UAAU,EAAE3B,kBAPd;AAQE,IAAA,OAAO,EAAEgE,uBARX;AASE,IAAA,IAAI,EAAC,OATP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,EAmBE,MAAC,WAAD;AACE,IAAA,KAAK,EAAEhF,KADT;AAEE,IAAA,IAAI,EAAEU,SAFR;AAGE,IAAA,IAAI,EAAE,MAAMG,UAAU,CAAC,KAAD,CAHxB;AAIE,IAAA,QAAQ,EAAE,MAAMA,UAAU,CAAC,KAAD,CAJ5B;AAKE,IAAA,MAAM,EAAE,MAAMoF,aAAa,EAL7B;AAME,IAAA,UAAU,EAAE3F,UANd;AAOE,IAAA,MAAM,EAAEJ,MAPV;AAQE,IAAA,QAAQ,EAAEE,QARZ;AASE,IAAA,KAAK,EAAE,GATT;AAUE,IAAA,WAAW,EAAEI,WAVf;AAWE,IAAA,OAAO,EAAEI,OAXX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBF,EAgCE,MAAC,YAAD;AAAc,IAAA,OAAO,EAAEE,cAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,CADF;AAoCD,CA/hBQ,CADX,CADF;AAmiBA,eAAelB,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\n\nimport SimpleModal from '../simple-modal'\nimport SimpleInput from '../simple-input'\n\nimport { addKeyToDataSource } from '../data-utility'\n\nconst { Option } = Select;\n\nconst Department =\n  inject('UserAccessManagementStore')\n    (observer((props) => {\n      const { UserAccessManagementStore, t } = props\n      const [title, settitle] = useState(\"\")\n      const [textOk, settextOk] = useState(\"Submit\")\n      const [textEdit, setTextEdit] = useState(\"Add Section\")\n      const [textCancel, settextCancel] = useState(\"Cancel\")\n      const [modalString, setmodalString] = useState(\"initialState\")\n      const [modalType, setModalType] = useState('')\n      const [visible, setvisible] = useState(false)\n      const [visibleSection, setVisibleSection] = useState(false)\n      const [mockDataDepartment, setMockDataDepartment] = useState([])\n      const [addSection, setAddSection] = useState(false)\n      const [editingKey, setEditingKey] = useState('')\n      const [editingKeySection, setEditingKeySection] = useState('')\n      const [form] = Form.useForm();\n\n\n      const isEditing = record => record.key === editingKey\n\n\n      const isEditingSection = record => record.key === editingKeySection\n      const children = [];\n      for (let i = 10; i < 36; i++) {\n        children.push(<Option key={i.toString(36) + i} value={i}>Section_{i}</Option>);\n      }\n\n      const edit = record => {\n        console.log(record)\n        form.setFieldsValue({\n          department: '',\n          section: record.section,\n          status: record.status,\n          ...record,\n        });\n        setEditingKey(record.key);\n      };\n\n      const editSection = record => {\n        console.log(record)\n        form.setFieldsValue({\n          section: '',\n          status: record.status,\n          ...record,\n        })\n        setEditingKeySection(record.key)\n        /* setmodalString(\n\n          <div>\n            <ListSection />\n          </div>\n\n        ) */\n      };\n\n      const cancel = () => {\n        setEditingKey('');\n      };\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        // const inputNode = inputType === 'number' ? <InputNumber style={{ width: \"100%\" }} /> : <Input />;\n        return (\n          <td {...restProps}>\n            {editing ? (\n              <Form.Item\n                name={dataIndex}\n                style={{\n                  margin: 0\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        );\n      };\n\n\n\n      const mockData = [\n        {\n          status: '1',\n          department: 'Information Technology',\n          request_status: '1',\n          section: 3\n          /*  section: [{\n             section_name: 'section_1',\n             section_id: '01',\n             status: '1',\n             key: 1\n           },\n           {\n             section_name: 'section_2',\n             section_id: '02',\n             status: '1',\n             key: 2\n           },\n           {\n             section_name: 'section_3',\n             section_id: '03',\n             status: '1',\n             key: 3\n           }] */\n        }\n      ]\n\n      const mockSection = [{\n        section_name: 'section_1',\n        section_id: '01',\n        status: '1',\n        key: 1\n      },\n      {\n        section_name: 'section_2',\n        section_id: '02',\n        status: '1',\n        key: 2\n      },\n      {\n        section_name: 'section_3',\n        section_id: '03',\n        status: '1',\n        key: 3\n      }]\n\n\n\n      useEffect(() => {\n        //cal api\n        addKeyToDataSource(mockData).then(result => {\n          setMockDataDepartment(result)\n        })\n      }, [])\n\n      /*  const mockDataDepartment = [\n         {\n           status: '1',\n           department: 'Information Technology',\n           section: []\n         }\n       ] */\n\n      const save = async key => {\n        const row = await form.validateFields();\n        const newData = [...mockDataDepartment];\n        const index = newData.findIndex(item => key === item.key);\n\n        //waiting for call api\n        if (index > -1) {\n          const item = newData[index];\n          newData.splice(index, 1, { ...item, ...row });\n          setMockDataDepartment(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setMockDataDepartment(newData);\n          setEditingKey('');\n        }\n        //config request api\n        /*  let request = {\n           currentData: item,\n           newData: { ...item, ...row }\n         } */\n        // setEditingKey('');\n      };\n\n      const renderActionDepartment = (record) => {\n        const editable = isEditing(record);\n        if (record.status === '1') {\n          return editable ? (\n            <span>\n              <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => save(record.key)}>\n                <a style={{ marginRight: 8, }}>\n                  Save\n              </a>\n              </TcrbPopconfirm>\n              <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                <a style={{ color: '#3e3e3e' }}>Cancel</a>\n              </TcrbPopconfirm>\n            </span>\n          ) : (\n              <div style={{ textAlign: \"center\" }}>\n                {/* <TcrbPopconfirm title=\"Sure to Edit?\" onConfirm={() => edit(record)}> */}\n                <a disabled={editingKey !== ''} onClick={() => edit(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                  Edit\n              </a>\n                {/* </TcrbPopconfirm> */}\n                <TcrbPopconfirm title=\"Sure to Deactivate?\" >\n                  <a style={{ color: '#3e3e3e' }}>Deactivate</a>\n                </TcrbPopconfirm>\n                {/* <TcrbPopconfirm title=\"Sure to Delete?\" disabled={editingKey !== ''} onConfirm={() => deletePartnerSelect(record)}>\n                  <a><DeleteOutlined style={{ fontSize: '18px', paddingRight: 8 }} /></a>\n                </TcrbPopconfirm>\n                <a disabled={editingKey !== ''} onClick={() => edit(record)}><EditOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a> */}\n              </div>\n            );\n        } else if (record.status === '2') {\n          return null\n        } else {\n          return null\n        }\n      }\n\n      const renderActionSectionAndTeam = (record) => {\n        console.log(record)\n        const editable = isEditingSection(record);\n        if (record.status === '1') {\n          return editable ? (\n            <span>\n              <TcrbPopconfirm title=\"Sure to Save?\" onConfirm={() => save(record.key)}>\n                <a style={{ marginRight: 8, }}>\n                  Save\n              </a>\n              </TcrbPopconfirm>\n              <TcrbPopconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                <a style={{ color: '#3e3e3e' }}>Cancel</a>\n              </TcrbPopconfirm>\n            </span>\n          ) : (\n              <div style={{ textAlign: \"center\" }}>\n                {/* <TcrbPopconfirm title=\"Sure to Edit?\" onConfirm={() => edit(record)}> */}\n                <a disabled={editingKeySection !== ''} onClick={() => editSection(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n                  Edit\n              </a>\n                {/* </TcrbPopconfirm> */}\n                <TcrbPopconfirm title=\"Sure to Deactivate?\" >\n                  <a style={{ color: '#3e3e3e' }}>Deactivate</a>\n                </TcrbPopconfirm>\n                {/* <TcrbPopconfirm title=\"Sure to Delete?\" disabled={editingKey !== ''} onConfirm={() => deletePartnerSelect(record)}>\n                  <a><DeleteOutlined style={{ fontSize: '18px', paddingRight: 8 }} /></a>\n                </TcrbPopconfirm>\n                <a disabled={editingKey !== ''} onClick={() => edit(record)}><EditOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a> */}\n              </div>\n            );\n        } else if (record.status === '2') {\n          return null\n        } else {\n          return null\n        }\n      }\n\n      const renderSection = (record) => {\n        return <div>\n          <a onClick={() => selectSection(record)}>{record.section} Section</a>\n        </div>\n      }\n\n      const checkStatus = (record) => {\n        if (record.status === '1') {\n          return <span style={{ color: green[6] }}>Active</span>\n        } else if (record.status === '2') {\n          return <span style={{ color: gold[6] }}>Pending</span>\n        } else {\n          return null\n        }\n      }\n\n      const columnDepartment = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkStatus(record)\n        },\n        {\n          title: 'Department',\n          dataIndex: 'department',\n          editable: true,\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        },\n        {\n          title: 'Section / Team',\n          dataIndex: 'section',\n          render: (text, record) => renderSection(record)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          width: '10%',\n          render: (text, record) => renderActionDepartment(record)\n        }\n      ]\n\n      const columnSection = [\n        {\n          title: '',\n          dataIndex: 'status',\n          width: '5%',\n          render: (text, record) => checkStatus(record)\n        },\n        {\n          title: 'Section / Team',\n          dataIndex: 'section_name',\n          editable: true,\n          // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          render: (text, record) => renderActionSectionAndTeam(record)\n        }\n      ]\n\n      const mergedColumnsDepartment = columnDepartment.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: 'text',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n\n      const mergedColumnsSection = columnSection.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: 'text',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditingSection(record),\n          }),\n        };\n      });\n\n      const AddDepartment = () => {\n        return (\n          <div>\n            <Row>\n              <Col span={10} style={{ padding: 4 }}>\n                <p>\n                  Department Name\n            </p>\n              </Col>\n              <Col span={14}>\n                <SimpleInput onChange={(value) => console.log(value)} />\n              </Col>\n            </Row>\n          </div>\n        )\n      }\n\n      const handleChange = (value) => {\n        console.log(value)\n      }\n\n      const ModalSection = ({ visible }) => {\n        const [form] = Form.useForm();\n        return (\n          <Modal\n            visible={visible}\n            title=\"Create a new collection\"\n            okText=\"Create\"\n            cancelText=\"Cancel\"\n            onCancel={() => { setVisibleSection(false) }}\n            onOk={() => {\n\n            }}\n          >\n            <Form form={form} component={false}>\n\n              <Table\n                components={{\n                  body: {\n                    cell: EditableCell,\n                  },\n                }}\n                bordered\n                dataSource={mockSection}\n                columns={mergedColumnsSection}\n                size=\"small\"\n              />\n            </Form>\n          </Modal>\n        )\n      }\n\n      const SelectDepartment = (props) => {\n        return (\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>Section / Team</p>\n            </Col>\n            <Col span={14}>\n              <Select\n                mode=\"tags\"\n                style={{ width: '100%' }}\n                placeholder=\"Please select\"\n                onChange={(value) => handleChange(value)}\n                defaultValue={[10, 11, 14]}\n              >\n                {/* {children} */}\n              </Select>\n            </Col>\n          </Row>\n\n        )\n      }\n\n      const ListSection = () => {\n        return (\n          <div>\n            <Row>\n              <Col flex={100}>\n                <Form form={form} component={false}>\n\n                  <Table\n                    components={{\n                      body: {\n                        cell: EditableCell,\n                      },\n                    }}\n                    bordered\n                    dataSource={mockSection}\n                    columns={mergedColumnsSection}\n                    size=\"small\"\n                  />\n                </Form>\n              </Col>\n            </Row>\n          </div>\n        )\n      }\n\n      const selectSection = () => {\n        /* setModalType('edit')\n        settitle('Edit Section and Team')\n        setmodalString(\n          <div>\n            <ListSection />\n          </div>\n        )\n        setvisible(true) */\n        setVisibleSection(true)\n        /*  return (\n           <ModalSection visible={visibleSection} />\n         ) */\n      }\n\n      const openModalSection = () => {\n\n      }\n\n      const openModalAddDepartment = () => {\n        setModalType('confirm')\n        settitle('Add New Department')\n        setmodalString(\n          <div>\n            <AddDepartment />\n            <SelectDepartment />\n          </div>\n        )\n        setvisible(true)\n      }\n\n      const confirmDepartmentSelected = () => {\n\n      }\n\n      const onEditSection = () => {\n        setAddSection(true)\n        setModalType('')\n        setmodalString(\n          <div>\n            <SelectDepartment />\n            <Row justify=\"end\" style={{ marginTop: 8 }}>\n              <Col span={4} style={{ textAlign: \"right\" }}>\n                <TcrbPopconfirm title=\"Confirm to Add Section/Team to Department\" onConfirm={() => { /*waiting for api */ }} okText=\"Confirm\" cancelText=\"No\">\n                  <Button className=\"primary\" >Add</Button>\n                </TcrbPopconfirm>\n              </Col>\n            </Row>\n            <Divider />\n            <ListSection />\n          </div>\n        )\n      }\n\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"primary\" onClick={() => openModalAddDepartment()} >Add</TcrbButton>\n            </Col>\n          </Row>\n          <Form form={form} component={false}>\n            <Table\n              components={{\n                body: {\n                  cell: EditableCell,\n                },\n              }}\n              bordered\n              dataSource={mockDataDepartment}\n              columns={mergedColumnsDepartment}\n              size=\"small\"\n            />\n          </Form>\n          <SimpleModal\n            title={title}\n            type={modalType}\n            onOk={() => setvisible(false)}\n            onCancel={() => setvisible(false)}\n            onEdit={() => onEditSection()}\n            textCancel={textCancel}\n            textOk={textOk}\n            textEdit={textEdit}\n            width={600}\n            modalString={modalString}\n            visible={visible}\n          />\n          <ModalSection visible={visibleSection} />\n        </div>\n      )\n    }))\n\nexport default Department\n"]},"metadata":{},"sourceType":"module"}