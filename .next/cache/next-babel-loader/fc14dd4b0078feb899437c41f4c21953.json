{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\nimport { observable, action, toJS } from 'mobx';\nimport { StartupApi } from '../services';\nimport getGeneralApiProblem from '../services/api-integrations/ErrorHandler';\nlet CustomerServicesMenuStore = (_class = (_temp = class CustomerServicesMenuStore {\n  constructor() {\n    _initializerDefineProperty(this, \"citizenId\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"accountId\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"accountSelected\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"apiFetching\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"accountInfo\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"arrayAccountInfo\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"accountInfoError\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"unlockOtpError\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"unlockOtpInfo\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"getDataAccountOtpUnlock\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"submitUnlockOTP\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"getDataAccountUnbind\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"submitAccountUnbiding\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"setCitizenId\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"setAccountId\", _descriptor15, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"citizenId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return '';\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"accountId\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"accountSelected\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"apiFetching\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"accountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"arrayAccountInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"accountInfoError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {};\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"unlockOtpError\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"unlockOtpInfo\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"getDataAccountOtpUnlock\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async citizenId => {\n      this.citizenId = {\n        citizen_id: citizenId\n      };\n      this.apiFetching = true;\n      let temp = await StartupApi.getAccountInfo(this.citizenId);\n      console.log(temp);\n\n      if (temp.ok && temp.status === 200) {\n        this.apiFetching = false;\n        this.accountInfo = temp.data.responseData; //waiting edit api\n\n        if (temp.responseData.data.name == 'Error') {\n          this.accountInfoError = temp.data;\n        }\n      } else {\n        this.apiFetching = false; // this.accountInfoError = JSON.parse(temp.data.body)\n\n        this.accountInfoError = temp.data;\n      }\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"submitUnlockOTP\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      // this.accountSelected\n      this.apiFetching = true;\n      let temp = await StartupApi.unlockOTPAccount();\n      console.log(temp);\n\n      if (temp.ok && temp.data.statusCode === 200) {\n        this.apiFetching = false;\n        this.unlockOtpInfo = temp.data;\n      } else {\n        this.apiFetching = false; // this.unlockOtpError = JSON.parse(temp.data.body)\n      }\n    };\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"getDataAccountUnbind\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async citizenId => {\n      this.citizenId = {\n        idCard: citizenId\n      };\n      this.apiFetching = true;\n      let temp = await StartupApi.getAccountInfo(this.citizenId);\n\n      if (temp.ok && temp.data.statusCode === 200) {\n        this.apiFetching = false;\n        this.accountInfo = temp.data;\n      } else {\n        this.apiFetching = false; // let problem = getGeneralApiProblem(response)\n        // this.accountInfoError = JSON.parse(temp.data.body)\n\n        this.accountInfoError = temp.data;\n      }\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"submitAccountUnbiding\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.apiFetching = true;\n      let temp = await StartupApi.unbindAccount();\n\n      if (temp.ok && temp.data.statusCode === 200) {\n        this.apiFetching = false;\n        this.unlockOtpInfo = temp.data;\n      } else {\n        this.apiFetching = false; // this.unlockOtpError = JSON.parse(temp.data.body)\n      }\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"setCitizenId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.citizenId = {\n        idCard: id\n      };\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"setAccountId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.accountId = id;\n    };\n  }\n})), _class);\nexport default CustomerServicesMenuStore;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/customer-services-menu-store.js"],"names":["observable","action","toJS","StartupApi","getGeneralApiProblem","CustomerServicesMenuStore","citizenId","citizen_id","apiFetching","temp","getAccountInfo","console","log","ok","status","accountInfo","data","responseData","name","accountInfoError","unlockOTPAccount","statusCode","unlockOtpInfo","idCard","unbindAccount","id","accountId"],"mappings":"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","sourcesContent":["import { observable, action, toJS } from 'mobx'\nimport { StartupApi } from '../services'\nimport getGeneralApiProblem from '../services/api-integrations/ErrorHandler'\n\nclass CustomerServicesMenuStore {\n  @observable citizenId = ''\n  @observable accountId = {}\n  @observable accountSelected = {}\n  @observable apiFetching = false\n  @observable accountInfo = null\n  @observable arrayAccountInfo = []\n  @observable accountInfoError = {}\n  @observable unlockOtpError = []\n  @observable unlockOtpInfo = null\n\n  @action getDataAccountOtpUnlock = async (citizenId) => {\n    this.citizenId = { citizen_id: citizenId }\n    this.apiFetching = true\n    let temp = await StartupApi.getAccountInfo(this.citizenId)\n    console.log(temp)\n    if (temp.ok && temp.status === 200) {\n      this.apiFetching = false\n      this.accountInfo = temp.data.responseData\n      //waiting edit api\n      if (temp.responseData.data.name == 'Error') {\n        this.accountInfoError = temp.data\n      }\n    } else {\n      this.apiFetching = false\n      // this.accountInfoError = JSON.parse(temp.data.body)\n      this.accountInfoError = temp.data\n\n    }\n  }\n  @action submitUnlockOTP = async () => {\n    // this.accountSelected\n    this.apiFetching = true\n    let temp = await StartupApi.unlockOTPAccount()\n    console.log(temp)\n    if (temp.ok && temp.data.statusCode === 200) {\n      this.apiFetching = false\n      this.unlockOtpInfo = temp.data\n    } else {\n      this.apiFetching = false\n      // this.unlockOtpError = JSON.parse(temp.data.body)\n    }\n  }\n  @action getDataAccountUnbind = async (citizenId) => {\n    this.citizenId = { idCard: citizenId }\n    this.apiFetching = true\n    let temp = await StartupApi.getAccountInfo(this.citizenId)\n    if (temp.ok && temp.data.statusCode === 200) {\n      this.apiFetching = false\n      this.accountInfo = temp.data\n    } else {\n      this.apiFetching = false\n      // let problem = getGeneralApiProblem(response)\n      // this.accountInfoError = JSON.parse(temp.data.body)\n      this.accountInfoError = temp.data\n\n    }\n  }\n  @action submitAccountUnbiding = async () => {\n    this.apiFetching = true\n    let temp = await StartupApi.unbindAccount()\n    if (temp.ok && temp.data.statusCode === 200) {\n      this.apiFetching = false\n      this.unlockOtpInfo = temp.data\n    } else {\n      this.apiFetching = false\n      // this.unlockOtpError = JSON.parse(temp.data.body)\n    }\n  }\n  @action setCitizenId = (id) => {\n    this.citizenId = { idCard: id }\n  }\n  @action setAccountId = (id) => {\n    this.accountId = id\n  }\n}\nexport default CustomerServicesMenuStore\n"]},"metadata":{},"sourceType":"module"}