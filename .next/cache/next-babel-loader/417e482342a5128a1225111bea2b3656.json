{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/manage-group.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleInput from '../../simple-input';\nimport SimpleModal from '../../simple-modal';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility';\nimport { toJS } from 'mobx';\nconst {\n  Option\n} = Select;\nlet listUserSelect = [];\nlet name = null;\nlet role_id = null;\nconst ManageGroup = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore,\n    t\n  } = props;\n  const {\n    0: showEditGroup,\n    1: setShowEditGroup\n  } = useState(false);\n  const {\n    0: roleList,\n    1: setRoleList\n  } = useState([]);\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    0: userInGroupList,\n    1: setUserInGroupList\n  } = useState([]);\n  useEffect(() => {\n    setRoleList([]);\n    console.log(toJS(userAccessManagementStore.groupSelected));\n    splitMapUserGroups(userAccessManagementStore.groupSelected); // addKeyToUserInGroup(userAccessManagementStore.groupSelected.map_user_groups)\n  }, []);\n\n  const addKeyToUserInGroup = userInGroupList => {\n    addKeyToDataSource(userInGroupList).then(result => {\n      setUserInGroupList(result);\n    });\n  };\n\n  const splitMapUserGroups = dataMapUserGroup => {\n    console.log(toJS(dataMapUserGroup));\n    let newUserObject = [];\n\n    for (let index = 0; index < dataMapUserGroup.length; index++) {\n      newUserObject.push(_objectSpread({\n        name: dataMapUserGroup.map_user_groups[index].user_profile.name,\n        surname: dataMapUserGroup.map_user_groups[index].user_profile.surname,\n        email: dataMapUserGroup.map_user_groups[index].user_profile.email\n      }, dataMapUserGroup.map_user_groups[index]));\n    }\n\n    console.log(newUserObject);\n  };\n\n  const columnUser = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Name',\n    dataIndex: 'user_name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Last Name',\n    dataIndex: 'role_name' // render: (text, record) => renderSection(record)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionGroupUser(record)\n  }];\n\n  const AddUserToGroup = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      mode: \"multiple\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select user\",\n      onChange: value => {\n        listUserSelect = value;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, userList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 44\n      }\n    }, item.user_name))));\n  };\n\n  const goBackGroupList = () => {\n    userAccessManagementStore.nextPageIsManageGroup = false;\n  };\n\n  const cancelEditGroup = () => {\n    setShowEditGroup(false);\n  };\n\n  const submitEditGroup = () => {\n    //waiting for call api\n    setShowEditGroup(false);\n  };\n\n  const openModalAddUser = () => {\n    setModalTitle('Add user to ' + userAccessManagementStore.groupSelected.group_name);\n    setmodalString(__jsx(AddUserToGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 22\n      }\n    }));\n    setvisible(true);\n  };\n\n  const deleteUserSelected = record => {//waiting call api\n  };\n\n  const addUser = () => {\n    //waiting call api\n    setvisible(false);\n  };\n\n  const renderActionGroupUser = record => {\n    if (record.status === '1') {\n      return __jsx(TcrbPopconfirm, {\n        title: \"Sure to Delete?\",\n        onConfirm: () => deleteUserSelected(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 13\n        }\n      }, __jsx(DeleteOutlined, {\n        style: {\n          fontSize: '18px',\n          paddingRight: 8\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 16\n        }\n      })));\n    } else {\n      return null;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => goBackGroupList(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }\n  }, \"Group Name\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \" \", showEditGroup ? __jsx(SimpleInput, {\n    defaultValue: userAccessManagementStore.groupSelected.name,\n    onChange: value => name = value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }) : userAccessManagementStore.groupSelected.name)), showEditGroup ? __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 26\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }\n  }, \"Role\"), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select\",\n    onChange: value => roleSelect = value,\n    defaultValue: 1 //waiting value from store\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, roleList.map((item, index) => __jsx(Option, {\n    key: index,\n    value: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 46\n    }\n  }, item.role_name))))) : null, __jsx(Row, {\n    justify: \"center\",\n    style: {\n      marginTop: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 11\n    }\n  }, showEditGroup ? __jsx(Space, {\n    size: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 15\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: () => {\n      cancelEditGroup();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 17\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      submitEditGroup();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, \"Submit\")) : __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => {\n      setShowEditGroup(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, \"Edit\"))), __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 9\n    }\n  }), __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddUser(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, \"Add User\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: userInGroupList,\n    columns: columnUser,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addUser(),\n    onCancel: () => setvisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default ManageGroup;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/manage-group.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","DeleteOutlined","EditOutlined","FormOutlined","TcrbButton","TcrbPopconfirm","inject","observer","SimpleInput","SimpleModal","checkDefaultStatus","addKeyToDataSource","toJS","Option","listUserSelect","name","role_id","ManageGroup","props","userAccessManagementStore","t","showEditGroup","setShowEditGroup","roleList","setRoleList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","userInGroupList","setUserInGroupList","console","log","groupSelected","splitMapUserGroups","addKeyToUserInGroup","then","result","dataMapUserGroup","newUserObject","index","length","push","map_user_groups","user_profile","surname","email","columnUser","title","dataIndex","width","render","text","record","status","request_status","renderActionGroupUser","AddUserToGroup","value","userList","map","item","id","user_name","goBackGroupList","nextPageIsManageGroup","cancelEditGroup","submitEditGroup","openModalAddUser","group_name","deleteUserSelected","addUser","fontSize","paddingRight","roleSelect","role_name","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleInput from '../../simple-input'\nimport SimpleModal from '../../simple-modal'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility'\nimport { toJS } from 'mobx';\n\nconst { Option } = Select;\nlet listUserSelect = []\nlet name = null\nlet role_id = null\nconst ManageGroup = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore, t } = props\n    const [showEditGroup, setShowEditGroup] = useState(false)\n    const [roleList, setRoleList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setvisible] = useState(false)\n    const [userInGroupList, setUserInGroupList] = useState([])\n\n    useEffect(() => {\n      setRoleList([])\n      console.log(toJS(userAccessManagementStore.groupSelected))\n      splitMapUserGroups(userAccessManagementStore.groupSelected)\n      // addKeyToUserInGroup(userAccessManagementStore.groupSelected.map_user_groups)\n    }, [])\n\n    const addKeyToUserInGroup = (userInGroupList) => {\n      addKeyToDataSource(userInGroupList).then(result => {\n        setUserInGroupList(result)\n      })\n    }\n\n    const splitMapUserGroups = (dataMapUserGroup) => {\n      console.log(toJS(dataMapUserGroup))\n      let newUserObject = []\n      for (let index = 0; index < dataMapUserGroup.length; index++) {\n        newUserObject.push({\n          name: dataMapUserGroup.map_user_groups[index].user_profile.name,\n          surname: dataMapUserGroup.map_user_groups[index].user_profile.surname,\n          email: dataMapUserGroup.map_user_groups[index].user_profile.email,\n          ...dataMapUserGroup.map_user_groups[index]\n        })\n      }\n      console.log(newUserObject)\n    }\n\n\n\n    const columnUser = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'user_name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Last Name',\n        dataIndex: 'role_name',\n        // render: (text, record) => renderSection(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroupUser(record)\n      }\n    ]\n\n    const AddUserToGroup = () => {\n      return (\n        <div>\n          <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select user\"\n            onChange={(value) => { listUserSelect = value }}\n          >\n            {userList.map((item, index) => <Option key={index} value={item.id}>{item.user_name}</Option>)}\n          </Select>\n        </div>\n      )\n    }\n\n    const goBackGroupList = () => {\n      userAccessManagementStore.nextPageIsManageGroup = false\n    }\n\n    const cancelEditGroup = () => {\n      setShowEditGroup(false)\n    }\n\n    const submitEditGroup = () => {\n      //waiting for call api\n      setShowEditGroup(false)\n    }\n\n    const openModalAddUser = () => {\n      setModalTitle('Add user to ' + userAccessManagementStore.groupSelected.group_name)\n      setmodalString(<AddUserToGroup />)\n      setvisible(true)\n    }\n\n    const deleteUserSelected = (record) => {\n      //waiting call api\n    }\n\n    const addUser = () => {\n      //waiting call api\n      setvisible(false)\n    }\n\n    const renderActionGroupUser = (record) => {\n      if (record.status === '1') {\n        return (\n          <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={() => deleteUserSelected(record)}>\n            <a><DeleteOutlined style={{ fontSize: '18px', paddingRight: 8 }} /></a>\n          </TcrbPopconfirm>\n        )\n      } else {\n        return null\n      }\n    }\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"default\" onClick={() => goBackGroupList()}>Back</TcrbButton>\n          </Col>\n        </Row>\n        <Row gutter={[4, 24]}>\n          <Col span={4}>Group Name</Col>\n          <Col span={6}> {showEditGroup ?\n            <SimpleInput defaultValue={userAccessManagementStore.groupSelected.name} onChange={(value) => name = value} /> : userAccessManagementStore.groupSelected.name\n          }\n          </Col>\n        </Row>\n        {showEditGroup ? <Row gutter={[4, 24]}>\n          <Col span={4}>Role</Col>\n          <Col span={6}>\n            <Select\n              style={{ width: '100%' }}\n              placeholder=\"Please select\"\n              onChange={(value) => roleSelect = value}\n              defaultValue={1} //waiting value from store\n            >\n              {roleList.map((item, index) => <Option key={index} value={item.id}>{item.role_name}</Option>)}\n            </Select>\n          </Col>\n        </Row> :\n          null\n        }\n\n        <Row justify=\"center\" style={{ marginTop: 8 }}>\n          <Col span={4}>\n            {showEditGroup ?\n              <Space size={8}>\n                <TcrbButton className=\"default\" onClick={() => { cancelEditGroup() }} >Cancel</TcrbButton>\n                <TcrbButton className=\"primary\" onClick={() => { submitEditGroup() }} >Submit</TcrbButton>\n              </Space>\n              :\n              <TcrbButton className=\"primary\" onClick={() => { setShowEditGroup(true) }} >Edit</TcrbButton>}\n          </Col>\n        </Row>\n        <Divider />\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddUser()} >Add User</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={userInGroupList}\n          columns={columnUser}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addUser()}\n          onCancel={() => setvisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n\n      </div>\n    )\n  }))\n\nexport default ManageGroup\n"]},"metadata":{},"sourceType":"module"}