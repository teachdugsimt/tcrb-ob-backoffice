{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/menu-list.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { checkDefaultStatus } from '../../../data-utility';\nlet roleName = null;\nconst MenuList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore\n  } = props;\n  const {\n    0: mockMenuList,\n    1: setMockMenuList\n  } = useState([]);\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  useEffect(() => {\n    setMockMenuList(menuList());\n  }, []);\n\n  const menuList = () => {\n    let newArray = [];\n\n    for (let index = 1; index < 6; index++) {\n      newArray.push({\n        id: index,\n        key: index,\n        menu_name: \"menu_\" + index,\n        status: '1',\n        functions: 2\n      });\n    }\n\n    return newArray;\n  };\n\n  const FormAddNewMenu = () => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    }, \"Menu Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, __jsx(SimpleInput, {\n      onChange: value => roleName = value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 15\n      }\n    }))), __jsx(Row, {\n      gutter: [16, 16],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, \"Functions\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      mode: \"multiple\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select Functions\",\n      onChange: value => null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }))));\n  };\n\n  const openModalAddNewMenu = () => {\n    setModalTitle('Add new menu');\n    setModalString(__jsx(FormAddNewMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  const addNewMenu = () => {\n    //waiting call api\n    setVisible(false);\n  };\n\n  const columnMenu = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(text)\n  }, {\n    title: 'Name',\n    dataIndex: 'menu_name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Functions',\n    dataIndex: 'functions' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%' // render: (text, record) => renderActionGroup(record)\n\n  }];\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => openModalAddNewMenu(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, \"Add Menu\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: mockMenuList,\n    columns: columnMenu,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addNewMenu(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default MenuList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/menu-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","SimpleModal","SimpleInput","checkDefaultStatus","roleName","MenuList","props","userAccessManagementStore","mockMenuList","setMockMenuList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","menuList","newArray","index","push","id","key","menu_name","status","functions","FormAddNewMenu","value","width","openModalAddNewMenu","addNewMenu","columnMenu","title","dataIndex","render","text","record"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\n\nimport { checkDefaultStatus } from '../../../data-utility'\nlet roleName = null\nconst MenuList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [mockMenuList, setMockMenuList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setModalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n\n    useEffect(() => {\n      setMockMenuList(menuList())\n    }, [])\n\n    const menuList = () => {\n      let newArray = []\n      for (let index = 1; index < 6; index++) {\n        newArray.push({\n          id: index,\n          key: index,\n          menu_name: \"menu_\" + index,\n          status: '1',\n          functions: 2\n        })\n      }\n      return newArray\n    }\n\n    const FormAddNewMenu = () => {\n      return (\n        <div>\n          <Row>\n            <Col span={10} >\n              <span>\n                Menu Name\n            </span>\n            </Col>\n            <Col span={14}>\n              <SimpleInput onChange={(value) => roleName = value} />\n            </Col>\n          </Row>\n          <Row gutter={[16, 16]}>\n            <Col span={10} >\n              <span>\n                Functions\n              </span>\n            </Col>\n            <Col span={14}>\n\n\n              <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Please select Functions\"\n                onChange={(value) => null}\n              >\n                {/* {userList.map((item, index) => <Option key={index} value={item.id}>{item.user_name}</Option>)} */}\n              </Select>\n            </Col>\n          </Row>\n        </div>\n\n      )\n    }\n\n    const openModalAddNewMenu = () => {\n      setModalTitle('Add new menu')\n      setModalString(<FormAddNewMenu />)\n      setVisible(true)\n    }\n\n    const addNewMenu = () => {\n      //waiting call api\n      setVisible(false)\n    }\n    const columnMenu = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(text)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'menu_name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Functions',\n        dataIndex: 'functions',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        // render: (text, record) => renderActionGroup(record)\n      }\n    ]\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddNewMenu()} >Add Menu</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={mockMenuList}\n          columns={columnMenu}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewMenu()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default MenuList\n"]},"metadata":{},"sourceType":"module"}