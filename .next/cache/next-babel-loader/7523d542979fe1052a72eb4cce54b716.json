{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n// src/stores/counter-store.tsx\nimport { observable, action, computed } from 'mobx';\nlet CounterStore = (_class = (_temp = class CounterStore {\n  constructor() {\n    _initializerDefineProperty(this, \"count\", _descriptor, this);\n  }\n\n  increment() {\n    this.count++;\n  }\n\n  decrement() {\n    this.count--;\n  }\n\n  get doubleCount() {\n    return this.count * 2;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"count\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 0;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"increment\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"increment\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"decrement\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"decrement\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"doubleCount\", [computed], Object.getOwnPropertyDescriptor(_class.prototype, \"doubleCount\"), _class.prototype)), _class);\nexport default CounterStore;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/counter-store.js"],"names":["observable","action","computed","CounterStore","increment","count","decrement","doubleCount"],"mappings":";;;;;;;;AAAA;AACA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA6C,MAA7C;IAEMC,Y,sBAAN,MAAMA,YAAN,CAAmB;AAAA;AAAA;AAAA;;AAKjBC,EAAAA,SADA,GACY;AACV,SAAKC,KAAL;AACD;;AAGDC,EAAAA,SADA,GACY;AACV,SAAKD,KAAL;AACD;;AAED,MACIE,WADJ,GACkB;AAChB,WAAO,KAAKF,KAAL,GAAa,CAApB;AACD;;AAjBgB,C,+EAChBL,U;;;;;WACO,C;;8DAEPC,M,gJAKAA,M,kJAKAC,Q;AAKH,eAAeC,YAAf","sourcesContent":["// src/stores/counter-store.tsx\nimport { observable, action, computed } from 'mobx'\n\nclass CounterStore {\n  @observable\n  count = 0\n\n  @action\n  increment() {\n    this.count++\n  }\n\n  @action\n  decrement() {\n    this.count--\n  }\n\n  @computed\n  get doubleCount() {\n    return this.count * 2\n  }\n}\nexport default CounterStore\n"]},"metadata":{},"sourceType":"module"}