{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx';\nimport { CustomerServicesEnquiryApi } from '../services';\nimport { create, persist } from 'mobx-persist';\nlet CustomerServiceEnquiry = (_class = (_temp = class CustomerServiceEnquiry {\n  constructor() {\n    _initializerDefineProperty(this, \"rowDataObject\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"tmpListData\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"fetchingGetListCustomerService\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"dataGetListCustomerService\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"errorGetListCustomerService\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"customer_data\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"onboarded_services\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"persistRow\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"setListData\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"setTmpEnquiryRow\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"getListCustomerServicesEnquiry\", _descriptor11, this);\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"rowDataObject\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"tmpListData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"fetchingGetListCustomerService\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"dataGetListCustomerService\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"errorGetListCustomerService\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"customer_data\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"onboarded_services\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"persistRow\", [persist, observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"setListData\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return data => {\n      this.tmpListData = data;\n    };\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"setTmpEnquiryRow\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return data => {\n      this.rowDataObject = data;\n    };\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"getListCustomerServicesEnquiry\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.fetchingGetListCustomerService = true;\n      let temp = await CustomerServicesEnquiryApi.getListCustomerServiceEnquiry(params);\n      console.log(\"================== Response getListCustomerService ===================\");\n      console.log(temp);\n\n      if (temp.ok) {\n        this.fetchingGetListCustomerService = false;\n\n        if (temp && temp.data && temp.data.responseData.transactions.length > 0) {\n          let tmp_data = JSON.parse(JSON.stringify(temp.data.responseData.transactions));\n          this.customer_data = JSON.parse(JSON.stringify(temp.data.responseData.customer));\n          this.onboarded_services = JSON.parse(JSON.stringify(temp.data.responseData.onboarded_services));\n          let addNoData = tmp_data.map((e, i) => {\n            let tmp = JSON.parse(JSON.stringify(e));\n            e.no = i + 1;\n\n            if (e.transaction_type == \"TOPUP\") {\n              e.product_type = tmp.sender_product_type;\n              e.account_no = tmp.sender_main_account_value;\n              e.mobile_no = tmp.sender_proxy_value;\n              e.tcrb_account_reference = tmp.sender_main_account_value;\n              e.sub_account = tmp.sender_sub_account_value;\n              e.account_name = tmp.sender_name;\n              e.transaction_sub_type = \"faeob9s990\";\n            } else if (e.transaction_type == \"RPYMNT\") {\n              e.product_type = tmp.receiver_product_type;\n              e.account_no = tmp.receiver_main_account_value;\n              e.mobile_no = tmp.receiver_proxy_value;\n              e.tcrb_account_reference = tmp.receiver_main_account_value;\n              e.sub_account = tmp.receiver_sub_account_value;\n              e.account_name = tmp.receiver_name;\n              e.transaction_sub_type = \"bfaeob9s990\";\n            } else {\n              e.product_type = tmp.receiver_product_type ? tmp.receiver_product_type : tmp.sender_product_type;\n              e.account_no = tmp.receiver_main_account_value ? tmp.receiver_main_account_value : tmp.sender_main_account_value;\n              e.mobile_no = tmp.receiver_proxy_value ? tmp.receiver_proxy_value : tmp.sender_proxy_value;\n              e.tcrb_account_reference = tmp.receiver_main_account_value ? tmp.receiver_main_account_value : tmp.sender_main_account_value;\n              e.sub_account = tmp.receiver_sub_account_value ? tmp.receiver_sub_account_value : tmp.sender_sub_account_value;\n              e.account_name = tmp.receiver_name ? tmp.receiver_name : tmp.sender_name;\n              e.transaction_sub_type = \"bfaeob9s990\";\n            }\n\n            return e;\n          });\n          this.dataGetListCustomerService = addNoData;\n        } else {\n          this.dataGetListCustomerService = [];\n        }\n\n        this.errorGetListCustomerService = null;\n      } else {\n        this.fetchingGetListCustomerService = false;\n        this.errorGetListCustomerService = {\n          error: temp.problem,\n          status: temp.status\n        }; // this.errorGetListCustomerService = get(temp, 'data.developerMessage', 'Unknown Error')\n      }\n    };\n  }\n})), _class);\nexport default CustomerServiceEnquiry;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/customer-service-enquiry-store.js"],"names":["observable","action","computed","toJS","CustomerServicesEnquiryApi","create","persist","CustomerServiceEnquiry","data","tmpListData","rowDataObject","params","fetchingGetListCustomerService","temp","getListCustomerServiceEnquiry","console","log","ok","responseData","transactions","length","tmp_data","JSON","parse","stringify","customer_data","customer","onboarded_services","addNoData","map","e","i","tmp","no","transaction_type","product_type","sender_product_type","account_no","sender_main_account_value","mobile_no","sender_proxy_value","tcrb_account_reference","sub_account","sender_sub_account_value","account_name","sender_name","transaction_sub_type","receiver_product_type","receiver_main_account_value","receiver_proxy_value","receiver_sub_account_value","receiver_name","dataGetListCustomerService","errorGetListCustomerService","error","problem","status"],"mappings":"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","sourcesContent":["// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx'\nimport { CustomerServicesEnquiryApi } from '../services'\nimport { create, persist } from 'mobx-persist'\n\nclass CustomerServiceEnquiry {\n  @observable rowDataObject = null\n  @observable tmpListData = null\n\n  @observable fetchingGetListCustomerService = null\n  @observable dataGetListCustomerService = null\n  @observable errorGetListCustomerService = null\n\n  @observable customer_data = null\n  @observable onboarded_services = null\n\n  @persist @observable persistRow = null\n\n  @action setListData = (data) => {\n    this.tmpListData = data\n  }\n\n  @action setTmpEnquiryRow = (data) => {\n    this.rowDataObject = data\n  }\n\n  @action getListCustomerServicesEnquiry = async (params) => {\n    this.fetchingGetListCustomerService = true\n    let temp = await CustomerServicesEnquiryApi.getListCustomerServiceEnquiry(params)\n    console.log(\"================== Response getListCustomerService ===================\")\n    console.log(temp)\n    if (temp.ok) {\n      this.fetchingGetListCustomerService = false\n      if (temp && temp.data && temp.data.responseData.transactions.length > 0) {\n        let tmp_data = JSON.parse(JSON.stringify(temp.data.responseData.transactions))\n        this.customer_data = JSON.parse(JSON.stringify(temp.data.responseData.customer))\n        this.onboarded_services = JSON.parse(JSON.stringify(temp.data.responseData.onboarded_services))\n        let addNoData = tmp_data.map((e, i) => {\n          let tmp = JSON.parse(JSON.stringify(e))\n          e.no = i + 1\n          if (e.transaction_type == \"TOPUP\") {\n            e.product_type = tmp.sender_product_type\n            e.account_no = tmp.sender_main_account_value\n            e.mobile_no = tmp.sender_proxy_value\n            e.tcrb_account_reference = tmp.sender_main_account_value\n            e.sub_account = tmp.sender_sub_account_value\n            e.account_name = tmp.sender_name\n            e.transaction_sub_type = \"faeob9s990\"\n          }\n          else if (e.transaction_type == \"RPYMNT\") {\n            e.product_type = tmp.receiver_product_type\n            e.account_no = tmp.receiver_main_account_value\n            e.mobile_no = tmp.receiver_proxy_value\n            e.tcrb_account_reference = tmp.receiver_main_account_value\n            e.sub_account = tmp.receiver_sub_account_value\n            e.account_name = tmp.receiver_name\n            e.transaction_sub_type = \"bfaeob9s990\"\n          }\n          else {\n            e.product_type = tmp.receiver_product_type ? tmp.receiver_product_type : tmp.sender_product_type\n            e.account_no = tmp.receiver_main_account_value ? tmp.receiver_main_account_value : tmp.sender_main_account_value\n            e.mobile_no = tmp.receiver_proxy_value ? tmp.receiver_proxy_value : tmp.sender_proxy_value\n            e.tcrb_account_reference = tmp.receiver_main_account_value ? tmp.receiver_main_account_value : tmp.sender_main_account_value\n            e.sub_account = tmp.receiver_sub_account_value ? tmp.receiver_sub_account_value : tmp.sender_sub_account_value\n            e.account_name = tmp.receiver_name ? tmp.receiver_name : tmp.sender_name\n            e.transaction_sub_type = \"bfaeob9s990\"\n          }\n          return e\n        })\n        this.dataGetListCustomerService = addNoData\n      } else {\n        this.dataGetListCustomerService = []\n      }\n      this.errorGetListCustomerService = null\n    } else {\n      this.fetchingGetListCustomerService = false\n      this.errorGetListCustomerService = { error: temp.problem, status: temp.status }\n      // this.errorGetListCustomerService = get(temp, 'data.developerMessage', 'Unknown Error')\n    }\n  }\n\n}\nexport default CustomerServiceEnquiry\n\n"]},"metadata":{},"sourceType":"module"}