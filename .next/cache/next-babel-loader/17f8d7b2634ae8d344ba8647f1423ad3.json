{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/menu-list.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm, TcrbModal } from '../../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleModal from '../../../simple-modal';\nimport SimpleInput from '../../../simple-input';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility';\nlet roleName = null;\nconst MenuList = inject('userAccessManagementStore')(observer(props => {\n  const {\n    userAccessManagementStore\n  } = props;\n  const {\n    0: menuList,\n    1: setMenuList\n  } = useState([]);\n  const {\n    0: modalTitle,\n    1: setModalTitle\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Submit\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState('confirm');\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: functionList,\n    1: setFunctionList\n  } = useState([]);\n  const {\n    0: visibleFormAddNewMenu,\n    1: setVisibleFormAddNewMenu\n  } = useState(false);\n  const [form] = Form.useForm();\n  useEffect(() => {\n    userAccessManagementStore.getDataMenu();\n    userAccessManagementStore.getDataFunctionList();\n  }, []);\n  useEffect(() => {\n    if (userAccessManagementStore.menuList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.menuList).then(result => {\n        setMenuList(result);\n      });\n    }\n  }, [userAccessManagementStore.menuList]);\n  useEffect(() => {\n    if (userAccessManagementStore.functionOptionList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.functionOptionList).then(result => {\n        setFunctionList(result);\n      });\n    }\n  }, [userAccessManagementStore.functionOptionList]);\n  /* const FormAddNewMenu = () => {\n    return (\n      <div>\n        <Row gutter={[16, 16]}>\n          <Col span={10} >\n            <span>\n              Menu Name\n          </span>\n          </Col>\n          <Col span={14}>\n            <SimpleInput onChange={(value) => roleName = value} />\n          </Col>\n        </Row>\n        <Row >\n          <Col span={10} >\n            <span>\n              Functions\n            </span>\n          </Col>\n          <Col span={14}>\n            <Select\n              mode=\"multiple\"\n              style={{ width: '100%' }}\n              placeholder=\"Please select Functions\"\n              onChange={(value) => null}\n            >\n              {functionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n            </Select>\n          </Col>\n        </Row>\n      </div>\n     )\n  } */\n\n  const FormAddNewDepartment = ({\n    visible,\n    onCreate,\n    onCancel\n  }) => {\n    return __jsx(TcrbModal, {\n      visible: visible,\n      title: \"Add new menu\",\n      okText: \"Submit\",\n      cancelText: \"Cancel\",\n      onCancel: () => {\n        form.resetFields();\n        onCancel();\n      },\n      width: 600,\n      onOk: () => {\n        form.validateFields().then(values => {\n          form.resetFields();\n          onCreate(values);\n        }).catch(info => {\n          console.log('Validate Failed:', info);\n        });\n      },\n      maskClosable: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }\n    }, __jsx(Form, {\n      form: form,\n      layout: \"vertical\",\n      name: \"form_in_modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 15\n      }\n    }, __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 17\n      }\n    }, \"Menu Name\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 15\n      }\n    }, __jsx(Form.Item, {\n      name: \"departmentName\",\n      rules: [{\n        required: true,\n        message: 'Please input Department Name'\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 17\n      }\n    }, __jsx(SimpleInput, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 19\n      }\n    })))), __jsx(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 15\n      }\n    }, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }\n    }, \"Functions\")), __jsx(Col, {\n      span: 14,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 15\n      }\n    }, __jsx(Form.Item, {\n      name: \"sectionName\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }\n    }, __jsx(Select, {\n      mode: \"tags\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select Function\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 19\n      }\n    }, functionList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 56\n      }\n    }, item.name))))))));\n  };\n\n  const openModalAddNewMenu = () => {\n    setModalTitle('Add new menu');\n    setModalString(__jsx(FormAddNewMenu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 22\n      }\n    }));\n    setVisible(true);\n  };\n\n  const addNewMenu = () => {\n    //waiting call api\n    setVisible(false);\n  };\n\n  const deactivateMenuSelect = record => {\n    userAccessManagementStore.submitDeleteMenu(record);\n  };\n\n  const openModalShowFunctionList = functionList => {\n    setModalType('');\n    setModalTitle('Function ');\n    addKeyToDataSource(functionList).then(result => {\n      setModalString(__jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }\n      }, __jsx(Table, {\n        bordered: true,\n        dataSource: result,\n        columns: columnFunction,\n        size: \"small\",\n        pagination: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      })));\n    });\n    setVisible(true);\n  };\n\n  const renderFunction = record => {\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 14\n      }\n    }, __jsx(\"a\", {\n      onClick: () => openModalShowFunctionList(record.functions),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }\n    }, record.functions.length, \" Function\"));\n  };\n\n  const viewMenuManage = record => {\n    userAccessManagementStore.menuSelected = record;\n    userAccessManagementStore.nextPageIsManageMenu = true;\n  };\n\n  const renderActionMenu = record => {\n    if (record.request_status == 'APPROVE') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        onClick: () => viewMenuManage(record),\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 13\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        onConfirm: () => deactivateMenuSelect(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 15\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status == 'PENDING') {\n      return null;\n    } else if (record.request_status == 'REJECT') {\n      return null;\n    }\n  };\n\n  const columnMenu = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Functions',\n    dataIndex: 'functions',\n    render: (text, record) => renderFunction(record)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: (text, record) => renderActionMenu(record)\n  }];\n  const columnFunction = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n  }, {\n    title: 'Function Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }];\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: () => setVisibleFormAddNewMenu(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 13\n    }\n  }, \"Add Menu\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: menuList,\n    columns: columnMenu,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 9\n    }\n  }), __jsx(FormAddNewDepartment, {\n    visible: visibleFormAddNewMenu,\n    onCreate: addNewMenu,\n    onCancel: () => {\n      setVisibleFormModal(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: () => addNewMenu(),\n    onCancel: () => setVisible(false),\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 9\n    }\n  }));\n}));\nexport default MenuList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/menu-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","TcrbModal","inject","observer","SimpleModal","SimpleInput","checkDefaultStatus","addKeyToDataSource","roleName","MenuList","props","userAccessManagementStore","menuList","setMenuList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","functionList","setFunctionList","visibleFormAddNewMenu","setVisibleFormAddNewMenu","form","useForm","getDataMenu","getDataFunctionList","length","then","result","functionOptionList","FormAddNewDepartment","onCreate","onCancel","resetFields","validateFields","values","catch","info","console","log","padding","required","message","width","map","item","index","id","name","openModalAddNewMenu","addNewMenu","deactivateMenuSelect","record","submitDeleteMenu","openModalShowFunctionList","columnFunction","renderFunction","functions","viewMenuManage","menuSelected","nextPageIsManageMenu","renderActionMenu","request_status","textAlign","marginRight","color","columnMenu","title","dataIndex","render","text","status","setVisibleFormModal"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,GAAhB,EAAqBC,GAArB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,IAArD,EAA2DC,WAA3D,EAAwEC,OAAxE,EAAiFC,MAAjF,EAAyFC,KAAzF,EAAgGC,MAAhG,QAA8G,MAA9G;AACA,SAASC,UAAT,EAAqBC,cAArB,EAAqCC,SAArC,QAAsD,6BAAtD;AACA,SAASC,MAAT,EAAiBC,QAAjB,QAAiC,YAAjC;AAEA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AAEA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,uBAAvD;AACA,IAAIC,QAAQ,GAAG,IAAf;AACA,MAAMC,QAAQ,GAAGP,MAAM,CAAC,2BAAD,CAAN,CACdC,QAAQ,CAAEO,KAAD,IAAW;AACnB,QAAM;AAAEC,IAAAA;AAAF,MAAgCD,KAAtC;AACA,QAAM;AAAA,OAACE,QAAD;AAAA,OAAWC;AAAX,MAA0B7B,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM;AAAA,OAAC8B,UAAD;AAAA,OAAaC;AAAb,MAA8B/B,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AAAA,OAACgC,MAAD;AAAA,OAASC;AAAT,MAAsBjC,QAAQ,CAAC,QAAD,CAApC;AACA,QAAM;AAAA,OAACkC,UAAD;AAAA,OAAaC;AAAb,MAA8BnC,QAAQ,CAAC,QAAD,CAA5C;AACA,QAAM;AAAA,OAACoC,WAAD;AAAA,OAAcC;AAAd,MAAgCrC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACsC,SAAD;AAAA,OAAYC;AAAZ,MAA4BvC,QAAQ,CAAC,SAAD,CAA1C;AACA,QAAM;AAAA,OAACwC,OAAD;AAAA,OAAUC;AAAV,MAAwBzC,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAAA,OAAC0C,YAAD;AAAA,OAAeC;AAAf,MAAkC3C,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM;AAAA,OAAC4C,qBAAD;AAAA,OAAwBC;AAAxB,MAAoD7C,QAAQ,CAAC,KAAD,CAAlE;AAEA,QAAM,CAAC8C,IAAD,IAASrC,IAAI,CAACsC,OAAL,EAAf;AAGA9C,EAAAA,SAAS,CAAC,MAAM;AACd0B,IAAAA,yBAAyB,CAACqB,WAA1B;AACArB,IAAAA,yBAAyB,CAACsB,mBAA1B;AACD,GAHQ,EAGN,EAHM,CAAT;AAKAhD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,yBAAyB,CAACC,QAA1B,CAAmCsB,MAAnC,IAA6C,CAAjD,EAAoD;AAClD3B,MAAAA,kBAAkB,CAACI,yBAAyB,CAACC,QAA3B,CAAlB,CAAuDuB,IAAvD,CAA4DC,MAAM,IAAI;AACpEvB,QAAAA,WAAW,CAACuB,MAAD,CAAX;AACD,OAFD;AAGD;AAEF,GAPQ,EAON,CAACzB,yBAAyB,CAACC,QAA3B,CAPM,CAAT;AASA3B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI0B,yBAAyB,CAAC0B,kBAA1B,CAA6CH,MAA7C,IAAuD,CAA3D,EAA8D;AAC5D3B,MAAAA,kBAAkB,CAACI,yBAAyB,CAAC0B,kBAA3B,CAAlB,CAAiEF,IAAjE,CAAsEC,MAAM,IAAI;AAC9ET,QAAAA,eAAe,CAACS,MAAD,CAAf;AACD,OAFD;AAGD;AACF,GANQ,EAMN,CAACzB,yBAAyB,CAAC0B,kBAA3B,CANM,CAAT;AASA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,QAAMC,oBAAoB,GAAG,CAAC;AAAEd,IAAAA,OAAF;AAAWe,IAAAA,QAAX;AAAqBC,IAAAA;AAArB,GAAD,KAAqC;AAChE,WACE,MAAC,SAAD;AACE,MAAA,OAAO,EAAEhB,OADX;AAEE,MAAA,KAAK,EAAC,cAFR;AAGE,MAAA,MAAM,EAAC,QAHT;AAIE,MAAA,UAAU,EAAC,QAJb;AAKE,MAAA,QAAQ,EAAE,MAAM;AACdM,QAAAA,IAAI,CAACW,WAAL;AACAD,QAAAA,QAAQ;AACT,OARH;AASE,MAAA,KAAK,EAAE,GATT;AAUE,MAAA,IAAI,EAAE,MAAM;AACVV,QAAAA,IAAI,CACDY,cADH,GAEGP,IAFH,CAEQQ,MAAM,IAAI;AACdb,UAAAA,IAAI,CAACW,WAAL;AACAF,UAAAA,QAAQ,CAACI,MAAD,CAAR;AACD,SALH,EAMGC,KANH,CAMSC,IAAI,IAAI;AACbC,UAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,IAAhC;AACD,SARH;AASD,OApBH;AAqBE,MAAA,YAAY,EAAE,KArBhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAwBE,MAAC,IAAD;AACE,MAAA,IAAI,EAAEf,IADR;AAEE,MAAA,MAAM,EAAC,UAFT;AAGE,MAAA,IAAI,EAAC,eAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAME,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAe,MAAA,KAAK,EAAE;AAAEkB,QAAAA,OAAO,EAAE;AAAX,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAME,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAC,gBADP;AAEE,MAAA,KAAK,EAAE,CACL;AACEC,QAAAA,QAAQ,EAAE,IADZ;AAEEC,QAAAA,OAAO,EAAE;AAFX,OADK,CAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASE,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,CADF,CANF,CANF,EA0BE,MAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAe,MAAA,KAAK,EAAE;AAAEF,QAAAA,OAAO,EAAE;AAAX,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CADF,EAIE,MAAC,GAAD;AAAK,MAAA,IAAI,EAAE,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,IAAD,CAAM,IAAN;AACE,MAAA,IAAI,EAAC,aADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE,MAAC,MAAD;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAFT;AAGE,MAAA,WAAW,EAAC,wBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKGzB,YAAY,CAAC0B,GAAb,CAAiB,CAACC,IAAD,EAAOC,KAAP,KAAiB,MAAC,MAAD;AAAQ,MAAA,GAAG,EAAEA,KAAb;AAAoB,MAAA,KAAK,EAAED,IAAI,CAACE,EAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCF,IAAI,CAACG,IAA1C,CAAlC,CALH,CAHF,CADF,CAJF,CA1BF,CAxBF,CADF;AAwED,GAzED;;AA2EA,QAAMC,mBAAmB,GAAG,MAAM;AAChC1C,IAAAA,aAAa,CAAC,cAAD,CAAb;AACAM,IAAAA,cAAc,CAAC,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAD,CAAd;AACAI,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAJD;;AAMA,QAAMiC,UAAU,GAAG,MAAM;AACvB;AACAjC,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAHD;;AAKA,QAAMkC,oBAAoB,GAAIC,MAAD,IAAY;AACvCjD,IAAAA,yBAAyB,CAACkD,gBAA1B,CAA2CD,MAA3C;AACD,GAFD;;AAIA,QAAME,yBAAyB,GAAIpC,YAAD,IAAkB;AAClDH,IAAAA,YAAY,CAAC,EAAD,CAAZ;AACAR,IAAAA,aAAa,CAAC,WAAD,CAAb;AACAR,IAAAA,kBAAkB,CAACmB,YAAD,CAAlB,CAAiCS,IAAjC,CAAsCC,MAAM,IAAI;AAC9Cf,MAAAA,cAAc,CACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,MAAC,KAAD;AACE,QAAA,QAAQ,MADV;AAEE,QAAA,UAAU,EAAEe,MAFd;AAGE,QAAA,OAAO,EAAE2B,cAHX;AAIE,QAAA,IAAI,EAAC,OAJP;AAKE,QAAA,UAAU,EAAE,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADY,CAAd;AAWD,KAZD;AAaAtC,IAAAA,UAAU,CAAC,IAAD,CAAV;AACD,GAjBD;;AAmBA,QAAMuC,cAAc,GAAIJ,MAAD,IAAY;AACjC,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACL;AAAG,MAAA,OAAO,EAAE,MAAME,yBAAyB,CAACF,MAAM,CAACK,SAAR,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgEL,MAAM,CAACK,SAAP,CAAiB/B,MAAjF,cADK,CAAP;AAGD,GAJD;;AAMA,QAAMgC,cAAc,GAAIN,MAAD,IAAY;AACjCjD,IAAAA,yBAAyB,CAACwD,YAA1B,GAAyCP,MAAzC;AACAjD,IAAAA,yBAAyB,CAACyD,oBAA1B,GAAiD,IAAjD;AACD,GAHD;;AAKA,QAAMC,gBAAgB,GAAIT,MAAD,IAAY;AAEnC,QAAIA,MAAM,CAACU,cAAP,IAAyB,SAA7B,EAAwC;AACtC,aACE;AAAK,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,OAAO,EAAE,MAAML,cAAc,CAACN,MAAD,CAAhC;AAA0C,QAAA,KAAK,EAAE;AAAEY,UAAAA,WAAW,EAAE,CAAf;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EAIE,MAAC,cAAD;AAAgB,QAAA,KAAK,EAAC,qBAAtB;AAA4C,QAAA,SAAS,EAAE,MAAMd,oBAAoB,CAACC,MAAD,CAAjF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,KAAK,EAAE;AAAEa,UAAAA,KAAK,EAAE;AAAT,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,CAJF,CADF;AAUD,KAXD,MAWO,IAAIb,MAAM,CAACU,cAAP,IAAyB,SAA7B,EAAwC;AAC7C,aAAO,IAAP;AACD,KAFM,MAEA,IAAIV,MAAM,CAACU,cAAP,IAAyB,QAA7B,EAAuC;AAC5C,aAAO,IAAP;AACD;AACF,GAlBD;;AAoBA,QAAMI,UAAU,GAAG,CACjB;AACEC,IAAAA,KAAK,EAAE,EADT;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEzB,IAAAA,KAAK,EAAE,IAHT;AAIE0B,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOlB,MAAP,KAAkBtD,kBAAkB,CAACsD,MAAM,CAACmB,MAAR,EAAgBnB,MAAM,CAACU,cAAvB;AAJ9C,GADiB,EAOjB;AACEK,IAAAA,KAAK,EAAE,MADT;AAEEC,IAAAA,SAAS,EAAE,MAFb,CAGE;;AAHF,GAPiB,EAYjB;AACED,IAAAA,KAAK,EAAE,WADT;AAEEC,IAAAA,SAAS,EAAE,WAFb;AAGEC,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOlB,MAAP,KAAkBI,cAAc,CAACJ,MAAD;AAH1C,GAZiB,EAiBjB;AACEe,IAAAA,KAAK,EAAE,QADT;AAEEC,IAAAA,SAAS,EAAE,WAFb;AAGEzB,IAAAA,KAAK,EAAE,KAHT;AAIE0B,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOlB,MAAP,KAAkBS,gBAAgB,CAACT,MAAD;AAJ5C,GAjBiB,CAAnB;AAyBA,QAAMG,cAAc,GAAG,CACrB;AACEY,IAAAA,KAAK,EAAE,EADT;AAEEC,IAAAA,SAAS,EAAE,QAFb;AAGEzB,IAAAA,KAAK,EAAE,IAHT;AAIE0B,IAAAA,MAAM,EAAE,CAACC,IAAD,EAAOlB,MAAP,KAAkBtD,kBAAkB,CAACsD,MAAM,CAACmB,MAAR,EAAgBnB,MAAM,CAACU,cAAvB;AAJ9C,GADqB,EAOrB;AACEK,IAAAA,KAAK,EAAE,eADT;AAEEC,IAAAA,SAAS,EAAE,MAFb,CAGE;;AAHF,GAPqB,CAAvB;AAaA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE,MAAC,UAAD;AAAY,IAAA,SAAS,EAAC,SAAtB;AAAgC,IAAA,OAAO,EAAE,MAAM/C,wBAAwB,CAAC,IAAD,CAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF,CADF,CADF,EAOE,MAAC,KAAD;AACE,IAAA,QAAQ,MADV;AAEE,IAAA,UAAU,EAAEjB,QAFd;AAGE,IAAA,OAAO,EAAE8D,UAHX;AAIE,IAAA,IAAI,EAAC,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPF,EAaE,MAAC,oBAAD;AACE,IAAA,OAAO,EAAE9C,qBADX;AAEE,IAAA,QAAQ,EAAE8B,UAFZ;AAGE,IAAA,QAAQ,EAAE,MAAM;AACdsB,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,EAoBE,MAAC,WAAD;AACE,IAAA,KAAK,EAAElE,UADT;AAEE,IAAA,IAAI,EAAEQ,SAFR;AAGE,IAAA,IAAI,EAAE,MAAMoC,UAAU,EAHxB;AAIE,IAAA,QAAQ,EAAE,MAAMjC,UAAU,CAAC,KAAD,CAJ5B;AAKE,IAAA,UAAU,EAAEP,UALd;AAME,IAAA,MAAM,EAAEF,MANV;AAOE,IAAA,KAAK,EAAE,GAPT;AAQE,IAAA,WAAW,EAAEI,WARf;AASE,IAAA,OAAO,EAAEI,OATX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,CADF;AAkCD,CA7RQ,CADM,CAAjB;AAgSA,eAAef,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm, TcrbModal } from '../../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleModal from '../../../simple-modal'\nimport SimpleInput from '../../../simple-input'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../../data-utility'\nlet roleName = null\nconst MenuList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [menuList, setMenuList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setModalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setVisible] = useState(false)\n    const [functionList, setFunctionList] = useState([])\n    const [visibleFormAddNewMenu, setVisibleFormAddNewMenu] = useState(false)\n\n    const [form] = Form.useForm();\n\n\n    useEffect(() => {\n      userAccessManagementStore.getDataMenu()\n      userAccessManagementStore.getDataFunctionList()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.menuList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.menuList).then(result => {\n          setMenuList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.menuList])\n\n    useEffect(() => {\n      if (userAccessManagementStore.functionOptionList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.functionOptionList).then(result => {\n          setFunctionList(result)\n        })\n      }\n    }, [userAccessManagementStore.functionOptionList])\n\n\n    /* const FormAddNewMenu = () => {\n      return (\n        <div>\n          <Row gutter={[16, 16]}>\n            <Col span={10} >\n              <span>\n                Menu Name\n            </span>\n            </Col>\n            <Col span={14}>\n              <SimpleInput onChange={(value) => roleName = value} />\n            </Col>\n          </Row>\n          <Row >\n            <Col span={10} >\n              <span>\n                Functions\n              </span>\n            </Col>\n            <Col span={14}>\n              <Select\n                mode=\"multiple\"\n                style={{ width: '100%' }}\n                placeholder=\"Please select Functions\"\n                onChange={(value) => null}\n              >\n                {functionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n              </Select>\n            </Col>\n          </Row>\n        </div>\n\n      )\n    } */\n\n    const FormAddNewDepartment = ({ visible, onCreate, onCancel }) => {\n      return (\n        <TcrbModal\n          visible={visible}\n          title=\"Add new menu\"\n          okText=\"Submit\"\n          cancelText=\"Cancel\"\n          onCancel={() => {\n            form.resetFields();\n            onCancel()\n          }}\n          width={600}\n          onOk={() => {\n            form\n              .validateFields()\n              .then(values => {\n                form.resetFields();\n                onCreate(values);\n              })\n              .catch(info => {\n                console.log('Validate Failed:', info);\n              });\n          }}\n          maskClosable={false}\n\n        >\n          <Form\n            form={form}\n            layout=\"vertical\"\n            name=\"form_in_modal\"\n          >\n\n            <Row >\n              <Col span={10} style={{ padding: 4 }}>\n                <span>\n                  Menu Name\n            </span>\n              </Col>\n              <Col span={14}>\n                <Form.Item\n                  name=\"departmentName\"\n                  rules={[\n                    {\n                      required: true,\n                      message: 'Please input Department Name',\n                    },\n                  ]}\n                >\n                  <SimpleInput />\n                </Form.Item>\n              </Col>\n            </Row>\n            <Row>\n              <Col span={10} style={{ padding: 4 }}>\n                <p>Functions</p>\n              </Col>\n              <Col span={14}>\n                <Form.Item\n                  name=\"sectionName\"\n                >\n                  <Select\n                    mode=\"tags\"\n                    style={{ width: '100%' }}\n                    placeholder=\"Please select Function\"\n                  >\n                    {functionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n                  </Select>\n                </Form.Item>\n              </Col>\n            </Row>\n          </Form>\n        </TcrbModal>\n      )\n    }\n\n    const openModalAddNewMenu = () => {\n      setModalTitle('Add new menu')\n      setModalString(<FormAddNewMenu />)\n      setVisible(true)\n    }\n\n    const addNewMenu = () => {\n      //waiting call api\n      setVisible(false)\n    }\n\n    const deactivateMenuSelect = (record) => {\n      userAccessManagementStore.submitDeleteMenu(record)\n    }\n\n    const openModalShowFunctionList = (functionList) => {\n      setModalType('')\n      setModalTitle('Function ')\n      addKeyToDataSource(functionList).then(result => {\n        setModalString(\n          <div>\n            <Table\n              bordered\n              dataSource={result}\n              columns={columnFunction}\n              size=\"small\"\n              pagination={false}\n            />\n          </div>\n        )\n      })\n      setVisible(true)\n    }\n\n    const renderFunction = (record) => {\n      return <div>\n        <a onClick={() => openModalShowFunctionList(record.functions)}>{record.functions.length} Function</a>\n      </div>\n    }\n\n    const viewMenuManage = (record) => {\n      userAccessManagementStore.menuSelected = record\n      userAccessManagementStore.nextPageIsManageMenu = true\n    }\n\n    const renderActionMenu = (record) => {\n\n      if (record.request_status == 'APPROVE') {\n        return (\n          <div style={{ textAlign: \"center\" }}>\n            <a onClick={() => viewMenuManage(record)} style={{ marginRight: 8, color: '#FBA928' }}>\n              Edit\n                </a>\n            <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deactivateMenuSelect(record)}>\n              <a style={{ color: '#FBA928' }}>Deactivate</a>\n            </TcrbPopconfirm>\n          </div>\n        )\n      } else if (record.request_status == 'PENDING') {\n        return null\n      } else if (record.request_status == 'REJECT') {\n        return null\n      }\n    }\n\n    const columnMenu = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Functions',\n        dataIndex: 'functions',\n        render: (text, record) => renderFunction(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionMenu(record)\n      }\n    ]\n\n    const columnFunction = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Function Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      }\n    ]\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            {/* <TcrbButton className=\"primary\" onClick={() => openModalAddNewMenu()} >Add Menu</TcrbButton> */}\n            <TcrbButton className=\"primary\" onClick={() => setVisibleFormAddNewMenu(true)} >Add Menu</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={menuList}\n          columns={columnMenu}\n          size=\"small\"\n        />\n        <FormAddNewDepartment\n          visible={visibleFormAddNewMenu}\n          onCreate={addNewMenu}\n          onCancel={() => {\n            setVisibleFormModal(false);\n          }}\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewMenu()}\n          onCancel={() => setVisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default MenuList\n"]},"metadata":{},"sourceType":"module"}