{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/group-list.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport { orange, green, gold } from '@ant-design/colors';\nimport SimpleModal from '../../simple-modal';\nimport SimpleInput from '../../simple-input';\nimport { checkDefaultStatus, renderAction, addKeyToDataSource } from '../../data-utility';\nimport UserAccessManagement from '../../../stores/user-access-management-store';\nvar Option = Select.Option;\nvar groupName = null;\nvar roleSelect = null;\nvar GroupList = inject('userAccessManagementStore')(observer(_s(function (props) {\n  _s();\n\n  var userAccessManagementStore = props.userAccessManagementStore;\n\n  var _useState = useState(\"\"),\n      modalTitle = _useState[0],\n      setModalTitle = _useState[1];\n\n  var _useState2 = useState(\"Submit\"),\n      textOk = _useState2[0],\n      settextOk = _useState2[1];\n\n  var _useState3 = useState(\"Cancel\"),\n      textCancel = _useState3[0],\n      settextCancel = _useState3[1];\n\n  var _useState4 = useState(\"\"),\n      modalString = _useState4[0],\n      setmodalString = _useState4[1];\n\n  var _useState5 = useState('confirm'),\n      modalType = _useState5[0],\n      setModalType = _useState5[1];\n\n  var _useState6 = useState(false),\n      visible = _useState6[0],\n      setvisible = _useState6[1];\n\n  var _useState7 = useState([]),\n      groupList = _useState7[0],\n      setGroupList = _useState7[1];\n\n  var _useState8 = useState([]),\n      roleOptionList = _useState8[0],\n      setRoleOptionList = _useState8[1];\n\n  useEffect(function () {\n    userAccessManagementStore.getDataGroup();\n    userAccessManagementStore.getDataRoleOptionList();\n  }, []);\n  useEffect(function () {\n    if (userAccessManagementStore.groupList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.groupList).then(function (result) {\n        setGroupList(result);\n      });\n    }\n  }, [userAccessManagementStore.groupList]);\n  useEffect(function () {\n    if (userAccessManagementStore.optionRoleList.length >= 0) {\n      addKeyToDataSource(userAccessManagementStore.optionRoleList).then(function (result) {\n        setRoleOptionList(result);\n      });\n    }\n  }, [userAccessManagementStore.optionRoleList]);\n  var mockRoleList = [{\n    id: 1,\n    key: 1,\n    role_name: \"role_1\"\n  }, {\n    id: 2,\n    key: 2,\n    role_name: \"role_2\"\n  }, {\n    id: 3,\n    key: 3,\n    role_name: \"role_3\"\n  }, {\n    id: 4,\n    key: 4,\n    role_name: \"role_4\"\n  }, {\n    id: 5,\n    key: 5,\n    role_name: \"role_5\"\n  }];\n  var mockGroupList = [{\n    id: 1,\n    key: 1,\n    group_name: \"group_1\",\n    role_name: \"role_1\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    group_name: \"group_2\",\n    role_name: \"role_2\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    group_name: \"group_3\",\n    role_name: \"role_3\",\n    user: 5,\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    group_name: \"group_4\",\n    role_name: \"role_4\",\n    user: 5,\n    status: '2'\n  }, {\n    id: 5,\n    key: 5,\n    group_name: \"group_5\",\n    role_name: \"role_5\",\n    user: 0,\n    status: '1'\n  }];\n  var mockUserList = [{\n    id: 1,\n    key: 1,\n    user_name: \"name_1\",\n    status: '1'\n  }, {\n    id: 2,\n    key: 2,\n    user_name: \"name_2\",\n    status: '1'\n  }, {\n    id: 3,\n    key: 3,\n    user_name: \"name_3\",\n    status: '1'\n  }, {\n    id: 4,\n    key: 4,\n    user_name: \"name_4\",\n    status: '1'\n  }, {\n    id: 5,\n    key: 5,\n    user_name: \"name_5\",\n    status: '1'\n  }];\n\n  var viewUsers = function viewUsers() {\n    setmodalString(__jsx(UserList, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 22\n      }\n    }));\n    setModalType('');\n    setModalTitle('User List');\n    setvisible(true);\n  };\n\n  var viewManageGroup = function viewManageGroup(record) {\n    userAccessManagementStore.groupSelected = record;\n    userAccessManagementStore.nextPageIsManageGroup = true;\n  };\n\n  var renderUsers = function renderUsers(record) {\n    if (record.map_user_groups <= 0) {\n      return __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 16\n        }\n      }, \"0 user\");\n    } else {\n      return __jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 16\n        }\n      }, __jsx(\"a\", {\n        onClick: function onClick() {\n          return viewUsers(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 11\n        }\n      }, record.map_user_groups.length, \" Users\"));\n    }\n  };\n\n  var renderActionGroup = function renderActionGroup(record) {\n    if (record.request_status == 'APPROVE') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }\n      }, __jsx(\"a\", {\n        style: {\n          marginRight: 8,\n          color: '#FBA928'\n        },\n        onClick: function onClick() {\n          return viewManageGroup(record);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      }, \"Edit\"), __jsx(TcrbPopconfirm, {\n        title: \"Sure to Deactivate?\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        style: {\n          color: '#FBA928'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 15\n        }\n      }, \"Deactivate\")));\n    } else if (record.request_status == 'PENDING') {\n      return null;\n    } else {\n      return null;\n    }\n  };\n\n  var columnGroup = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(record.status, record.request_status);\n    }\n  }, {\n    title: 'Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Role',\n    dataIndex: 'role_name' // render: (text, record) => renderSection(record)\n\n  }, {\n    title: 'Users',\n    dataIndex: 'map_user_groups',\n    render: function render(text, record) {\n      return renderUsers(record);\n    }\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: function render(text, record) {\n      return renderActionGroup(record);\n    } // render:(text,record) => renderAction(record, viewManageGroup)\n\n  }];\n  var columnUser = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(text);\n    }\n  }, {\n    title: 'Name',\n    dataIndex: 'user_name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Last Name',\n    dataIndex: 'role_name' // render: (text, record) => renderSection(record)\n\n  }];\n\n  var addNewGroup = function addNewGroup() {\n    //call api\n    setvisible(false);\n    var request = {\n      name: groupName,\n      role_id: roleSelect\n    };\n    userAccessManagementStore.submitAddNewGroup(request); // console.log(groupName, roleSelect)\n  };\n\n  var FormAddNewGroup = function FormAddNewGroup() {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 15\n      }\n    }, \"Group Name\")), __jsx(Col, {\n      span: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 13\n      }\n    }, __jsx(SimpleInput, {\n      onChange: function onChange(value) {\n        return groupName = value;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 15\n      }\n    }))), __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      span: 10,\n      style: {\n        padding: 4\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 13\n      }\n    }, __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 15\n      }\n    }, \"Role\")), __jsx(Col, {\n      span: 14,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select\",\n      onChange: function onChange(value) {\n        return roleSelect = value;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 15\n      }\n    }, roleOptionList.map(function (item, index) {\n      return __jsx(Option, {\n        key: index,\n        value: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 54\n        }\n      }, item.name);\n    })))));\n  };\n\n  var UserList = function UserList() {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 9\n      }\n    }, __jsx(Row, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }\n    }, __jsx(Col, {\n      flex: 100,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      dataSource: mockUserList,\n      columns: columnUser,\n      size: \"small\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 15\n      }\n    }))));\n  };\n\n  var openModalAddGroup = function openModalAddGroup() {\n    setModalTitle('Add New Group');\n    setModalType('confirm');\n    setmodalString(__jsx(FormAddNewGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 22\n      }\n    }));\n    setvisible(true);\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      return openModalAddGroup();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }\n  }, \"Add Group\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: groupList,\n    columns: columnGroup,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: function onOk() {\n      return addNewGroup();\n    },\n    onCancel: function onCancel() {\n      return setvisible(false);\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }));\n}, \"SxWimg7a8K6gofY74aEMqe7g6bc=\")));\nexport default GroupList;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/group-list.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","TcrbButton","TcrbPopconfirm","inject","observer","orange","green","gold","SimpleModal","SimpleInput","checkDefaultStatus","renderAction","addKeyToDataSource","UserAccessManagement","Option","groupName","roleSelect","GroupList","props","userAccessManagementStore","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","groupList","setGroupList","roleOptionList","setRoleOptionList","getDataGroup","getDataRoleOptionList","length","then","result","optionRoleList","mockRoleList","id","key","role_name","mockGroupList","group_name","user","status","mockUserList","user_name","viewUsers","viewManageGroup","record","groupSelected","nextPageIsManageGroup","renderUsers","map_user_groups","renderActionGroup","request_status","textAlign","marginRight","color","columnGroup","title","dataIndex","width","render","text","columnUser","addNewGroup","request","name","role_id","submitAddNewGroup","FormAddNewGroup","padding","value","map","item","index","UserList","openModalAddGroup"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer } from 'antd'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\nimport { orange, green, gold } from '@ant-design/colors';\n\nimport SimpleModal from '../../simple-modal'\nimport SimpleInput from '../../simple-input'\n\nimport { checkDefaultStatus, renderAction, addKeyToDataSource } from '../../data-utility'\nimport UserAccessManagement from '../../../stores/user-access-management-store';\n\nconst { Option } = Select;\nlet groupName = null\nlet roleSelect = null\nconst GroupList = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore } = props\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setvisible] = useState(false)\n    const [groupList, setGroupList] = useState([])\n    const [roleOptionList, setRoleOptionList] = useState([])\n    useEffect(() => {\n      userAccessManagementStore.getDataGroup()\n      userAccessManagementStore.getDataRoleOptionList()\n    }, [])\n\n    useEffect(() => {\n      if (userAccessManagementStore.groupList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.groupList).then(result => {\n          setGroupList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.groupList])\n\n    useEffect(() => {\n      if (userAccessManagementStore.optionRoleList.length >= 0) {\n        addKeyToDataSource(userAccessManagementStore.optionRoleList).then(result => {\n          setRoleOptionList(result)\n        })\n      }\n\n    }, [userAccessManagementStore.optionRoleList])\n    const mockRoleList = [\n      {\n        id: 1,\n        key: 1,\n        role_name: \"role_1\"\n      },\n      {\n        id: 2,\n        key: 2,\n        role_name: \"role_2\",\n      },\n      {\n        id: 3,\n        key: 3,\n        role_name: \"role_3\",\n      },\n      {\n        id: 4,\n        key: 4,\n        role_name: \"role_4\",\n      },\n      {\n        id: 5,\n        key: 5,\n        role_name: \"role_5\",\n      }\n    ]\n\n    const mockGroupList = [\n      {\n        id: 1,\n        key: 1,\n        group_name: \"group_1\",\n        role_name: \"role_1\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        group_name: \"group_2\",\n        role_name: \"role_2\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        group_name: \"group_3\",\n        role_name: \"role_3\",\n        user: 5,\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        group_name: \"group_4\",\n        role_name: \"role_4\",\n        user: 5,\n        status: '2'\n      },\n      {\n        id: 5,\n        key: 5,\n        group_name: \"group_5\",\n        role_name: \"role_5\",\n        user: 0,\n        status: '1'\n      }\n    ]\n\n    const mockUserList = [\n      {\n        id: 1,\n        key: 1,\n        user_name: \"name_1\",\n        status: '1'\n      },\n      {\n        id: 2,\n        key: 2,\n        user_name: \"name_2\",\n        status: '1'\n      },\n      {\n        id: 3,\n        key: 3,\n        user_name: \"name_3\",\n        status: '1'\n      },\n      {\n        id: 4,\n        key: 4,\n        user_name: \"name_4\",\n        status: '1'\n      },\n      {\n        id: 5,\n        key: 5,\n        user_name: \"name_5\",\n        status: '1'\n      }\n    ]\n\n    const viewUsers = () => {\n      setmodalString(<UserList />)\n      setModalType('')\n      setModalTitle('User List')\n      setvisible(true)\n    }\n\n    const viewManageGroup = (record) => {\n      userAccessManagementStore.groupSelected = record\n      userAccessManagementStore.nextPageIsManageGroup = true\n    }\n\n    const renderUsers = (record) => {\n      if (record.map_user_groups <= 0) {\n        return <span>0 user</span>\n      } else {\n        return <div>\n          <a onClick={() => viewUsers(record)}>{record.map_user_groups.length} Users</a>\n        </div>\n      }\n    }\n\n    const renderActionGroup = (record) => {\n      if (record.request_status == 'APPROVE') {\n        return (\n          <div style={{ textAlign: \"center\" }}>\n            <a style={{ marginRight: 8, color: '#FBA928' }} onClick={() => viewManageGroup(record)}>Edit</a>\n            <TcrbPopconfirm title=\"Sure to Deactivate?\" >\n              <a style={{ color: '#FBA928' }}>Deactivate</a>\n            </TcrbPopconfirm>\n          </div>\n        )\n      } else if (record.request_status == 'PENDING') {\n        return null\n      } else {\n        return null\n      }\n    }\n\n    const columnGroup = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Role',\n        dataIndex: 'role_name',\n        // render: (text, record) => renderSection(record)\n      },\n      {\n        title: 'Users',\n        dataIndex: 'map_user_groups',\n        render: (text, record) => renderUsers(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroup(record)\n        // render:(text,record) => renderAction(record, viewManageGroup)\n      }\n    ]\n\n    const columnUser = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(text)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'user_name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Last Name',\n        dataIndex: 'role_name',\n        // render: (text, record) => renderSection(record)\n      }\n    ]\n\n    const addNewGroup = () => {\n      //call api\n      setvisible(false)\n      let request = {\n        name: groupName,\n        role_id: roleSelect\n      }\n      userAccessManagementStore.submitAddNewGroup(request)\n      // console.log(groupName, roleSelect)\n    }\n\n    const FormAddNewGroup = () => {\n      return (\n        <div>\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>\n                Group Name\n            </p>\n            </Col>\n            <Col span={14}>\n              <SimpleInput onChange={(value) => groupName = value} />\n            </Col>\n          </Row>\n          <Row>\n            <Col span={10} style={{ padding: 4 }}>\n              <p>Role</p>\n            </Col>\n            <Col span={14}>\n              <Select\n                style={{ width: '100%' }}\n                placeholder=\"Please select\"\n                onChange={(value) => roleSelect = value}\n              >\n                {roleOptionList.map((item, index) => <Option key={index} value={item.id}>{item.name}</Option>)}\n              </Select>\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    const UserList = () => {\n      return (\n        <div>\n          <Row>\n            <Col flex={100}>\n              <Table\n                dataSource={mockUserList}\n                columns={columnUser}\n                size=\"small\"\n              />\n            </Col>\n          </Row>\n        </div>\n      )\n    }\n\n    const openModalAddGroup = () => {\n      setModalTitle('Add New Group')\n      setModalType('confirm')\n      setmodalString(<FormAddNewGroup />)\n      setvisible(true)\n    }\n\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddGroup()} >Add Group</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={groupList}\n          columns={columnGroup}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addNewGroup()}\n          onCancel={() => setvisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n      </div>\n    )\n  }))\n\nexport default GroupList\n"]},"metadata":{},"sourceType":"module"}