{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/otp-setup.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Input, Row, Col, Alert, Spin } from 'antd';\nimport styled from 'styled-components';\nimport { inject, observer } from 'mobx-react';\nimport { withTranslation } from '../../i18n';\nimport SimpleModal from '../simple-modal';\nimport { TcrbButton } from '../antd-styles/styles';\nimport { BusinessParameterSetupApi } from '../../services/'; // import { qs } from 'qs'\n\nimport querystring from 'querystring';\nconst StyledInput = styled(Input).withConfig({\n  displayName: \"otp-setup__StyledInput\",\n  componentId: \"y1xkpv-0\"\n})([\"background-color:unset !important;border:unset !important;border-bottom:1px solid black !important;box-shadow:none !important;.ant-input{text-align:center !important;background-color:unset !important;\", \"}\"], ''\n/* cursor:not-allowed !important; */\n);\n\nconst useFocus = () => {\n  const htmlElRef = useRef(null);\n\n  const setFocus = () => {\n    htmlElRef.current && htmlElRef.current.focus();\n  };\n\n  return [htmlElRef, setFocus];\n};\n\nconst OtpSetup = inject('businessParametersSetupStore')(observer(props => {\n  const {\n    t,\n    businessParametersSetupStore\n  } = props;\n  const {\n    0: expireOtp,\n    1: setExpire\n  } = useState(null);\n  const {\n    0: visibleExpireEdit,\n    1: setvisibleExpireEdit\n  } = useState(true);\n  const {\n    0: visibleExpireSubmit,\n    1: setvisibleExpireSubmit\n  } = useState(false);\n  const {\n    0: disExpire,\n    1: setdisExpire\n  } = useState(false);\n  const {\n    0: disExpireSubmit,\n    1: setdisExpireSubmit\n  } = useState(false);\n  const {\n    0: maximumOtp,\n    1: setMaximum\n  } = useState(null);\n  const {\n    0: visibleEditMaximum,\n    1: setvisibleEditMaximum\n  } = useState(true);\n  const {\n    0: visibleSubmitMaximum,\n    1: setvisibleSubmitMaximum\n  } = useState(false);\n  const {\n    0: disMaximum,\n    1: setdisMaximum\n  } = useState(false);\n  const {\n    0: disMaximumSubmit,\n    1: setdisMaximumSubmit\n  } = useState(false);\n  const {\n    0: visible,\n    1: setVisible\n  } = useState(false);\n  const {\n    0: modalString,\n    1: setModal\n  } = useState(\"\");\n  const {\n    0: inputExpiration,\n    1: setInputExpiration\n  } = useState(true);\n  const {\n    0: inputMax,\n    1: setInputMax\n  } = useState(true);\n  const {\n    0: editExpiration,\n    1: setEditExpiration\n  } = useState(false);\n  const {\n    0: editMaximum,\n    1: setEditMaximum\n  } = useState(false); // const [inputRef, setInputFocus] = useFocus()\n\n  const {\n    0: title,\n    1: setTitle\n  } = useState(\"\");\n  const {\n    0: modalType,\n    1: setModalType\n  } = useState(\"\");\n  const {\n    0: textCancel,\n    1: setTextCancel\n  } = useState(\"\");\n  const {\n    0: textOk,\n    1: setTextOk\n  } = useState(\"\");\n  const {\n    0: typeUpdate,\n    1: setTypeUpdate\n  } = useState(\"\");\n  const {\n    0: fetching,\n    1: setFetching\n  } = useState(null);\n  useEffect(() => {\n    if (!businessParametersSetupStore.responseGetOtpValue || businessParametersSetupStore.fetchingGetOtp == null) {\n      let data = {\n        otpParamsField: \"OTP_EXPIRE_TIME,OTP_MAXIMUM_ENTERED,OTP_TOKEN_EXPIRE_TIME\"\n      };\n      businessParametersSetupStore.getOTPdata(data);\n    }\n  }, []);\n  useEffect(() => {\n    let newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue));\n    console.log(\"Will Receive props : \", newProps);\n\n    if (newProps && newProps != undefined) {\n      if (!expireOtp || !maximumOtp) {\n        let tmpExpire = newProps.find(e => e.Name == \"OTP_EXPIRE_TIME\");\n        let tmpMaximum = newProps.find(e => e.Name == \"OTP_MAXIMUM_ENTERED\");\n        setExpire(tmpExpire.Value);\n        setMaximum(tmpMaximum.Value);\n      }\n    }\n  }, [businessParametersSetupStore.responseGetOtpValue]);\n  useEffect(() => {\n    let newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseUpdateOtp));\n    let fetch = businessParametersSetupStore.fetchingUpdateOtp;\n    let error = businessParametersSetupStore.errorUpdateOtp; // setFetching(businessParametersSetupStore.fetchingUpdateOtp)\n\n    console.log(\"newProps >>>>\", newProps, fetch);\n\n    if (newProps && !fetch && !error) {\n      console.log(\"Success\");\n      setFetching(false);\n      setVisible(true);\n      setModal(__jsx(\"div\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 20\n        }\n      }, \"Update\", \" \", typeUpdate, \" \", \"Success\", __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 92\n        }\n      }), \"Your changes will take effect after being approved.\"));\n      setTitle(\"Success\");\n      setModalType(\"close\");\n      setTextCancel(\"close\");\n    } else if (error) {\n      setFetching(false); // console.log(error, fetch, newProps)\n\n      setVisible(true);\n      setModal(__jsx(\"div\", {\n        style: {\n          textAlign: 'center',\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 20\n        }\n      }, \"Error Message : \", \" \", newProps.userMessage));\n      setTitle(\"Error\");\n      setModalType(\"error\");\n      setTextCancel(\"close\");\n    }\n  }, [businessParametersSetupStore.responseUpdateOtp]);\n\n  const _onClickExpiration = () => {\n    console.log(\"==edit Expiration==\");\n    setInputExpiration(false);\n    let expire = document.getElementById(\"otp-expiration-period\");\n    console.log(\"Expiration >>>\", expire);\n    expire.style.color = \"orange\";\n    expire.focus();\n    setvisibleExpireEdit(false);\n    setvisibleExpireSubmit(true);\n    setEditMaximum(true);\n  };\n\n  const _onClickMaximumRetry = () => {\n    console.log(\"==edit Maximum==\");\n    setInputMax(false);\n    let maximum = document.getElementById(\"otp-maximum-retrying\");\n    console.log(\"Maximum >>>\", maximum);\n    maximum.style.color = \"orange\";\n    maximum.focus();\n    setvisibleEditMaximum(false);\n    setvisibleSubmitMaximum(true);\n    setEditExpiration(true);\n  };\n\n  const _openPopup = text => {\n    setVisible(true);\n\n    if (text == \"maximum\") {\n      let a = getValueFromStore(\"maximum\");\n      console.log(a);\n      console.log(maximumOtp);\n\n      if (maximumOtp == a) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Maximum is not change \", __jsx(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 106\n          }\n        }), \"value : \", maximumOtp));\n        setTitle(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else if (!maximumOtp) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Maximum is not empty\"));\n        setTitle(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 22\n          }\n        }, \"Confirm update OTP\", \" \", text, \" \", \"Retrying !!!\", __jsx(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 105\n          }\n        }), a, \" \", \"to\", \" \", maximumOtp));\n        setTitle(\"Confirm\");\n        setModalType(\"confirm\");\n        setTextCancel(\"cancel\");\n        setTextOk(\"confirm\");\n      }\n    } else {\n      let a = getValueFromStore(\"expire\");\n\n      if (expireOtp == a) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Expire is not change \", __jsx(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 105\n          }\n        }), \"value : \", expireOtp));\n        setTitle(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else if (!expireOtp) {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center',\n            color: 'red'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 22\n          }\n        }, \"Error: OTP Expire is not empty\"));\n        setTitle(\"Error\");\n        setModalType(\"error\");\n        setTextCancel(\"cancel\");\n      } else {\n        setModal(__jsx(\"div\", {\n          style: {\n            textAlign: 'center'\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 22\n          }\n        }, \"Confirm update OTP\", \" \", text, \" \", \"Period !!!\", __jsx(\"br\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 103\n          }\n        }), a, \" \", \"to\", \" \", expireOtp));\n        setTitle(\"Confirm\");\n        setModalType(\"confirm\");\n        setTextCancel(\"cancel\");\n        setTextOk(\"confirm\");\n      }\n    }\n  };\n\n  const _setUnfocus = type => {\n    if (type == \"expire\") {\n      let expire = document.getElementById(\"otp-expiration-period\");\n      expire.style.color = \"rgba(0, 0, 0, 0.65)\";\n      expire.blur();\n    } else {\n      let maximum = document.getElementById(\"otp-maximum-retrying\");\n      maximum.style.color = \"rgba(0, 0, 0, 0.65)\";\n      maximum.focus();\n    }\n  };\n\n  const _onConfirm = async () => {\n    let a = getValueFromStore(\"maximum\");\n    let b = getValueFromStore(\"expire\");\n\n    if (a != maximumOtp) {\n      console.log(\"update >>>\", maximumOtp);\n      let data = {\n        currentData: {\n          OTP_MAXIMUM_ENTERED: a\n        },\n        newData: {\n          OTP_MAXIMUM_ENTERED: maximumOtp\n        },\n        maker_id: 51\n      };\n      setVisible(false);\n      setInputMax(true);\n      setvisibleEditMaximum(true);\n      setvisibleSubmitMaximum(false);\n      setdisMaximum(false);\n      setEditExpiration(false);\n\n      _setUnfocus(\"maximum\");\n\n      setMaximum(a);\n      setTypeUpdate(\"Maximum OTP\");\n      setFetching(true);\n      await businessParametersSetupStore.updateOTPdata(data);\n    }\n\n    if (b != expireOtp) {\n      console.log(\"update >>>\", expireOtp);\n      let data = {\n        currentData: {\n          OTP_EXPIRE_TIME: b\n        },\n        newData: {\n          OTP_EXPIRE_TIME: expireOtp\n        },\n        maker_id: 59\n      };\n      setVisible(false);\n      setInputExpiration(true);\n      setvisibleExpireEdit(true);\n      setvisibleExpireSubmit(false);\n      setEditMaximum(false);\n      setdisExpire(false);\n\n      _setUnfocus(\"expire\");\n\n      setExpire(b);\n      setTypeUpdate(\"Expire OTP\");\n      setFetching(true);\n      await businessParametersSetupStore.updateOTPdata(data);\n    }\n  };\n\n  const getValueFromStore = type => {\n    let old_data = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue));\n    console.log(old_data);\n\n    if (type == \"expire\") {\n      let tmpExpire = old_data.find(e => e.Name == \"OTP_EXPIRE_TIME\");\n      return tmpExpire.Value;\n    } else {\n      let tmpMaximum = old_data.find(e => e.Name == \"OTP_MAXIMUM_ENTERED\");\n      return tmpMaximum.Value;\n    }\n  };\n\n  const _onCancel = () => {\n    setVisible(false);\n    let a = getValueFromStore(\"maximum\");\n    let b = getValueFromStore(\"expire\");\n    setMaximum(a);\n    setInputMax(true);\n    setvisibleEditMaximum(true);\n    setvisibleSubmitMaximum(false);\n    setdisMaximum(false);\n    setEditExpiration(false); // _setUnfocus(\"maximum\")\n\n    setExpire(b);\n    setInputExpiration(true);\n    setvisibleExpireEdit(true);\n    setvisibleExpireSubmit(false);\n    setEditMaximum(false);\n    setdisExpire(false); // _setUnfocus(\"expire\")\n\n    let expire = document.getElementById(\"otp-expiration-period\");\n    let maximum = document.getElementById(\"otp-maximum-retrying\");\n    expire.style.color = \"rgba(0, 0, 0, 0.65)\";\n    expire.blur();\n    maximum.style.color = \"rgba(0, 0, 0, 0.65)\";\n    maximum.blur();\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 9\n    }\n  }, __jsx(Spin, {\n    tip: \"Loading...\",\n    size: \"large\",\n    spinning: fetching // delay={fetching == false ? 800 : 0}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 11\n    }\n  }, __jsx(Row, {\n    gutter: [8, 8],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 15\n    }\n  }, __jsx(StyledInput, {\n    readOnly: inputMax,\n    id: \"otp-maximum-retrying\",\n    value: maximumOtp,\n    onChange: e => setMaximum(e.target.value),\n    prefix: t(\"otpMaximumRetrying\"),\n    suffix: t(\"otpTime\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 15\n    }\n  }, visibleEditMaximum && __jsx(TcrbButton, {\n    disabled: editMaximum,\n    onClick: () => _onClickMaximumRetry(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 302,\n      columnNumber: 40\n    }\n  }, t(\"edit\")), visibleSubmitMaximum && __jsx(TcrbButton, {\n    disabled: disMaximumSubmit,\n    onClick: () => _openPopup(\"maximum\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 42\n    }\n  }, t(\"submit\")))), __jsx(Row, {\n    gutter: [8, 8],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 15\n    }\n  }, __jsx(StyledInput, {\n    readOnly: inputExpiration\n    /*ref={inputRef}*/\n    ,\n    id: \"otp-expiration-period\",\n    value: expireOtp,\n    onChange: e => setExpire(e.target.value),\n    prefix: t(\"otpExpirationPeriod\"),\n    suffix: t(\"otpSecond\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 308,\n      columnNumber: 17\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 15\n    }\n  }, visibleExpireEdit && __jsx(TcrbButton, {\n    disabled: editExpiration,\n    onClick: () => _onClickExpiration(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 39\n    }\n  }, t(\"edit\")), visibleExpireSubmit && __jsx(TcrbButton, {\n    disabled: disExpireSubmit\n    /*onClick={setInputFocus}*/\n    ,\n    onClick: () => _openPopup(\"expire\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 41\n    }\n  }, t(\"submit\")))), __jsx(SimpleModal, {\n    title: title,\n    type: modalType,\n    onOk: () => _onConfirm(),\n    onCancel: () => _onCancel(),\n    textCancel: textCancel,\n    textOk: textOk,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 13\n    }\n  })));\n}));\nexport default withTranslation('common')(OtpSetup);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/otp-setup.js"],"names":["React","useEffect","useRef","useState","Input","Row","Col","Alert","Spin","styled","inject","observer","withTranslation","SimpleModal","TcrbButton","BusinessParameterSetupApi","querystring","StyledInput","useFocus","htmlElRef","setFocus","current","focus","OtpSetup","props","t","businessParametersSetupStore","expireOtp","setExpire","visibleExpireEdit","setvisibleExpireEdit","visibleExpireSubmit","setvisibleExpireSubmit","disExpire","setdisExpire","disExpireSubmit","setdisExpireSubmit","maximumOtp","setMaximum","visibleEditMaximum","setvisibleEditMaximum","visibleSubmitMaximum","setvisibleSubmitMaximum","disMaximum","setdisMaximum","disMaximumSubmit","setdisMaximumSubmit","visible","setVisible","modalString","setModal","inputExpiration","setInputExpiration","inputMax","setInputMax","editExpiration","setEditExpiration","editMaximum","setEditMaximum","title","setTitle","modalType","setModalType","textCancel","setTextCancel","textOk","setTextOk","typeUpdate","setTypeUpdate","fetching","setFetching","responseGetOtpValue","fetchingGetOtp","data","otpParamsField","getOTPdata","newProps","JSON","parse","stringify","console","log","undefined","tmpExpire","find","e","Name","tmpMaximum","Value","responseUpdateOtp","fetch","fetchingUpdateOtp","error","errorUpdateOtp","textAlign","color","userMessage","_onClickExpiration","expire","document","getElementById","style","_onClickMaximumRetry","maximum","_openPopup","text","a","getValueFromStore","_setUnfocus","type","blur","_onConfirm","b","currentData","OTP_MAXIMUM_ENTERED","newData","maker_id","updateOTPdata","OTP_EXPIRE_TIME","old_data","_onCancel","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { Input, Row, Col, Alert, Spin } from 'antd'\nimport styled from 'styled-components'\nimport { inject, observer } from 'mobx-react'\nimport { withTranslation } from '../../i18n'\nimport SimpleModal from '../simple-modal'\nimport { TcrbButton } from '../antd-styles/styles'\nimport { BusinessParameterSetupApi } from '../../services/'\n// import { qs } from 'qs'\nimport querystring from 'querystring'\nconst StyledInput = styled(Input)`\n  background-color: unset !important;\n  border: unset !important;\n  border-bottom: 1px solid black !important;\n  box-shadow: none !important;\n  .ant-input{\n    text-align: center !important;\n    background-color: unset !important;\n    ${'' /* cursor:not-allowed !important; */}\n  }\n`\n\nconst useFocus = () => {\n  const htmlElRef = useRef(null)\n  const setFocus = () => { htmlElRef.current && htmlElRef.current.focus() }\n  return [htmlElRef, setFocus]\n}\n\nconst OtpSetup =\n  inject('businessParametersSetupStore')\n    (observer((props) => {\n      const { t, businessParametersSetupStore } = props\n      const [expireOtp, setExpire] = useState(null)\n      const [visibleExpireEdit, setvisibleExpireEdit] = useState(true)\n      const [visibleExpireSubmit, setvisibleExpireSubmit] = useState(false)\n      const [disExpire, setdisExpire] = useState(false)\n      const [disExpireSubmit, setdisExpireSubmit] = useState(false)\n\n      const [maximumOtp, setMaximum] = useState(null)\n      const [visibleEditMaximum, setvisibleEditMaximum] = useState(true)\n      const [visibleSubmitMaximum, setvisibleSubmitMaximum] = useState(false)\n      const [disMaximum, setdisMaximum] = useState(false)\n      const [disMaximumSubmit, setdisMaximumSubmit] = useState(false)\n\n      const [visible, setVisible] = useState(false)\n      const [modalString, setModal] = useState(\"\")\n      const [inputExpiration, setInputExpiration] = useState(true)\n      const [inputMax, setInputMax] = useState(true)\n      const [editExpiration, setEditExpiration] = useState(false)\n      const [editMaximum, setEditMaximum] = useState(false)\n      // const [inputRef, setInputFocus] = useFocus()\n      const [title, setTitle] = useState(\"\")\n      const [modalType, setModalType] = useState(\"\")\n      const [textCancel, setTextCancel] = useState(\"\")\n      const [textOk, setTextOk] = useState(\"\")\n      const [typeUpdate, setTypeUpdate] = useState(\"\")\n      const [fetching, setFetching] = useState(null)\n\n      useEffect(() => {\n\n        if (!businessParametersSetupStore.responseGetOtpValue || businessParametersSetupStore.fetchingGetOtp == null) {\n          let data = { otpParamsField: \"OTP_EXPIRE_TIME,OTP_MAXIMUM_ENTERED,OTP_TOKEN_EXPIRE_TIME\" }\n          businessParametersSetupStore.getOTPdata(data)\n        }\n      }, [])\n\n      useEffect(() => {\n\n        let newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue))\n        console.log(\"Will Receive props : \", newProps)\n        if (newProps && newProps != undefined) {\n          if (!expireOtp || !maximumOtp) {\n            let tmpExpire = newProps.find(e => e.Name == \"OTP_EXPIRE_TIME\")\n            let tmpMaximum = newProps.find(e => e.Name == \"OTP_MAXIMUM_ENTERED\")\n            setExpire(tmpExpire.Value)\n            setMaximum(tmpMaximum.Value)\n          }\n        }\n      }, [businessParametersSetupStore.responseGetOtpValue])\n\n      useEffect(() => {\n        let newProps = JSON.parse(JSON.stringify(businessParametersSetupStore.responseUpdateOtp))\n        let fetch = businessParametersSetupStore.fetchingUpdateOtp\n        let error = businessParametersSetupStore.errorUpdateOtp\n        // setFetching(businessParametersSetupStore.fetchingUpdateOtp)\n        console.log(\"newProps >>>>\", newProps, fetch)\n        if ((newProps && !fetch) && !error) {\n          console.log(\"Success\")\n          setFetching(false)\n          setVisible(true)\n          setModal(<div style={{ textAlign: 'center' }}>Update{\" \"}{typeUpdate}{\" \"}Success<br />Your changes will take effect after being approved.</div>)\n          setTitle(\"Success\")\n          setModalType(\"close\")\n          setTextCancel(\"close\")\n        } else if (error) {\n          setFetching(false)\n          // console.log(error, fetch, newProps)\n          setVisible(true)\n          setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error Message : {\" \"}{newProps.userMessage}</div>)\n          setTitle(\"Error\")\n          setModalType(\"error\")\n          setTextCancel(\"close\")\n        }\n\n      }, [businessParametersSetupStore.responseUpdateOtp])\n\n      const _onClickExpiration = () => {\n        console.log(\"==edit Expiration==\")\n        setInputExpiration(false)\n        let expire = document.getElementById(\"otp-expiration-period\")\n        console.log(\"Expiration >>>\", expire)\n        expire.style.color = \"orange\"\n        expire.focus()\n        setvisibleExpireEdit(false)\n        setvisibleExpireSubmit(true)\n        setEditMaximum(true)\n      }\n\n      const _onClickMaximumRetry = () => {\n        console.log(\"==edit Maximum==\")\n        setInputMax(false)\n        let maximum = document.getElementById(\"otp-maximum-retrying\")\n        console.log(\"Maximum >>>\", maximum)\n        maximum.style.color = \"orange\"\n        maximum.focus()\n        setvisibleEditMaximum(false)\n        setvisibleSubmitMaximum(true)\n        setEditExpiration(true)\n      }\n\n      const _openPopup = (text) => {\n        setVisible(true)\n        if (text == \"maximum\") {\n          let a = getValueFromStore(\"maximum\")\n          console.log(a)\n          console.log(maximumOtp)\n          if (maximumOtp == a) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Maximum is not change <br />value : {maximumOtp}</div>)\n            setTitle(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else if (!maximumOtp) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Maximum is not empty</div>)\n            setTitle(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else {\n            setModal(<div style={{ textAlign: 'center' }}>Confirm update OTP{\" \"}{text}{\" \"}Retrying !!!<br />{a}{\" \"}to{\" \"}{maximumOtp}</div>)\n            setTitle(\"Confirm\")\n            setModalType(\"confirm\")\n            setTextCancel(\"cancel\")\n            setTextOk(\"confirm\")\n          }\n        }\n        else {\n          let a = getValueFromStore(\"expire\")\n          if (expireOtp == a) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Expire is not change <br />value : {expireOtp}</div>)\n            setTitle(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else if (!expireOtp) {\n            setModal(<div style={{ textAlign: 'center', color: 'red' }}>Error: OTP Expire is not empty</div>)\n            setTitle(\"Error\")\n            setModalType(\"error\")\n            setTextCancel(\"cancel\")\n          }\n          else {\n            setModal(<div style={{ textAlign: 'center' }}>Confirm update OTP{\" \"}{text}{\" \"}Period !!!<br />{a}{\" \"}to{\" \"}{expireOtp}</div>)\n            setTitle(\"Confirm\")\n            setModalType(\"confirm\")\n            setTextCancel(\"cancel\")\n            setTextOk(\"confirm\")\n          }\n        }\n\n      }\n\n      const _setUnfocus = (type) => {\n        if (type == \"expire\") {\n          let expire = document.getElementById(\"otp-expiration-period\")\n          expire.style.color = \"rgba(0, 0, 0, 0.65)\"\n          expire.blur()\n        } else {\n          let maximum = document.getElementById(\"otp-maximum-retrying\")\n          maximum.style.color = \"rgba(0, 0, 0, 0.65)\"\n          maximum.focus()\n        }\n      }\n\n      const _onConfirm = async () => {\n        let a = getValueFromStore(\"maximum\")\n        let b = getValueFromStore(\"expire\")\n        if (a != maximumOtp) {\n          console.log(\"update >>>\", maximumOtp)\n\n          let data = {\n            currentData: {\n              OTP_MAXIMUM_ENTERED: a\n            },\n            newData: {\n              OTP_MAXIMUM_ENTERED: maximumOtp\n            },\n            maker_id: 51\n          }\n          setVisible(false)\n          setInputMax(true)\n          setvisibleEditMaximum(true)\n          setvisibleSubmitMaximum(false)\n          setdisMaximum(false)\n          setEditExpiration(false)\n          _setUnfocus(\"maximum\")\n          setMaximum(a)\n          setTypeUpdate(\"Maximum OTP\")\n          setFetching(true)\n          await businessParametersSetupStore.updateOTPdata(data)\n\n        }\n        if (b != expireOtp) {\n          console.log(\"update >>>\", expireOtp)\n          let data = {\n            currentData: {\n              OTP_EXPIRE_TIME: b\n            },\n            newData: {\n              OTP_EXPIRE_TIME: expireOtp\n            },\n            maker_id: 59\n          }\n\n          setVisible(false)\n          setInputExpiration(true)\n          setvisibleExpireEdit(true)\n          setvisibleExpireSubmit(false)\n          setEditMaximum(false)\n          setdisExpire(false)\n          _setUnfocus(\"expire\")\n          setExpire(b)\n          setTypeUpdate(\"Expire OTP\")\n          setFetching(true)\n          await businessParametersSetupStore.updateOTPdata(data)\n\n        }\n      }\n\n      const getValueFromStore = (type) => {\n        let old_data = JSON.parse(JSON.stringify(businessParametersSetupStore.responseGetOtpValue))\n        console.log(old_data)\n        if (type == \"expire\") {\n          let tmpExpire = old_data.find(e => e.Name == \"OTP_EXPIRE_TIME\")\n          return tmpExpire.Value\n        } else {\n          let tmpMaximum = old_data.find(e => e.Name == \"OTP_MAXIMUM_ENTERED\")\n          return tmpMaximum.Value\n        }\n      }\n\n      const _onCancel = () => {\n        setVisible(false)\n        let a = getValueFromStore(\"maximum\")\n        let b = getValueFromStore(\"expire\")\n\n        setMaximum(a)\n        setInputMax(true)\n        setvisibleEditMaximum(true)\n        setvisibleSubmitMaximum(false)\n        setdisMaximum(false)\n        setEditExpiration(false)\n        // _setUnfocus(\"maximum\")\n\n        setExpire(b)\n        setInputExpiration(true)\n        setvisibleExpireEdit(true)\n        setvisibleExpireSubmit(false)\n        setEditMaximum(false)\n        setdisExpire(false)\n        // _setUnfocus(\"expire\")\n\n        let expire = document.getElementById(\"otp-expiration-period\")\n        let maximum = document.getElementById(\"otp-maximum-retrying\")\n        expire.style.color = \"rgba(0, 0, 0, 0.65)\"\n        expire.blur()\n        maximum.style.color = \"rgba(0, 0, 0, 0.65)\"\n        maximum.blur()\n      }\n\n      return (\n        <div>\n          <Spin\n            tip=\"Loading...\"\n            size=\"large\" spinning={fetching}\n          // delay={fetching == false ? 800 : 0}\n          >\n            <Row gutter={[8, 8]}>\n              <Col span={8}>\n                <StyledInput readOnly={inputMax} id={\"otp-maximum-retrying\"} value={maximumOtp} onChange={(e) => setMaximum(e.target.value)} prefix={t(\"otpMaximumRetrying\")} suffix={t(\"otpTime\")} />\n              </Col>\n              <Col span={6}>\n                {visibleEditMaximum && <TcrbButton disabled={editMaximum} onClick={() => _onClickMaximumRetry()}>{t(\"edit\")}</TcrbButton>}\n                {visibleSubmitMaximum && <TcrbButton disabled={disMaximumSubmit} onClick={() => _openPopup(\"maximum\")}>{t(\"submit\")}</TcrbButton>}\n              </Col>\n            </Row>\n            <Row gutter={[8, 8]}>\n              <Col span={8}>\n                <StyledInput readOnly={inputExpiration} /*ref={inputRef}*/ id={\"otp-expiration-period\"} value={expireOtp} onChange={(e) => setExpire(e.target.value)} prefix={t(\"otpExpirationPeriod\")} suffix={t(\"otpSecond\")} />\n              </Col>\n              <Col span={6}>\n                {visibleExpireEdit && <TcrbButton disabled={editExpiration} onClick={() => _onClickExpiration()} >{t(\"edit\")}</TcrbButton>}\n                {visibleExpireSubmit && <TcrbButton disabled={disExpireSubmit}/*onClick={setInputFocus}*/ onClick={() => _openPopup(\"expire\")} >{t(\"submit\")}</TcrbButton>}\n              </Col>\n            </Row>\n            <SimpleModal\n              title={title}\n              type={modalType}\n              onOk={() => _onConfirm()}\n              onCancel={() => _onCancel()}\n              textCancel={textCancel}\n              textOk={textOk}\n              modalString={modalString}\n              visible={visible}\n            />\n          </Spin>\n        </div>\n      )\n    }))\n\nexport default withTranslation('common')(OtpSetup)\n"]},"metadata":{},"sourceType":"module"}