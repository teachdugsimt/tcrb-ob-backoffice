{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/manage-menu.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { inject, observer } from 'mobx-react';\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles';\nimport SimpleModal from '../../../simple-modal';\nvar ManageMenu = inject('userAccessManagementStore')(observer(_s(function (props) {\n  _s();\n\n  var _useState = useState(''),\n      editingKey = _useState[0],\n      setEditingKey = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      title = _useState2[0],\n      setTitle = _useState2[1];\n\n  var _useState3 = useState(\"Submit\"),\n      textOk = _useState3[0],\n      setTextOk = _useState3[1];\n\n  var _useState4 = useState(\"Add Section\"),\n      textEdit = _useState4[0],\n      setTextEdit = _useState4[1];\n\n  var _useState5 = useState(\"Cancel\"),\n      textCancel = _useState5[0],\n      setTextCancel = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      modalString = _useState6[0],\n      setModalString = _useState6[1];\n\n  var _useState7 = useState(''),\n      modalType = _useState7[0],\n      setModalType = _useState7[1];\n\n  var _useState8 = useState(false),\n      visible = _useState8[0],\n      setVisible = _useState8[1];\n\n  var _useState9 = useState(false),\n      isDisableButtonAddFunction = _useState9[0],\n      setIsDisableButtonAddFunction = _useState9[1];\n\n  var _Form$useForm = Form.useForm(),\n      _Form$useForm2 = _slicedToArray(_Form$useForm, 1),\n      form = _Form$useForm2[0];\n\n  var userAccessManagementStore = props.userAccessManagementStore,\n      t = props.t;\n\n  var isEditing = function isEditing(record) {\n    return record.key === editingKey;\n  };\n\n  var edit = function edit(record) {\n    form.setFieldsValue(_objectSpread({\n      name: '',\n      status: record.status\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  var EditableCell = function EditableCell(_ref) {\n    var editing = _ref.editing,\n        dataIndex = _ref.dataIndex,\n        title = _ref.title,\n        inputType = _ref.inputType,\n        record = _ref.record,\n        index = _ref.index,\n        children = _ref.children,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: true,\n        message: \"Please Input \".concat(title, \"!\")\n      }],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    })) : children);\n  };\n\n  var goBackToMenuList = function goBackToMenuList() {\n    userAccessManagementStore.nextPageIsManageMenu = false;\n  };\n\n  var addNewFunction = function addNewFunction() {\n    var newFunction = {\n      key: dataSourceSection.length + 1,\n      name: ''\n    };\n    setDataSourceSection([].concat(_toConsumableArray(dataSourceSection), [newFunction]));\n    edit(newSection);\n    setIsDisableButtonAddSection(true);\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: function onClick() {\n      return goBackToMenuList();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 15\n    }\n  }, \"Back\"))), __jsx(SimpleModal, {\n    title: title,\n    type: modalType,\n    onOk: function onOk() {\n      return submitEditDepartmentName();\n    },\n    onCancel: function onCancel() {\n      return setVisible(false);\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }));\n}, \"y1EhK1N5e0gYIG4y6HlPHjh3DQw=\", false, function () {\n  return [Form.useForm];\n})));\nexport default ManageMenu;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/menu-and-function/menu/manage-menu.js"],"names":["React","useEffect","useState","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","inject","observer","TcrbButton","TcrbPopconfirm","SimpleModal","ManageMenu","props","editingKey","setEditingKey","title","setTitle","textOk","setTextOk","textEdit","setTextEdit","textCancel","setTextCancel","modalString","setModalString","modalType","setModalType","visible","setVisible","isDisableButtonAddFunction","setIsDisableButtonAddFunction","useForm","form","userAccessManagementStore","t","isEditing","record","key","edit","setFieldsValue","name","status","EditableCell","editing","dataIndex","inputType","index","children","restProps","margin","required","message","goBackToMenuList","nextPageIsManageMenu","addNewFunction","newFunction","dataSourceSection","length","setDataSourceSection","newSection","setIsDisableButtonAddSection","submitEditDepartmentName"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { inject, observer } from 'mobx-react'\nimport { TcrbButton, TcrbPopconfirm } from '../../../antd-styles/styles'\n\n\nimport SimpleModal from '../../../simple-modal'\n\nconst ManageMenu =\n  inject('userAccessManagementStore')\n    (observer((props) => {\n      const [editingKey, setEditingKey] = useState('')\n      const [title, setTitle] = useState(\"\")\n      const [textOk, setTextOk] = useState(\"Submit\")\n      const [textEdit, setTextEdit] = useState(\"Add Section\")\n      const [textCancel, setTextCancel] = useState(\"Cancel\")\n      const [modalString, setModalString] = useState(\"\")\n      const [modalType, setModalType] = useState('')\n      const [visible, setVisible] = useState(false)\n      const [isDisableButtonAddFunction, setIsDisableButtonAddFunction] = useState(false)\n\n      const [form] = Form.useForm();\n\n      const { userAccessManagementStore, t } = props\n      const isEditing = record => record.key === editingKey\n\n      const edit = record => {\n        form.setFieldsValue({\n          name: '',\n          status: record.status,\n          ...record,\n        });\n        setEditingKey(record.key);\n      }\n\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        return (\n          <td {...restProps}>\n            {editing ? (\n              <Form.Item\n                name={dataIndex}\n                style={{\n                  margin: 0\n                }}\n                rules={[\n                  {\n                    required: true,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                <Input />\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        )\n      }\n      const goBackToMenuList = () => {\n        userAccessManagementStore.nextPageIsManageMenu = false\n\n      }\n\n      const addNewFunction = () => {\n        let newFunction = {\n          key: dataSourceSection.length + 1,\n          name: ''\n        }\n        setDataSourceSection([...dataSourceSection, newFunction])\n        edit(newSection)\n        setIsDisableButtonAddSection(true)\n      }\n      return (\n        <div>\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"default\" onClick={() => goBackToMenuList()}>Back</TcrbButton>\n            </Col>\n          </Row>\n          {/* <Row gutter={[4, 24]}>\n            <Col span={5}>Menu</Col>\n            <Col span={7}> {showEditDepartment ?\n              <SimpleInput defaultValue={userAccessManagementStore.departmentSelected.name} onChange={(value) => departmentName = value} /> : userAccessManagementStore.departmentSelected.name\n            }\n            </Col>\n          </Row>\n\n          <Row justify=\"center\" style={{ marginTop: 8 }}>\n            <Col span={4}>\n              {showEditDepartment ?\n                <Space size={8}>\n                  <TcrbButton className=\"default\" onClick={() => { cancelEditDepartment() }} >Cancel</TcrbButton>\n                  <TcrbButton className=\"primary\" onClick={() => { openModalSubmitEditDepartmentName() }} >Submit</TcrbButton>\n                </Space>\n                :\n                <TcrbButton className=\"primary\" onClick={() => { enableEditDepartment() }} >Edit</TcrbButton>}\n            </Col>\n          </Row>\n          <Divider />\n          <Row gutter={[4, 24]}>\n            <Col span={2}>\n              <TcrbButton className=\"primary\" onClick={() => addRowProductList()} disabled={isDisableButtonAddFunction}>Add Function</TcrbButton>\n            </Col>\n          </Row>\n          <Row>\n            <Col flex={100}>\n              <Form form={form} component={false}>\n                <Table\n                  components={{\n                    body: {\n                      cell: EditableCell,\n                    },\n                  }}\n                  bordered\n                  dataSource={dataSourceSection}\n                  columns={mergedColumns}\n                  size=\"small\"\n                />\n              </Form>\n            </Col>\n          </Row> */}\n          <SimpleModal\n            title={title}\n            type={modalType}\n            onOk={() => submitEditDepartmentName()}\n            onCancel={() => setVisible(false)}\n            textCancel={textCancel}\n            textOk={textOk}\n            width={600}\n            modalString={modalString}\n            visible={visible}\n          />\n\n        </div>\n      )\n    }))\n\nexport default ManageMenu\n"]},"metadata":{},"sourceType":"module"}