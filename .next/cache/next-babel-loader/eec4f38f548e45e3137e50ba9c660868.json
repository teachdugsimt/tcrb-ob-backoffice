{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/product-limit-setup/product-list.js\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from 'react';\nimport { DeleteOutlined, SettingOutlined, FormOutlined, ApartmentOutlined } from '@ant-design/icons';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider } from 'antd';\nimport { green, gold } from '@ant-design/colors';\nimport { inject, observer } from 'mobx-react';\nimport { withTranslation } from '../../../i18n';\nimport styled from 'styled-components';\nimport { toJS } from 'mobx';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { addKeyToDataSource } from '../../data-utility';\nconst ProductList = inject('businessParametersSetupStore')(observer(props => {\n  const {\n    0: editingKey,\n    1: setEditingKey\n  } = useState('');\n  const {\n    0: disabledButtonAddRow,\n    1: setDisabledButtonAddRow\n  } = useState(false);\n  const {\n    0: dataSource,\n    1: setDataSource\n  } = useState([]);\n  const {\n    0: productList,\n    1: setProductList\n  } = useState([]);\n  const {\n    businessParametersSetupStore,\n    t\n  } = props;\n  const [form] = Form.useForm();\n\n  const isEditing = record => record.key === editingKey;\n\n  useEffect(() => {\n    businessParametersSetupStore.getDataProductLimit();\n    businessParametersSetupStore.getDataChannelPartnerList();\n    businessParametersSetupStore.getDataProductList();\n  }, []);\n  useEffect(() => {\n    if (businessParametersSetupStore.productLimit.length > 0) {\n      addKeyToDataSource(businessParametersSetupStore.productLimit).then(result => {\n        businessParametersSetupStore.arrayProductLimit = result;\n        setDataSource(result);\n      });\n    }\n  }, [businessParametersSetupStore.productLimit]);\n  useEffect(() => {\n    if (businessParametersSetupStore.productList.length > 1) {\n      setProductList(businessParametersSetupStore.productList);\n    }\n  }, [businessParametersSetupStore.productList]);\n\n  const edit = record => {\n    form.setFieldsValue(_objectSpread({\n      product_type: '',\n      product_description: '',\n      transaction_limit: '',\n      daily_limit: '',\n      Specific: ''\n    }, record));\n    setEditingKey(record.key);\n  };\n\n  const EditableCell = (_ref) => {\n    let {\n      editing,\n      dataIndex,\n      title,\n      inputType,\n      record,\n      index,\n      children\n    } = _ref,\n        restProps = _objectWithoutProperties(_ref, [\"editing\", \"dataIndex\", \"title\", \"inputType\", \"record\", \"index\", \"children\"]);\n\n    const inputNode = inputType === 'number' ? __jsx(InputNumber, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 52\n      }\n    }) : __jsx(Input, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 70\n      }\n    });\n    return __jsx(\"td\", _extends({}, restProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }\n    }), editing ? __jsx(Form.Item, {\n      name: dataIndex == 'product_type' ? 'product_code' : dataIndex,\n      style: {\n        margin: 0\n      },\n      rules: [{\n        required: inputType === 'number' ? true : false,\n        message: `Please Input ${title}!`\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }, dataIndex == 'product_type' ? __jsx(Select, {\n      style: {\n        width: '100%'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 19\n      }\n    }, productList.map((item, index) => __jsx(Option, {\n      key: index,\n      value: item.product_code,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 55\n      }\n    }, item.product_type))) : __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }, inputNode)) : children);\n  };\n\n  const addRowProductList = () => {\n    let newProduct = {\n      key: dataSource.length + 1,\n      product_code: '',\n      product_description: '',\n      transaction_limit: '',\n      daily_limit: '',\n      Specific: ''\n    };\n    setDataSource([...dataSource, newProduct]);\n    edit(newProduct);\n    setDisabledButtonAddRow(true);\n    businessParametersSetupStore.arrayProductLimit = dataSource;\n  };\n\n  const submitAddnewProduct = async key => {\n    // Call api to update record status\n    const row = await form.validateFields();\n    row.status = '2';\n    row.transaction_code = \"6931\";\n    let indexProduct = productList.findIndex(item => row.product_code === item.product_code);\n    row.product_type = productList[indexProduct].product_type;\n    const newData = [...dataSource];\n    const index = newData.findIndex(item => key === item.key);\n\n    if (index > -1) {\n      const item = newData[index];\n      newData.splice(index, 1, _objectSpread(_objectSpread({}, item), row));\n      setDataSource(newData);\n      setEditingKey('');\n    } else {\n      newData.push(row);\n      setDataSource(newData);\n      setEditingKey('');\n    }\n\n    setDisabledButtonAddRow(false);\n    businessParametersSetupStore.addNewProductLimit(row);\n  };\n\n  const cancelAddNewProduct = async key => {\n    setDisabledButtonAddRow(false);\n    let indexProduct = dataSource.findIndex(item => key === item.key);\n    const newData = [...dataSource];\n    newData.splice(indexProduct, 1);\n    setDataSource(newData);\n    setEditingKey('');\n  };\n\n  const submitDeleteProduct = record => {\n    //call api to update record status\n    console.log(toJS(record));\n    let indexRecordDelete = dataSource.findIndex(item => record.key === item.key);\n    const newData = [...dataSource];\n    newData[indexRecordDelete].status = '2';\n    businessParametersSetupStore.deleteProductLimit(record);\n    setDataSource(newData); //waiting useEffect to check api success\n  };\n\n  const renderOnclickHandler = (text, record) => {\n    let stringToNumber = new Number(text);\n\n    if (isNaN(stringToNumber)) {\n      return __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 18\n        }\n      }, text);\n    } else {\n      let customText = stringToNumber.toLocaleString();\n      return __jsx(\"p\", {\n        style: {\n          textAlign: \"right\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 18\n        }\n      }, customText);\n    }\n  };\n\n  const selectProductToViewDetail = rowSelected => {\n    //call api to get Detail Product\n    businessParametersSetupStore.getDataDetailProductLimit(rowSelected.product_code); // businessParametersSetupStore.getDataChannelPartnerList()\n  };\n\n  const selectProductToSpecificLimit = record => {\n    businessParametersSetupStore.productSelect = record;\n    businessParametersSetupStore.nextPageIsAddPartner = true; // setViewSpecificProduct(true)\n  };\n\n  const renderActionAddDeleteHandler = (record, index) => {\n    if (record.status === '1') {\n      return __jsx(\"div\", {\n        style: {\n          textAlign: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Sure to Delete?\",\n        onConfirm: e => {\n          submitDeleteProduct(record);\n        },\n        disabled: editingKey !== '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 15\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 17\n        }\n      }, __jsx(DeleteOutlined, {\n        style: {\n          fontSize: '18px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 20\n        }\n      }))), __jsx(\"a\", {\n        onClick: () => selectProductToViewDetail(record),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 15\n        }\n      }, __jsx(ApartmentOutlined, {\n        style: {\n          fontSize: '18px',\n          color: '#FBA928'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 68\n        }\n      })));\n    } else if (record.status === '2') {\n      return null;\n    } else {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 19\n        }\n      }, __jsx(TcrbPopconfirm, {\n        title: \"Confirm to Add !!!\",\n        onConfirm: () => {\n          submitAddnewProduct(record.key);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 15\n        }\n      }, \"Confirm\")), __jsx(\"br\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 30\n        }\n      }), __jsx(TcrbPopconfirm, {\n        title: \"Confirm to Cancel !!!\",\n        onConfirm: () => {\n          cancelAddNewProduct(record.key);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }\n      }, \"Cancel\")));\n    }\n  };\n\n  const renderStatus = record => {\n    if (record.status === '1') {\n      return __jsx(\"p\", {\n        style: {\n          color: green[6]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 18\n        }\n      }, \"Active\");\n    } else if (record.status === '2') {\n      return __jsx(\"p\", {\n        style: {\n          color: gold[6]\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 18\n        }\n      }, \"Pending\");\n    } else {\n      return null;\n    }\n  };\n\n  const renderActionSpecificHandler = record => {\n    return __jsx(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 16\n      }\n    }, __jsx(\"a\", {\n      onClick: () => selectProductToSpecificLimit(record),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 53\n      }\n    }, __jsx(ApartmentOutlined, {\n      style: {\n        fontSize: '18px',\n        color: '#FBA928'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 109\n      }\n    })));\n  };\n\n  const columns = [{\n    dataIndex: 'operation',\n    render: (text, record, index) => renderStatus(record, index)\n  }, {\n    title: 'Product_Code',\n    dataIndex: 'product_type',\n    width: '5%',\n    editable: true,\n    render: (text, record) => renderOnclickHandler(text, record)\n  }, {\n    title: 'Product_Description',\n    dataIndex: 'product_description',\n    editable: true,\n    render: (text, record) => renderOnclickHandler(text, record)\n  }, {\n    title: 'All-Channel Txn Limit',\n    dataIndex: 'transaction_limit',\n    editable: true,\n    render: (text, record) => renderOnclickHandler(text, record)\n  }, {\n    title: 'All-Channel Daily Limit',\n    dataIndex: 'daily_limit',\n    editable: true,\n    render: (text, record) => renderOnclickHandler(text, record)\n  }, {\n    title: 'Specific Channel Limit',\n    dataIndex: 'Specific',\n    // editable: true,\n    render: (text, record) => renderActionSpecificHandler(text, record)\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    render: (text, record, index) => renderActionAddDeleteHandler(record, index)\n  }];\n  const mergedColumns = columns.map(col => {\n    if (!col.editable) {\n      return col;\n    }\n\n    return _objectSpread(_objectSpread({}, col), {}, {\n      onCell: record => ({\n        record,\n        inputType: col.dataIndex === 'product_description' ? 'text' : 'number',\n        dataIndex: col.dataIndex,\n        title: col.title,\n        editing: isEditing(record)\n      })\n    });\n  });\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    onClick: () => addRowProductList(),\n    style: {\n      marginBottom: 16\n    },\n    disabled: disabledButtonAddRow,\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }\n  }, \"Add a Product\")), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 11\n    }\n  }, __jsx(Col, {\n    flex: 100,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }\n  }, __jsx(Form, {\n    form: form,\n    component: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 15\n    }\n  }, __jsx(Table, {\n    components: {\n      body: {\n        cell: EditableCell\n      }\n    },\n    bordered: true,\n    dataSource: dataSource,\n    columns: mergedColumns,\n    size: \"small\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 17\n    }\n  })))));\n}));\nexport default withTranslation('common')(ProductList);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/product-limit-setup/product-list.js"],"names":["React","useState","useEffect","DeleteOutlined","SettingOutlined","FormOutlined","ApartmentOutlined","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","green","gold","inject","observer","withTranslation","styled","toJS","TcrbButton","TcrbPopconfirm","addKeyToDataSource","ProductList","props","editingKey","setEditingKey","disabledButtonAddRow","setDisabledButtonAddRow","dataSource","setDataSource","productList","setProductList","businessParametersSetupStore","t","form","useForm","isEditing","record","key","getDataProductLimit","getDataChannelPartnerList","getDataProductList","productLimit","length","then","result","arrayProductLimit","edit","setFieldsValue","product_type","product_description","transaction_limit","daily_limit","Specific","EditableCell","editing","dataIndex","title","inputType","index","children","restProps","inputNode","margin","required","message","width","map","item","product_code","addRowProductList","newProduct","submitAddnewProduct","row","validateFields","status","transaction_code","indexProduct","findIndex","newData","splice","push","addNewProductLimit","cancelAddNewProduct","submitDeleteProduct","console","log","indexRecordDelete","deleteProductLimit","renderOnclickHandler","text","stringToNumber","Number","isNaN","customText","toLocaleString","textAlign","selectProductToViewDetail","rowSelected","getDataDetailProductLimit","selectProductToSpecificLimit","productSelect","nextPageIsAddPartner","renderActionAddDeleteHandler","e","fontSize","color","renderStatus","renderActionSpecificHandler","columns","render","editable","mergedColumns","col","onCell","marginBottom","body","cell"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { DeleteOutlined, SettingOutlined, FormOutlined, ApartmentOutlined } from '@ant-design/icons';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider } from 'antd'\nimport { green, gold } from '@ant-design/colors';\nimport { inject, observer } from 'mobx-react'\nimport { withTranslation } from '../../../i18n'\nimport styled from 'styled-components'\nimport { toJS } from 'mobx'\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { addKeyToDataSource } from '../../data-utility'\n\n\nconst ProductList =\n  inject('businessParametersSetupStore')\n    (observer((props) => {\n      const [editingKey, setEditingKey] = useState('')\n      const [disabledButtonAddRow, setDisabledButtonAddRow] = useState(false)\n      const [dataSource, setDataSource] = useState([])\n      const [productList, setProductList] = useState([])\n\n      const { businessParametersSetupStore, t } = props\n      const [form] = Form.useForm();\n      const isEditing = record => record.key === editingKey;\n\n      useEffect(() => {\n        businessParametersSetupStore.getDataProductLimit()\n        businessParametersSetupStore.getDataChannelPartnerList()\n        businessParametersSetupStore.getDataProductList()\n      }, []);\n\n      useEffect(() => {\n        if (businessParametersSetupStore.productLimit.length > 0) {\n          addKeyToDataSource(businessParametersSetupStore.productLimit).then((result) => {\n            businessParametersSetupStore.arrayProductLimit = result\n            setDataSource(result)\n          })\n        }\n      }, [businessParametersSetupStore.productLimit])\n\n      useEffect(() => {\n        if (businessParametersSetupStore.productList.length > 1) {\n          setProductList(businessParametersSetupStore.productList)\n        }\n      }, [businessParametersSetupStore.productList])\n\n      const edit = record => {\n        form.setFieldsValue({\n          product_type: '',\n          product_description: '',\n          transaction_limit: '',\n          daily_limit: '',\n          Specific: '',\n          ...record,\n        });\n        setEditingKey(record.key);\n      };\n      const EditableCell = ({\n        editing,\n        dataIndex,\n        title,\n        inputType,\n        record,\n        index,\n        children,\n        ...restProps\n      }) => {\n        const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n        return (\n          <td {...restProps}>\n            {editing ? (\n\n              <Form.Item\n                name={dataIndex == 'product_type' ? 'product_code' : dataIndex}\n                style={{\n                  margin: 0,\n                }}\n                rules={[\n                  {\n                    required: (inputType === 'number') ? true : false,\n                    message: `Please Input ${title}!`,\n                  },\n                ]}\n              >\n                {/* {inputNode} */}\n                {dataIndex == 'product_type' ? (\n                  <Select\n                    style={{ width: '100%' }}\n                  >\n                    {productList.map((item, index) => <Option key={index} value={item.product_code}>{item.product_type}</Option>)}\n                  </Select>) : (\n                    <div>\n                      {inputNode}\n                    </div>\n                  )}\n              </Form.Item>\n            ) : (\n                children\n              )\n            }\n          </td>\n        );\n      };\n      const addRowProductList = () => {\n        let newProduct = {\n          key: dataSource.length + 1,\n          product_code: '',\n          product_description: '',\n          transaction_limit: '',\n          daily_limit: '',\n          Specific: '',\n        }\n        setDataSource([...dataSource, newProduct])\n        edit(newProduct)\n        setDisabledButtonAddRow(true)\n        businessParametersSetupStore.arrayProductLimit = dataSource\n      }\n      const submitAddnewProduct = async (key) => {\n        // Call api to update record status\n        const row = await form.validateFields();\n        row.status = '2'\n        row.transaction_code = \"6931\"\n        let indexProduct = productList.findIndex(item => row.product_code === item.product_code)\n        row.product_type = productList[indexProduct].product_type\n        const newData = [...dataSource];\n        const index = newData.findIndex(item => key === item.key);\n        if (index > -1) {\n          const item = newData[index];\n          newData.splice(index, 1, { ...item, ...row });\n          setDataSource(newData);\n          setEditingKey('');\n        } else {\n          newData.push(row);\n          setDataSource(newData);\n          setEditingKey('');\n        }\n        setDisabledButtonAddRow(false)\n        businessParametersSetupStore.addNewProductLimit(row)\n      }\n\n      const cancelAddNewProduct = async (key) => {\n        setDisabledButtonAddRow(false)\n        let indexProduct = dataSource.findIndex(item => key === item.key)\n        const newData = [...dataSource]\n        newData.splice(indexProduct, 1)\n        setDataSource(newData);\n        setEditingKey('');\n      }\n\n      const submitDeleteProduct = (record) => {\n        //call api to update record status\n        console.log(toJS(record))\n        let indexRecordDelete = dataSource.findIndex(item => record.key === item.key)\n        const newData = [...dataSource];\n        newData[indexRecordDelete].status = '2'\n        businessParametersSetupStore.deleteProductLimit(record)\n        setDataSource(newData) //waiting useEffect to check api success\n      }\n      const renderOnclickHandler = (text, record) => {\n        let stringToNumber = new Number(text)\n        if (isNaN(stringToNumber)) {\n          return <p>{text}</p>\n        } else {\n          let customText = stringToNumber.toLocaleString()\n          return <p style={{ textAlign: \"right\" }}>{customText}</p>\n        }\n      }\n      const selectProductToViewDetail = (rowSelected) => {\n        //call api to get Detail Product\n        businessParametersSetupStore.getDataDetailProductLimit(rowSelected.product_code)\n        // businessParametersSetupStore.getDataChannelPartnerList()\n      }\n\n      const selectProductToSpecificLimit = (record) => {\n        businessParametersSetupStore.productSelect = record\n        businessParametersSetupStore.nextPageIsAddPartner = true\n        // setViewSpecificProduct(true)\n      }\n      const renderActionAddDeleteHandler = (record, index) => {\n        if (record.status === '1') {\n          return (\n            <div style={{ textAlign: \"center\" }}>\n              <TcrbPopconfirm title=\"Sure to Delete?\" onConfirm={(e) => { submitDeleteProduct(record) }} disabled={editingKey !== ''}>\n                <a><DeleteOutlined style={{ fontSize: '18px' }} /></a>\n              </TcrbPopconfirm>\n              <a onClick={() => selectProductToViewDetail(record)}><ApartmentOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a>\n              {/* <a onClick={() => selectProductToSpecificLimit(record)}><ApartmentOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a> */}\n            </div>)\n        } else if (record.status === '2') {\n          return null\n        } else {\n          return (<div>\n            <TcrbPopconfirm title={\"Confirm to Add !!!\"} onConfirm={() => { submitAddnewProduct(record.key) }} >\n              <a>Confirm</a>\n            </TcrbPopconfirm><br />\n            <TcrbPopconfirm title={\"Confirm to Cancel !!!\"} onConfirm={() => { cancelAddNewProduct(record.key) }} >\n              <a>Cancel</a>\n            </TcrbPopconfirm>\n          </div>)\n        }\n      }\n      const renderStatus = (record) => {\n        if (record.status === '1') {\n          return <p style={{ color: green[6] }}>Active</p>\n        } else if (record.status === '2') {\n          return <p style={{ color: gold[6] }}>Pending</p>\n        } else {\n          return null\n        }\n      }\n      const renderActionSpecificHandler = (record) => {\n        return <div style={{ textAlign: \"center\" }}><a onClick={() => selectProductToSpecificLimit(record)}><ApartmentOutlined style={{ fontSize: '18px', color: '#FBA928' }} /></a></div>\n      }\n      const columns = [\n        {\n          dataIndex: 'operation',\n          render: (text, record, index) =>\n            renderStatus(record, index)\n        },\n        {\n          title: 'Product_Code',\n          dataIndex: 'product_type',\n          width: '5%',\n          editable: true,\n          render: (text, record) => renderOnclickHandler(text, record)\n        },\n        {\n          title: 'Product_Description',\n          dataIndex: 'product_description',\n          editable: true,\n          render: (text, record) => renderOnclickHandler(text, record)\n        },\n        {\n          title: 'All-Channel Txn Limit',\n          dataIndex: 'transaction_limit',\n          editable: true,\n          render: (text, record) => renderOnclickHandler(text, record)\n        },\n        {\n          title: 'All-Channel Daily Limit',\n          dataIndex: 'daily_limit',\n          editable: true,\n          render: (text, record) => renderOnclickHandler(text, record)\n        },\n        {\n          title: 'Specific Channel Limit',\n          dataIndex: 'Specific',\n          // editable: true,\n          render: (text, record) => renderActionSpecificHandler(text, record)\n        },\n        {\n          title: 'Action',\n          dataIndex: 'operation',\n          render: (text, record, index) =>\n            renderActionAddDeleteHandler(record, index)\n        },\n      ];\n\n      const mergedColumns = columns.map(col => {\n        if (!col.editable) {\n          return col;\n        }\n\n        return {\n          ...col,\n          onCell: record => ({\n            record,\n            inputType: col.dataIndex === 'product_description' ? 'text' : 'number',\n            dataIndex: col.dataIndex,\n            title: col.title,\n            editing: isEditing(record),\n          }),\n        };\n      });\n      return (\n        <div>\n          <Row>\n            <TcrbButton\n              onClick={() => addRowProductList()}\n              style={{\n                marginBottom: 16,\n              }}\n              disabled={disabledButtonAddRow}\n              className=\"primary\">Add a Product</TcrbButton>\n          </Row>\n          <Row>\n            <Col flex={100}>\n              <Form form={form} component={false}>\n\n                <Table\n                  components={{\n                    body: {\n                      cell: EditableCell,\n                    },\n                  }}\n                  bordered\n                  dataSource={dataSource}\n                  columns={mergedColumns}\n                  size=\"small\"\n                />\n              </Form>\n            </Col>\n\n          </Row>\n        </div>\n      )\n    }))\nexport default withTranslation('common')(ProductList)\n"]},"metadata":{},"sourceType":"module"}