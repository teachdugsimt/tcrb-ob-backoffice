{"ast":null,"code":"var _class, _descriptor, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n// src/stores/theme-store.tsx\nimport { observable, action } from 'mobx';\nlet ThemeStore = (_class = (_temp = class ThemeStore {\n  constructor() {\n    _initializerDefineProperty(this, \"theme\", _descriptor, this);\n  }\n\n  setTheme(newTheme) {\n    this.theme = newTheme;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"theme\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return 'light';\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"setTheme\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"setTheme\"), _class.prototype)), _class);\nexport default ThemeStore;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/theme-store.js"],"names":["observable","action","ThemeStore","setTheme","newTheme","theme"],"mappings":";;;;;;;;AAAA;AACA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;IAEMC,U,sBAAN,MAAMA,UAAN,CAAiB;AAAA;AAAA;AAAA;;AAKfC,EAAAA,QADA,CACSC,QADT,EACmB;AACjB,SAAKC,KAAL,GAAaD,QAAb;AACD;;AAPc,C,+EACdJ,U;;;;;WACO,O;;6DAEPC,M;AAKH,eAAeC,UAAf","sourcesContent":["// src/stores/theme-store.tsx\nimport { observable, action } from 'mobx'\n\nclass ThemeStore {\n  @observable\n  theme = 'light'\n\n  @action\n  setTheme(newTheme) {\n    this.theme = newTheme\n  }\n}\nexport default ThemeStore\n"]},"metadata":{},"sourceType":"module"}