{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/index.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { inject, observer } from 'mobx-react';\nimport CircleButton from '../components/button-circle/circle-button'; // import Link from 'next/link'\n\nimport { TcrbButton } from '../components/antd-styles/styles';\nimport { i18n, Link, withTranslation } from '../i18n';\nvar index = inject('counterStore', 'authenStore')(observer(_s(function (props) {\n  _s();\n\n  var _useState = useState(\"\"),\n      id = _useState[0],\n      setId = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      password = _useState2[0],\n      setPassword = _useState2[1]; // const { counterStore, authenStore } = useStores()\n\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 14\n    }\n  }, __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, \"DashboardV1\"), __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, props.authenStore.id ? \"ID :\" + props.authenStore.id : \"\"), __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, props.authenStore.password ? \"Password : \" + props.authenStore.password : \"\"), __jsx(\"h1\", {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, props.authenStore.type ? \"Type :\" + props.authenStore.type : \"\"), __jsx(\"div\", {\n    style: {\n      color: 'red'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, props.counterStore.count), __jsx(\"button\", {\n    onClick: function onClick() {\n      return props.counterStore.increment();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"++\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return props.counterStore.decrement();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"--\"), __jsx(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, \"Dashboard index\"), __jsx(TcrbButton, {\n    title: i18n.t(\"confirm\"),\n    type: \"primary\",\n    shape: \"round\",\n    size: \"large\",\n    loading: false,\n    onClick: function onClick() {\n      return console.log(\"Success Click!!\", props.counterStore.count);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }));\n}, \"q6YKsEiQbB/HjLDjguOyUUblDf0=\")));\nindex.getInitialProps = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", {\n            namespacesRequired: ['common']\n          });\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n}));\nindex.propTypes = {\n  t: PropTypes.func.isRequired\n};\nexport default withTranslation('common')(index);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/index.js"],"names":["React","useContext","useState","PropTypes","inject","observer","CircleButton","TcrbButton","i18n","Link","withTranslation","index","props","id","setId","password","setPassword","color","authenStore","type","counterStore","count","increment","decrement","t","console","log","getInitialProps","namespacesRequired","propTypes","func","isRequired"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport { inject, observer } from 'mobx-react'\nimport CircleButton from '../components/button-circle/circle-button'\n// import Link from 'next/link'\nimport { TcrbButton } from '../components/antd-styles/styles'\nimport { i18n, Link, withTranslation } from '../i18n'\n\nconst index =\n  inject('counterStore', 'authenStore')\n    (observer((props) => {\n      const [id, setId] = useState(\"\")\n      const [password, setPassword] = useState(\"\")\n\n      // const { counterStore, authenStore } = useStores()\n\n      return <div>\n        <h1 style={{ color: 'red' }}>DashboardV1</h1>\n        <h1 style={{ color: 'red' }}>{props.authenStore.id ? \"ID :\" + props.authenStore.id : \"\"}</h1>\n        <h1 style={{ color: 'red' }}>{props.authenStore.password ? \"Password : \" + props.authenStore.password : \"\"}</h1>\n        <h1 style={{ color: 'red' }}>{props.authenStore.type ? \"Type :\" + props.authenStore.type : \"\"}</h1>\n\n        <div style={{ color: 'red' }}>{props.counterStore.count}</div>\n        <button onClick={() => props.counterStore.increment()}>++</button>\n        <button onClick={() => props.counterStore.decrement()}>--</button>\n        <h1>Dashboard index</h1>\n        <TcrbButton title={i18n.t(\"confirm\")} type={\"primary\"} shape={\"round\"} size={\"large\"}\n          loading={false} onClick={() => console.log(\"Success Click!!\", props.counterStore.count)} ></TcrbButton>\n\n      </div>\n    }))\n\nindex.getInitialProps = async () => ({\n  namespacesRequired: ['common'],\n})\n\nindex.propTypes = {\n  t: PropTypes.func.isRequired,\n}\n\nexport default withTranslation('common')(index)\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}