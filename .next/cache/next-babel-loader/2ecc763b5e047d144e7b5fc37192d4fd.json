{"ast":null,"code":"var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16, _descriptor17, _descriptor18, _temp;\n\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\n\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\n\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\n\n// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx';\nimport { BusinessParameterSetupApi } from '../services';\nlet BusinessParameterSetup = (_class = (_temp = class BusinessParameterSetup {\n  constructor() {\n    _initializerDefineProperty(this, \"editOtpMaximumRetry\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"editOtpExpirationPeriod\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"responseGetOtpValue\", _descriptor3, this);\n\n    _initializerDefineProperty(this, \"fetchingGetOtp\", _descriptor4, this);\n\n    _initializerDefineProperty(this, \"errorGetOtp\", _descriptor5, this);\n\n    _initializerDefineProperty(this, \"responseUpdateOtp\", _descriptor6, this);\n\n    _initializerDefineProperty(this, \"fetchingUpdateOtp\", _descriptor7, this);\n\n    _initializerDefineProperty(this, \"errorUpdateOtp\", _descriptor8, this);\n\n    _initializerDefineProperty(this, \"pendingApprovals\", _descriptor9, this);\n\n    _initializerDefineProperty(this, \"fetchingApi\", _descriptor10, this);\n\n    _initializerDefineProperty(this, \"productLimit\", _descriptor11, this);\n\n    _initializerDefineProperty(this, \"closeExpire\", _descriptor12, this);\n\n    _initializerDefineProperty(this, \"closeMaximum\", _descriptor13, this);\n\n    _initializerDefineProperty(this, \"getOTPdata\", _descriptor14, this);\n\n    _initializerDefineProperty(this, \"updateOTPdata\", _descriptor15, this);\n\n    _initializerDefineProperty(this, \"setCitizenId\", _descriptor16, this);\n\n    _initializerDefineProperty(this, \"setAccountId\", _descriptor17, this);\n\n    _initializerDefineProperty(this, \"getDataProductLimit\", _descriptor18, this);\n  }\n\n  selectProductToDelete(productSelected) {\n    console.log(toJS(productSelected)); // [{\n    //   id: 1, key: 1, ticket: \"PAR0000001\", requestType: \"OTP Max Retrying\", requestDescription: \"Change from 3 to 5\", requestId: \"T630213\",\n    //   requestDate: \"21-May-2020\", action: null\n    // }]\n\n    productSelected.ticket = '00000' + this.pendingApprovals.length + 1;\n    productSelected.requestDescription = productSelected.ProductDescription;\n    this.pendingApprovals.push(productSelected);\n  } // @computed\n  // get doubleCount() {\n  //   return this.count * 2\n  // }\n\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"editOtpMaximumRetry\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"editOtpExpirationPeriod\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"responseGetOtpValue\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \"fetchingGetOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor5 = _applyDecoratedDescriptor(_class.prototype, \"errorGetOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor6 = _applyDecoratedDescriptor(_class.prototype, \"responseUpdateOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor7 = _applyDecoratedDescriptor(_class.prototype, \"fetchingUpdateOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor8 = _applyDecoratedDescriptor(_class.prototype, \"errorUpdateOtp\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _descriptor9 = _applyDecoratedDescriptor(_class.prototype, \"pendingApprovals\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor10 = _applyDecoratedDescriptor(_class.prototype, \"fetchingApi\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _descriptor11 = _applyDecoratedDescriptor(_class.prototype, \"productLimit\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _descriptor12 = _applyDecoratedDescriptor(_class.prototype, \"closeExpire\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return val => {\n      this.editOtpExpirationPeriod = val;\n    };\n  }\n}), _descriptor13 = _applyDecoratedDescriptor(_class.prototype, \"closeMaximum\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return val => {\n      this.editOtpMaximumRetry = val;\n    };\n  }\n}), _descriptor14 = _applyDecoratedDescriptor(_class.prototype, \"getOTPdata\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.fetchingGetOtp = true;\n      let tmp = await BusinessParameterSetupApi.getOtpValue(params);\n\n      if (tmp.ok == true && tmp.status == 200) {\n        let raw_Data = toJS(tmp.data.responseData.paramStoreData);\n        console.log(\"On Success : \", raw_Data);\n        this.fetchingGetOtp = false;\n        this.errorGetOtp = null;\n        this.responseGetOtpValue = raw_Data;\n      } else {\n        console.log(\"= Call get otp failure = \", tmp);\n        this.fetchingGetOtp = false;\n        this.responseGetOtpValue = null;\n        this.errorGetOtp = tmp.problem;\n      }\n    };\n  }\n}), _descriptor15 = _applyDecoratedDescriptor(_class.prototype, \"updateOTPdata\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async params => {\n      this.fetchingUpdateOtp = true;\n      let response = await BusinessParameterSetupApi.setOtpValue(params);\n\n      if (response.ok && response.status == 200) {\n        console.log(\"Update OTP Success :: \", response);\n        this.responseUpdateOtp = response.data;\n        this.fetchingUpdateOtp = false;\n        this.errorUpdateOtp = null;\n      } else {\n        console.log(\"Update OTP FAIL :: \", response);\n        this.fetchingUpdateOtp = false;\n        this.responseUpdateOtp = null;\n        this.errorUpdateOtp = response.problem ? response.problem : \"Client Error\";\n      }\n    };\n  }\n}), _descriptor16 = _applyDecoratedDescriptor(_class.prototype, \"setCitizenId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.citizenId = {\n        idCard: id\n      };\n    };\n  }\n}), _descriptor17 = _applyDecoratedDescriptor(_class.prototype, \"setAccountId\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return id => {\n      this.accountId = id;\n    };\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"selectProductToDelete\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"selectProductToDelete\"), _class.prototype), _descriptor18 = _applyDecoratedDescriptor(_class.prototype, \"getDataProductLimit\", [action], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return async () => {\n      this.fetchingUpdateOtp = true;\n      let response = await BusinessParameterSetupApi.getProductLimit({\n        partner_code: ''\n      });\n      console.log(response);\n\n      if (response.ok && response.status == 200) {\n        this.productLimit = response.data.responseData;\n      } else {}\n    };\n  }\n})), _class);\nexport default BusinessParameterSetup;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/stores/business-parameters-setup-store.js"],"names":["observable","action","computed","toJS","BusinessParameterSetupApi","BusinessParameterSetup","selectProductToDelete","productSelected","console","log","ticket","pendingApprovals","length","requestDescription","ProductDescription","push","val","editOtpExpirationPeriod","editOtpMaximumRetry","params","fetchingGetOtp","tmp","getOtpValue","ok","status","raw_Data","data","responseData","paramStoreData","errorGetOtp","responseGetOtpValue","problem","fetchingUpdateOtp","response","setOtpValue","responseUpdateOtp","errorUpdateOtp","id","citizenId","idCard","accountId","getProductLimit","partner_code","productLimit"],"mappings":"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","sourcesContent":["// src/stores/counter-store.tsx\nimport { observable, action, computed, toJS } from 'mobx'\nimport { BusinessParameterSetupApi } from '../services'\n\nclass BusinessParameterSetup {\n  @observable\n  editOtpMaximumRetry = null\n  @observable\n  editOtpExpirationPeriod = null\n\n  @observable\n  responseGetOtpValue = null\n  @observable\n  fetchingGetOtp = null\n  @observable\n  errorGetOtp = null\n\n  @observable\n  responseUpdateOtp = null\n  @observable\n  fetchingUpdateOtp = null\n  @observable\n  errorUpdateOtp = null\n\n  @observable pendingApprovals = []\n  @observable fetchingApi = false\n  @observable productLimit = []\n\n  @action\n  closeExpire = (val) => {\n    this.editOtpExpirationPeriod = val\n  }\n\n  @action\n  closeMaximum = (val) => {\n    this.editOtpMaximumRetry = val\n  }\n\n  @action getOTPdata = async (params) => {\n    this.fetchingGetOtp = true\n    let tmp = await BusinessParameterSetupApi.getOtpValue(params)\n    if (tmp.ok == true && tmp.status == 200) {\n      let raw_Data = toJS(tmp.data.responseData.paramStoreData)\n      console.log(\"On Success : \", raw_Data)\n      this.fetchingGetOtp = false\n      this.errorGetOtp = null\n      this.responseGetOtpValue = raw_Data\n    } else {\n      console.log(\"= Call get otp failure = \", tmp)\n      this.fetchingGetOtp = false\n      this.responseGetOtpValue = null\n      this.errorGetOtp = tmp.problem\n    }\n  }\n\n  @action\n  updateOTPdata = async (params) => {\n    this.fetchingUpdateOtp = true\n    let response = await BusinessParameterSetupApi.setOtpValue(params)\n    if (response.ok && response.status == 200) {\n      console.log(\"Update OTP Success :: \", response)\n      this.responseUpdateOtp = response.data\n      this.fetchingUpdateOtp = false\n      this.errorUpdateOtp = null\n    } else {\n      console.log(\"Update OTP FAIL :: \", response)\n      this.fetchingUpdateOtp = false\n      this.responseUpdateOtp = null\n      this.errorUpdateOtp = response.problem ? response.problem : \"Client Error\"\n    }\n  }\n\n  @action setCitizenId = (id) => {\n    this.citizenId = { idCard: id }\n  }\n  @action setAccountId = (id) => {\n    this.accountId = id\n  }\n\n  @action\n  selectProductToDelete(productSelected) {\n    console.log(toJS(productSelected))\n    // [{\n    //   id: 1, key: 1, ticket: \"PAR0000001\", requestType: \"OTP Max Retrying\", requestDescription: \"Change from 3 to 5\", requestId: \"T630213\",\n    //   requestDate: \"21-May-2020\", action: null\n    // }]\n    productSelected.ticket = '00000' + this.pendingApprovals.length + 1\n    productSelected.requestDescription = productSelected.ProductDescription\n    this.pendingApprovals.push(productSelected)\n  }\n\n  @action\n  getDataProductLimit = async () => {\n    this.fetchingUpdateOtp = true\n    let response = await BusinessParameterSetupApi.getProductLimit({ partner_code: '' })\n    console.log(response)\n    if (response.ok && response.status == 200) {\n      this.productLimit = response.data.responseData\n    } else {\n\n    }\n  }\n  // @computed\n  // get doubleCount() {\n  //   return this.count * 2\n  // }\n}\nexport default BusinessParameterSetup\n"]},"metadata":{},"sourceType":"module"}