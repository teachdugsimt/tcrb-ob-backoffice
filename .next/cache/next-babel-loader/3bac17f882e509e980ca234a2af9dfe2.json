{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/data-utility/index.js\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nvar addKeyToDataSource = function addKeyToDataSource(arrayDataSource) {\n  var newDataSource = arrayDataSource;\n\n  for (var index = 0; index < newDataSource.length; index++) {\n    newDataSource[index].key = index + 1;\n  }\n\n  return new Promise(function (resolve) {\n    resolve(newDataSource);\n  });\n};\n\nvar addCommaInData = function addCommaInData(text, isComma) {\n  var stringToNumber = new Number(text);\n\n  if (isNaN(stringToNumber)) {\n    return __jsx(\"p\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 12\n      }\n    }, text);\n  } else {\n    if (isComma) {\n      var customText = stringToNumber.toLocaleString();\n      return __jsx(\"p\", {\n        style: {\n          textAlign: \"right\"\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 14\n        }\n      }, customText);\n    } else {\n      return __jsx(\"p\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 14\n        }\n      }, text);\n    }\n  }\n};\n\nexport { addKeyToDataSource, addCommaInData };","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/data-utility/index.js"],"names":["addKeyToDataSource","arrayDataSource","newDataSource","index","length","key","Promise","resolve","addCommaInData","text","isComma","stringToNumber","Number","isNaN","customText","toLocaleString","textAlign"],"mappings":";;;;;;AAAA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,eAAD,EAAqB;AAC9C,MAAIC,aAAa,GAAGD,eAApB;;AACA,OAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGD,aAAa,CAACE,MAA1C,EAAkDD,KAAK,EAAvD,EAA2D;AACzDD,IAAAA,aAAa,CAACC,KAAD,CAAb,CAAqBE,GAArB,GAA2BF,KAAK,GAAG,CAAnC;AACD;;AACD,SAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC9BA,IAAAA,OAAO,CAACL,aAAD,CAAP;AACD,GAFM,CAAP;AAGD,CARD;;AASA,IAAMM,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAAOC,OAAP,EAAmB;AACxC,MAAIC,cAAc,GAAG,IAAIC,MAAJ,CAAWH,IAAX,CAArB;;AACA,MAAII,KAAK,CAACF,cAAD,CAAT,EAA2B;AACzB,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,IAAJ,CAAP;AACD,GAFD,MAEO;AACL,QAAIC,OAAJ,EAAa;AACX,UAAII,UAAU,GAAGH,cAAc,CAACI,cAAf,EAAjB;AACA,aAAO;AAAG,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAmCF,UAAnC,CAAP;AACD,KAHD,MAGO;AACL,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAIL,IAAJ,CAAP;AACD;AACF;AACF,CAZD;;AAaA,SACET,kBADF,EAEEQ,cAFF","sourcesContent":["const addKeyToDataSource = (arrayDataSource) => {\n  let newDataSource = arrayDataSource\n  for (let index = 0; index < newDataSource.length; index++) {\n    newDataSource[index].key = index + 1;\n  }\n  return new Promise((resolve) => {\n    resolve(newDataSource)\n  })\n}\nconst addCommaInData = (text, isComma) => {\n  let stringToNumber = new Number(text)\n  if (isNaN(stringToNumber)) {\n    return <p>{text}</p>\n  } else {\n    if (isComma) {\n      let customText = stringToNumber.toLocaleString()\n      return <p style={{ textAlign: \"right\" }}>{customText}</p>\n    } else {\n      return <p>{text}</p>\n    }\n  }\n}\nexport {\n  addKeyToDataSource,\n  addCommaInData\n}\n"]},"metadata":{},"sourceType":"module"}