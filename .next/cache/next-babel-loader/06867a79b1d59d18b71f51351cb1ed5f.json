{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/manage-group.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState, useEffect } from 'react';\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd';\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles';\nimport { inject, observer } from 'mobx-react';\nimport SimpleInput from '../../simple-input';\nimport SimpleModal from '../../simple-modal';\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility';\nimport { toJS } from 'mobx';\nvar Option = Select.Option;\nvar listUserSelect = [];\nvar name = null;\nvar role_id = null;\nvar ManageGroup = inject('userAccessManagementStore')(observer(_s(function (props) {\n  _s();\n\n  var userAccessManagementStore = props.userAccessManagementStore,\n      t = props.t;\n\n  var _useState = useState(false),\n      showEditGroup = _useState[0],\n      setShowEditGroup = _useState[1];\n\n  var _useState2 = useState([]),\n      roleList = _useState2[0],\n      setRoleList = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      modalTitle = _useState3[0],\n      setModalTitle = _useState3[1];\n\n  var _useState4 = useState(\"Submit\"),\n      textOk = _useState4[0],\n      settextOk = _useState4[1];\n\n  var _useState5 = useState(\"Cancel\"),\n      textCancel = _useState5[0],\n      settextCancel = _useState5[1];\n\n  var _useState6 = useState(\"\"),\n      modalString = _useState6[0],\n      setmodalString = _useState6[1];\n\n  var _useState7 = useState('confirm'),\n      modalType = _useState7[0],\n      setModalType = _useState7[1];\n\n  var _useState8 = useState(false),\n      visible = _useState8[0],\n      setvisible = _useState8[1];\n\n  var _useState9 = useState([]),\n      userInGroupList = _useState9[0],\n      setUserInGroupList = _useState9[1];\n\n  useEffect(function () {\n    setRoleList([]);\n    console.log(toJS(userAccessManagementStore.groupSelected));\n    splitMapUserGroups(userAccessManagementStore.groupSelected.map_user_groups); // addKeyToUserInGroup(userAccessManagementStore.groupSelected.map_user_groups)\n  }, []);\n  useEffect(function () {\n    console.log(toJS(userAccessManagementStore.groupSelected));\n\n    if (Object.keys(userAccessManagementStore.groupSelected).length === 0) {\n      null;\n    } else {\n      splitMapUserGroups(userAccessManagementStore.groupSelected.map_user_groups);\n    }\n  }, [userAccessManagementStore.groupSelected]);\n\n  var addKeyToUserInGroup = function addKeyToUserInGroup(userInGroupList) {\n    addKeyToDataSource(userInGroupList).then(function (result) {\n      setUserInGroupList(result);\n    });\n  };\n\n  var splitMapUserGroups = function splitMapUserGroups(dataMapUserGroup) {\n    console.log(toJS(dataMapUserGroup));\n    var newUserObject = [];\n\n    for (var index = 0; index < dataMapUserGroup.length; index++) {\n      newUserObject.push(_objectSpread({\n        name: dataMapUserGroup[index].user_profile.name,\n        surname: dataMapUserGroup[index].user_profile.surname,\n        email: dataMapUserGroup[index].user_profile.email,\n        key: index\n      }, dataMapUserGroup[index]));\n    }\n\n    setUserInGroupList(newUserObject);\n    console.log(newUserObject);\n  };\n\n  var columnUser = [{\n    title: '',\n    dataIndex: 'status',\n    width: '5%',\n    render: function render(text, record) {\n      return checkDefaultStatus(record.status, record.request_status);\n    }\n  }, {\n    title: 'Name',\n    dataIndex: 'name' // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n\n  }, {\n    title: 'Last Name',\n    dataIndex: 'surname' // render: (text, record) => renderSection(record)\n\n  }, {\n    title: 'Action',\n    dataIndex: 'operation',\n    width: '10%',\n    render: function render(text, record) {\n      return renderActionGroupUser(record);\n    }\n  }];\n\n  var AddUserToGroup = function AddUserToGroup() {\n    return __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }\n    }, __jsx(Select, {\n      mode: \"multiple\",\n      style: {\n        width: '100%'\n      },\n      placeholder: \"Please select user\",\n      onChange: function onChange(value) {\n        listUserSelect = value;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }\n    }, userList.map(function (item, index) {\n      return __jsx(Option, {\n        key: index,\n        value: item.id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 44\n        }\n      }, item.user_name);\n    })));\n  };\n\n  var goBackGroupList = function goBackGroupList() {\n    userAccessManagementStore.nextPageIsManageGroup = false;\n  };\n\n  var cancelEditGroup = function cancelEditGroup() {\n    setShowEditGroup(false);\n  };\n\n  var submitEditGroup = function submitEditGroup() {\n    //waiting for call api\n    setShowEditGroup(false);\n  };\n\n  var openModalAddUser = function openModalAddUser() {\n    setModalTitle('Add user to ' + userAccessManagementStore.groupSelected.group_name);\n    setmodalString(__jsx(AddUserToGroup, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 22\n      }\n    }));\n    setvisible(true);\n  };\n\n  var deleteUserSelected = function deleteUserSelected(record) {\n    //waiting call api\n    userAccessManagementStore.submitDeleteUserInGroup(record);\n  };\n\n  var addUser = function addUser() {\n    //waiting call api\n    setvisible(false);\n  };\n\n  var renderActionGroupUser = function renderActionGroupUser(record) {\n    if (record.status == 'ACTIVE') {\n      if (record.request_status == 'APPROVE' || record.request_status == 'REJECT') {\n        return __jsx(\"div\", {\n          style: {\n            textAlign: \"center\"\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }\n        }, __jsx(TcrbPopconfirm, {\n          title: \"Sure to Deactivate?\",\n          onConfirm: function onConfirm() {\n            return deleteUserSelected(record);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }\n        }, __jsx(\"a\", {\n          style: {\n            color: '#FBA928'\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 17\n          }\n        }, \"Deactivate\")));\n      } else if (record.request_status == 'PENDING') {\n        return null;\n      }\n    } else if (status == 'INACTIVE') {\n      if (record.request_status == 'PENDING') {\n        return null;\n      }\n    } else {\n      return null;\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }, __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: function onClick() {\n      return goBackGroupList();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }\n  }, \"Back\"))), __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 11\n    }\n  }, \"Group Name\"), __jsx(Col, {\n    span: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 11\n    }\n  }, \" \", showEditGroup ? __jsx(SimpleInput, {\n    defaultValue: userAccessManagementStore.groupSelected.name,\n    onChange: function onChange(value) {\n      return name = value;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }\n  }) : userAccessManagementStore.groupSelected.name)), showEditGroup ? __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 26\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 11\n    }\n  }, \"Role\"), __jsx(Col, {\n    span: 6,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 11\n    }\n  }, __jsx(Select, {\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Please select\",\n    onChange: function onChange(value) {\n      return roleSelect = value;\n    },\n    defaultValue: 1 //waiting value from store\n    ,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 13\n    }\n  }, roleList.map(function (item, index) {\n    return __jsx(Option, {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 46\n      }\n    }, item.role_name);\n  })))) : null, __jsx(Row, {\n    justify: \"center\",\n    style: {\n      marginTop: 8\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 4,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 11\n    }\n  }, showEditGroup ? __jsx(Space, {\n    size: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 15\n    }\n  }, __jsx(TcrbButton, {\n    className: \"default\",\n    onClick: function onClick() {\n      cancelEditGroup();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 17\n    }\n  }, \"Cancel\"), __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      submitEditGroup();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }\n  }, \"Submit\")) : __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      setShowEditGroup(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 15\n    }\n  }, \"Edit\"))), __jsx(Divider, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }), __jsx(Row, {\n    gutter: [4, 24],\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }\n  }, __jsx(TcrbButton, {\n    className: \"primary\",\n    onClick: function onClick() {\n      return openModalAddUser();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, \"Add User\"))), __jsx(Table, {\n    bordered: true,\n    dataSource: userInGroupList,\n    columns: columnUser,\n    size: \"small\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }\n  }), __jsx(SimpleModal, {\n    title: modalTitle,\n    type: modalType,\n    onOk: function onOk() {\n      return addUser();\n    },\n    onCancel: function onCancel() {\n      return setvisible(false);\n    },\n    textCancel: textCancel,\n    textOk: textOk,\n    width: 600,\n    modalString: modalString,\n    visible: visible,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 9\n    }\n  }));\n}, \"uRidWriNNXjK1XW7LDPwjmtw8KI=\")));\nexport default ManageGroup;","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/user-access-management/group/manage-group.js"],"names":["React","useState","useEffect","Table","Row","Col","Menu","Card","Input","Select","Form","InputNumber","Divider","Button","Modal","Drawer","Space","DeleteOutlined","EditOutlined","FormOutlined","TcrbButton","TcrbPopconfirm","inject","observer","SimpleInput","SimpleModal","checkDefaultStatus","addKeyToDataSource","toJS","Option","listUserSelect","name","role_id","ManageGroup","props","userAccessManagementStore","t","showEditGroup","setShowEditGroup","roleList","setRoleList","modalTitle","setModalTitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","modalType","setModalType","visible","setvisible","userInGroupList","setUserInGroupList","console","log","groupSelected","splitMapUserGroups","map_user_groups","Object","keys","length","addKeyToUserInGroup","then","result","dataMapUserGroup","newUserObject","index","push","user_profile","surname","email","key","columnUser","title","dataIndex","width","render","text","record","status","request_status","renderActionGroupUser","AddUserToGroup","value","userList","map","item","id","user_name","goBackGroupList","nextPageIsManageGroup","cancelEditGroup","submitEditGroup","openModalAddUser","group_name","deleteUserSelected","submitDeleteUserInGroup","addUser","textAlign","color","roleSelect","role_name","marginTop"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { Table, Row, Col, Menu, Card, Input, Select, Form, InputNumber, Divider, Button, Modal, Drawer, Space } from 'antd'\nimport { DeleteOutlined, EditOutlined, FormOutlined } from '@ant-design/icons';\nimport { TcrbButton, TcrbPopconfirm } from '../../antd-styles/styles'\nimport { inject, observer } from 'mobx-react'\n\nimport SimpleInput from '../../simple-input'\nimport SimpleModal from '../../simple-modal'\n\nimport { checkDefaultStatus, addKeyToDataSource } from '../../data-utility'\nimport { toJS } from 'mobx';\n\nconst { Option } = Select;\nlet listUserSelect = []\nlet name = null\nlet role_id = null\nconst ManageGroup = inject('userAccessManagementStore')\n  (observer((props) => {\n    const { userAccessManagementStore, t } = props\n    const [showEditGroup, setShowEditGroup] = useState(false)\n    const [roleList, setRoleList] = useState([])\n    const [modalTitle, setModalTitle] = useState(\"\")\n    const [textOk, settextOk] = useState(\"Submit\")\n    const [textCancel, settextCancel] = useState(\"Cancel\")\n    const [modalString, setmodalString] = useState(\"\")\n    const [modalType, setModalType] = useState('confirm')\n    const [visible, setvisible] = useState(false)\n    const [userInGroupList, setUserInGroupList] = useState([])\n\n    useEffect(() => {\n      setRoleList([])\n      console.log(toJS(userAccessManagementStore.groupSelected))\n      splitMapUserGroups(userAccessManagementStore.groupSelected.map_user_groups)\n      // addKeyToUserInGroup(userAccessManagementStore.groupSelected.map_user_groups)\n    }, [])\n\n    useEffect(() => {\n      console.log(toJS(userAccessManagementStore.groupSelected))\n      if (Object.keys(userAccessManagementStore.groupSelected).length === 0) {\n        null\n      } else {\n        splitMapUserGroups(userAccessManagementStore.groupSelected.map_user_groups)\n\n      }\n\n    }, [userAccessManagementStore.groupSelected])\n\n    const addKeyToUserInGroup = (userInGroupList) => {\n      addKeyToDataSource(userInGroupList).then(result => {\n        setUserInGroupList(result)\n      })\n    }\n\n    const splitMapUserGroups = (dataMapUserGroup) => {\n      console.log(toJS(dataMapUserGroup))\n      let newUserObject = []\n      for (let index = 0; index < dataMapUserGroup.length; index++) {\n        newUserObject.push({\n          name: dataMapUserGroup[index].user_profile.name,\n          surname: dataMapUserGroup[index].user_profile.surname,\n          email: dataMapUserGroup[index].user_profile.email,\n          key: index,\n          ...dataMapUserGroup[index]\n        })\n      }\n      setUserInGroupList(newUserObject)\n      console.log(newUserObject)\n    }\n\n\n\n    const columnUser = [\n      {\n        title: '',\n        dataIndex: 'status',\n        width: '5%',\n        render: (text, record) => checkDefaultStatus(record.status, record.request_status)\n      },\n      {\n        title: 'Name',\n        dataIndex: 'name',\n        // render: (text, record) => (record.partner_code + \"/\" + record.partner_abbreviation)\n      },\n      {\n        title: 'Last Name',\n        dataIndex: 'surname',\n        // render: (text, record) => renderSection(record)\n      },\n      {\n        title: 'Action',\n        dataIndex: 'operation',\n        width: '10%',\n        render: (text, record) => renderActionGroupUser(record)\n      }\n    ]\n\n    const AddUserToGroup = () => {\n      return (\n        <div>\n          <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"Please select user\"\n            onChange={(value) => { listUserSelect = value }}\n          >\n            {userList.map((item, index) => <Option key={index} value={item.id}>{item.user_name}</Option>)}\n          </Select>\n        </div>\n      )\n    }\n\n    const goBackGroupList = () => {\n      userAccessManagementStore.nextPageIsManageGroup = false\n    }\n\n    const cancelEditGroup = () => {\n      setShowEditGroup(false)\n    }\n\n    const submitEditGroup = () => {\n      //waiting for call api\n      setShowEditGroup(false)\n    }\n\n    const openModalAddUser = () => {\n      setModalTitle('Add user to ' + userAccessManagementStore.groupSelected.group_name)\n      setmodalString(<AddUserToGroup />)\n      setvisible(true)\n    }\n\n    const deleteUserSelected = (record) => {\n      //waiting call api\n      userAccessManagementStore.submitDeleteUserInGroup(record)\n    }\n\n    const addUser = () => {\n      //waiting call api\n      setvisible(false)\n    }\n\n    const renderActionGroupUser = (record) => {\n      if (record.status == 'ACTIVE') {\n        if (record.request_status == 'APPROVE' || record.request_status == 'REJECT') {\n          return (\n            <div style={{ textAlign: \"center\" }}>\n              <TcrbPopconfirm title=\"Sure to Deactivate?\" onConfirm={() => deleteUserSelected(record)}>\n                <a style={{ color: '#FBA928' }}>Deactivate</a>\n              </TcrbPopconfirm>\n            </div>\n          )\n        } else if (record.request_status == 'PENDING') {\n          return null\n        }\n\n      } else if (status == 'INACTIVE') {\n        if (record.request_status == 'PENDING') {\n          return null\n        }\n      } else {\n        return null\n      }\n    }\n    return (\n      <div>\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"default\" onClick={() => goBackGroupList()}>Back</TcrbButton>\n          </Col>\n        </Row>\n        <Row gutter={[4, 24]}>\n          <Col span={4}>Group Name</Col>\n          <Col span={6}> {showEditGroup ?\n            <SimpleInput defaultValue={userAccessManagementStore.groupSelected.name} onChange={(value) => name = value} /> : userAccessManagementStore.groupSelected.name\n          }\n          </Col>\n        </Row>\n        {showEditGroup ? <Row gutter={[4, 24]}>\n          <Col span={4}>Role</Col>\n          <Col span={6}>\n            <Select\n              style={{ width: '100%' }}\n              placeholder=\"Please select\"\n              onChange={(value) => roleSelect = value}\n              defaultValue={1} //waiting value from store\n            >\n              {roleList.map((item, index) => <Option key={index} value={item.id}>{item.role_name}</Option>)}\n            </Select>\n          </Col>\n        </Row> :\n          null\n        }\n\n        <Row justify=\"center\" style={{ marginTop: 8 }}>\n          <Col span={4}>\n            {showEditGroup ?\n              <Space size={8}>\n                <TcrbButton className=\"default\" onClick={() => { cancelEditGroup() }} >Cancel</TcrbButton>\n                <TcrbButton className=\"primary\" onClick={() => { submitEditGroup() }} >Submit</TcrbButton>\n              </Space>\n              :\n              <TcrbButton className=\"primary\" onClick={() => { setShowEditGroup(true) }} >Edit</TcrbButton>}\n          </Col>\n        </Row>\n        <Divider />\n        <Row gutter={[4, 24]}>\n          <Col span={2}>\n            <TcrbButton className=\"primary\" onClick={() => openModalAddUser()} >Add User</TcrbButton>\n          </Col>\n        </Row>\n        <Table\n          bordered\n          dataSource={userInGroupList}\n          columns={columnUser}\n          size=\"small\"\n        />\n        <SimpleModal\n          title={modalTitle}\n          type={modalType}\n          onOk={() => addUser()}\n          onCancel={() => setvisible(false)}\n          textCancel={textCancel}\n          textOk={textOk}\n          width={600}\n          modalString={modalString}\n          visible={visible}\n        />\n\n      </div>\n    )\n  }))\n\nexport default ManageGroup\n"]},"metadata":{},"sourceType":"module"}