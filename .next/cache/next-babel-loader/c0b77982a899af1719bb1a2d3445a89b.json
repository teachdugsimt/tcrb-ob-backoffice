{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/pending-approvals.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect, useMemo } from 'react';\nimport { Table, Popconfirm, Row, Col } from 'antd';\nimport { inject, observer } from 'mobx-react';\nimport { DownOutlined } from '@ant-design/icons';\nimport { withTranslation } from '../../i18n';\nimport { CheckCircleOutlined, CloseCircleOutlined } from '@ant-design/icons';\nimport SimpleModal from '../simple-modal';\nimport styled from 'styled-components';\nimport moment from 'moment';\nconst HoverIcon = styled(Col).withConfig({\n  displayName: \"pending-approvals__HoverIcon\",\n  componentId: \"a7gc5n-0\"\n})([\"color:green;cursor:pointer !important;\"]);\nconst HoverIconReject = styled(Col).withConfig({\n  displayName: \"pending-approvals__HoverIconReject\",\n  componentId: \"a7gc5n-1\"\n})([\"color:red;cursor:pointer !important;\"]);\nconst PendingApprovals = inject('businessParametersSetupStore')(observer(props => {\n  const {\n    0: expandable,\n    1: setExpandable\n  } = useState(expand);\n  const {\n    0: hasData,\n    1: setHasData\n  } = useState(true);\n  const {\n    0: top,\n    1: setTop\n  } = useState('none');\n  const {\n    0: bottom,\n    1: setBottom\n  } = useState(\"bottomRight\");\n  const {\n    0: pendingApprovalData,\n    1: setPendingApprovalData\n  } = useState([]);\n  const {\n    0: title,\n    1: settitle\n  } = useState(\"Action details\");\n  const {\n    0: textOk,\n    1: settextOk\n  } = useState(\"Ok\");\n  const {\n    0: textCancel,\n    1: settextCancel\n  } = useState(\"Cancel\");\n  const {\n    0: modalString,\n    1: setmodalString\n  } = useState(\"initialState\");\n  const {\n    0: visible,\n    1: setvisible\n  } = useState(false);\n  const {\n    businessParametersSetupStore,\n    t\n  } = props;\n  const expand = {\n    expandedRowRender: record => __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 53\n      }\n    }, record.description)\n  };\n  const columns = [{\n    title: 'Ticket#',\n    dataIndex: 'id'\n  }, {\n    title: 'Request Type',\n    dataIndex: 'change_type'\n  }, {\n    title: 'Request Description',\n    key: 'description',\n    render: record => {\n      let data = JSON.parse(JSON.stringify(record));\n      let string = JSON.parse(data.data);\n      setmodalString(`Action : ${string.ChangedType} \\n\\n Old Value : ${string.Current.OTP_MAXIMUM_ENTERED ? string.Current.OTP_MAXIMUM_ENTERED : string.Current.OTP_EXPIRE_TIME} \\n\\n New Vlaue : ${string.New.OTP_MAXIMUM_ENTERED ? string.New.OTP_MAXIMUM_ENTERED : string.Current.OTP_EXPIRE_TIME}`);\n      return __jsx(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 20\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }\n      }, data.description ? `${data.description} ` : `${data.action}`), __jsx(\"div\", {\n        onClick: () => setvisible(true),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 15\n        }\n      }, __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 53\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 59\n        }\n      }, \" : details\"))));\n    }\n  }, {\n    title: 'Request ID',\n    dataIndex: 'maker_id'\n  }, {\n    title: 'Request Date',\n    // dataIndex: 'requested_date',\n    key: 'requested_date',\n    render: record => {\n      let data = JSON.parse(JSON.stringify(record));\n      let date = moment(data.requested_date).format('LLL');\n      return __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 20\n        }\n      }, date);\n    }\n  }, {\n    title: 'Action',\n    key: 'action',\n    render: record => __jsx(Row, {\n      gutter: 16,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 13\n      }\n    }, __jsx(HoverIcon, {\n      onClick: () => processPending(\"APPROVE\", record),\n      className: \"gutter-row\",\n      span: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 15\n      }\n    }, __jsx(CheckCircleOutlined, {\n      height: \"1.5em\",\n      width: \"1.5em\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }\n    })), __jsx(HoverIconReject, {\n      onClick: () => processPending(\"REJECT\", record),\n      className: \"gutter-row\",\n      span: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, __jsx(CloseCircleOutlined, {\n      height: \"1.5em\",\n      width: \"1.5em\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    })))\n  }];\n  useEffect(() => {\n    // call api\n    const data = {\n      filter: {}\n    };\n    businessParametersSetupStore.getPendingApprove(data);\n  }, []);\n  useEffect(() => {\n    if (businessParametersSetupStore.pendingApprovals.length > 0) {\n      setPendingApprovalData(businessParametersSetupStore.pendingApprovals);\n    }\n  }, [businessParametersSetupStore.pendingApprovals]);\n  useMemo(() => {\n    // setPendingApprovalData(businessParametersSetupStore.pendingApprovals)\n    console.log('render');\n  }, []);\n\n  const processPending = (status, record) => {\n    let data = {\n      allowAction: status,\n      data: record,\n      id: record.id\n    };\n    businessParametersSetupStore.setTmpPendingListID(record.id);\n    businessParametersSetupStore.processPendingListApprove(data);\n  };\n\n  const _onConfirm = () => {\n    setvisible(false);\n  };\n\n  const _onCancel = () => {\n    setvisible(false);\n  };\n\n  const tableColumns = columns.map(item => _objectSpread({}, item));\n  return __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }\n  }, __jsx(Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, __jsx(Table, {\n    pagination: {\n      position: [top, bottom]\n    },\n    columns: tableColumns,\n    dataSource: businessParametersSetupStore.responseGetPendingApproveList // dataSource={pendingApprovalData}\n    // scroll={scroll}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), __jsx(SimpleModal, {\n    title: title // type={modalType}\n    ,\n    onOk: () => _onConfirm(),\n    onCancel: () => _onCancel(),\n    textCancel: textCancel,\n    textOk: textOk,\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  })));\n}));\nexport default withTranslation('common')(PendingApprovals);","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/pending-approvals.js"],"names":["React","useState","useEffect","useMemo","Table","Popconfirm","Row","Col","inject","observer","DownOutlined","withTranslation","CheckCircleOutlined","CloseCircleOutlined","SimpleModal","styled","moment","HoverIcon","HoverIconReject","PendingApprovals","props","expandable","setExpandable","expand","hasData","setHasData","top","setTop","bottom","setBottom","pendingApprovalData","setPendingApprovalData","title","settitle","textOk","settextOk","textCancel","settextCancel","modalString","setmodalString","visible","setvisible","businessParametersSetupStore","t","expandedRowRender","record","description","columns","dataIndex","key","render","data","JSON","parse","stringify","string","ChangedType","Current","OTP_MAXIMUM_ENTERED","OTP_EXPIRE_TIME","New","action","date","requested_date","format","processPending","filter","getPendingApprove","pendingApprovals","length","console","log","status","allowAction","id","setTmpPendingListID","processPendingListApprove","_onConfirm","_onCancel","tableColumns","map","item","position","responseGetPendingApproveList"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useMemo } from 'react'\nimport { Table, Popconfirm, Row, Col } from 'antd';\nimport { inject, observer } from 'mobx-react'\nimport { DownOutlined } from '@ant-design/icons';\nimport { withTranslation } from '../../i18n'\nimport {\n  CheckCircleOutlined,\n  CloseCircleOutlined,\n} from '@ant-design/icons';\nimport SimpleModal from '../simple-modal'\nimport styled from 'styled-components'\nimport moment from 'moment'\nconst HoverIcon = styled(Col)`\n    color: green;\n    cursor: pointer !important;\n`\nconst HoverIconReject = styled(Col)`\n    color: red;\n    cursor: pointer !important;\n`\nconst PendingApprovals =\n  inject('businessParametersSetupStore')\n    (observer((props) => {\n      const [expandable, setExpandable] = useState(expand)\n      const [hasData, setHasData] = useState(true)\n      const [top, setTop] = useState('none')\n      const [bottom, setBottom] = useState(\"bottomRight\")\n      const [pendingApprovalData, setPendingApprovalData] = useState([])\n      const [title, settitle] = useState(\"Action details\")\n      const [textOk, settextOk] = useState(\"Ok\")\n      const [textCancel, settextCancel] = useState(\"Cancel\")\n      const [modalString, setmodalString] = useState(\"initialState\")\n      const [visible, setvisible] = useState(false)\n      const { businessParametersSetupStore, t } = props\n      const expand = { expandedRowRender: record => <p>{record.description}</p> };\n      const columns = [\n        {\n          title: 'Ticket#',\n          dataIndex: 'id',\n        },\n        {\n          title: 'Request Type',\n          dataIndex: 'change_type',\n        },\n        {\n          title: 'Request Description',\n          key: 'description',\n          render: (record) => {\n            let data = JSON.parse(JSON.stringify(record))\n            let string = JSON.parse(data.data)\n            setmodalString(`Action : ${string.ChangedType} \\n\\n Old Value : ${string.Current.OTP_MAXIMUM_ENTERED ? string.Current.OTP_MAXIMUM_ENTERED : string.Current.OTP_EXPIRE_TIME} \\n\\n New Vlaue : ${string.New.OTP_MAXIMUM_ENTERED ? string.New.OTP_MAXIMUM_ENTERED : string.Current.OTP_EXPIRE_TIME}`)\n            return <Row>\n              <span>\n                {data.description ? `${data.description} ` : `${data.action}`}\n              </span>\n              <div onClick={() => setvisible(true)}><span><a> : details</a></span></div>\n            </Row>\n          }\n        },\n        {\n          title: 'Request ID',\n          dataIndex: 'maker_id',\n        },\n        {\n          title: 'Request Date',\n          // dataIndex: 'requested_date',\n          key: 'requested_date',\n          render: (record) => {\n            let data = JSON.parse(JSON.stringify(record))\n            let date = moment(data.requested_date).format('LLL')\n            return <span>\n              {date}\n            </span>\n          }\n        },\n        {\n          title: 'Action',\n          key: 'action',\n          render: (record) => (\n            <Row gutter={16}>\n              <HoverIcon onClick={() => processPending(\"APPROVE\", record)} className=\"gutter-row\" span={6}>\n                <CheckCircleOutlined height={\"1.5em\"} width={\"1.5em\"} />\n              </HoverIcon>\n              <HoverIconReject onClick={() => processPending(\"REJECT\", record)} className=\"gutter-row\" span={6}>\n                <CloseCircleOutlined height={\"1.5em\"} width={\"1.5em\"} />\n              </HoverIconReject>\n            </Row>\n          ),\n        },\n      ];\n\n      useEffect(() => {\n        // call api\n        const data = {\n          filter: {}\n        }\n        businessParametersSetupStore.getPendingApprove(data)\n      }, [])\n\n      useEffect(() => {\n        if (businessParametersSetupStore.pendingApprovals.length > 0) {\n          setPendingApprovalData(businessParametersSetupStore.pendingApprovals)\n        }\n      }, [businessParametersSetupStore.pendingApprovals])\n\n      useMemo(() => {\n        // setPendingApprovalData(businessParametersSetupStore.pendingApprovals)\n        console.log('render')\n      }, [])\n\n      const processPending = (status, record) => {\n        let data = {\n          allowAction: status,\n          data: record,\n          id: record.id\n        }\n        businessParametersSetupStore.setTmpPendingListID(record.id)\n        businessParametersSetupStore.processPendingListApprove(data)\n      }\n\n      const _onConfirm = () => {\n        setvisible(false)\n      }\n      const _onCancel = () => {\n        setvisible(false)\n      }\n\n      const tableColumns = columns.map(item => ({ ...item }));\n\n      return (\n        <Row >\n          <Col span={24}>\n            <Table\n              pagination={{ position: [top, bottom] }}\n              columns={tableColumns}\n              dataSource={businessParametersSetupStore.responseGetPendingApproveList}\n            // dataSource={pendingApprovalData}\n            // scroll={scroll}\n            />\n            <SimpleModal\n              title={title}\n              // type={modalType}\n              onOk={() => _onConfirm()}\n              onCancel={() => _onCancel()}\n              textCancel={textCancel}\n              textOk={textOk}\n              modalString={modalString}\n              visible={visible}\n            />\n          </Col>\n        </Row>\n      )\n    }))\n\nexport default withTranslation('common')(PendingApprovals)\n\n"]},"metadata":{},"sourceType":"module"}