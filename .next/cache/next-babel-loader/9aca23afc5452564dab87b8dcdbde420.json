{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/otp-setup.js\";\nvar __jsx = React.createElement;\nimport React, { useState, createRef, useRef } from 'react';\nimport { Input, Row, Col, Button } from 'antd';\nimport styled from 'styled-components';\nimport SimpleModal from '../simple-modal';\nconst StyledInput = styled(Input).withConfig({\n  displayName: \"otp-setup__StyledInput\",\n  componentId: \"y1xkpv-0\"\n})([\"background-color:unset !important;border:unset !important;border-bottom:1px solid black !important;box-shadow:none !important;.ant-input{background-color:unset !important;\", \"}\"], ''\n/* cursor:not-allowed !important; */\n);\nexport default function OtpSetup() {\n  const {\n    0: disableEditOtp,\n    1: setDisableEditOtp\n  } = useState(true);\n  const {\n    0: disableEditOtpExpire,\n    1: setDisableEditOtpExpire\n  } = useState(true);\n  const {\n    0: visible,\n    1: setVisble\n  } = useState(false);\n  const {\n    0: modalString,\n    1: setModalString\n  } = useState('');\n  const textInput = createRef();\n\n  const editOtpMaximum = () => {\n    console.log(textInput.current.value);\n\n    if (disableEditOtp) {\n      setDisableEditOtp(false);\n    } else {\n      setVisble(true);\n      setModalString(__jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, \"Changing OTP Maximum Retrying!!\"), __jsx(\"p\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, \"From ...\")));\n    }\n  };\n\n  const changeOtpMaximum = () => {\n    console.log(textInput.current.value); //some action\n\n    setDisableEditOtp(true);\n    setVisble(false);\n  };\n\n  const changeOtpExpire = () => {};\n\n  const confirmModal = () => {\n    if (disableEditOtp === false) {\n      changeOtpMaximum();\n    } else {\n      changeOtpExpire();\n    }\n  };\n\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, __jsx(Row, {\n    gutter: [8, 8],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(StyledInput, {\n    prefix: \"OTP Maximum Retrying\",\n    suffix: \"Times\",\n    readOnly: disableEditOtp,\n    ref: textInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    onClick: editOtpMaximum,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }, \" \", disableEditOtp ? 'Edit' : 'Submit', \" \"))), __jsx(Row, {\n    gutter: [8, 8],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }, __jsx(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, __jsx(StyledInput, {\n    prefix: \"OTP Expiration Perlod\",\n    suffix: \"Seconds\",\n    disabled: !disableEditOtp,\n    readOnly: disableEditOtpExpire,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  })), __jsx(Col, {\n    span: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    disabled: !disableEditOtp,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, \" \", disableEditOtpExpire ? 'Edit' : 'Submit', \" \"))), __jsx(SimpleModal, {\n    onOk: () => confirmModal(),\n    onCancel: () => setVisble(false),\n    okText: \"Confirm\",\n    cancelText: \"Cancel\",\n    modalString: modalString,\n    visible: visible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/components/business-parameters-setup/otp-setup.js"],"names":["React","useState","createRef","useRef","Input","Row","Col","Button","styled","SimpleModal","StyledInput","OtpSetup","disableEditOtp","setDisableEditOtp","disableEditOtpExpire","setDisableEditOtpExpire","visible","setVisble","modalString","setModalString","textInput","editOtpMaximum","console","log","current","value","changeOtpMaximum","changeOtpExpire","confirmModal"],"mappings":"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","sourcesContent":["import React, { useState, createRef, useRef } from 'react'\nimport { Input, Row, Col, Button } from 'antd'\nimport styled from 'styled-components'\nimport SimpleModal from '../simple-modal'\nconst StyledInput = styled(Input)`\n\n      background-color: unset !important;\n      border: unset !important;\n      border-bottom: 1px solid black !important;\n      box-shadow: none !important;\n  .ant-input{\n    background-color: unset !important;\n    ${'' /* cursor:not-allowed !important; */}\n  }\n\n`\nexport default function OtpSetup() {\n  const [disableEditOtp, setDisableEditOtp] = useState(true)\n  const [disableEditOtpExpire, setDisableEditOtpExpire] = useState(true)\n  const [visible, setVisble] = useState(false)\n  const [modalString, setModalString] = useState('')\n  const textInput = createRef();\n\n\n  const editOtpMaximum = () => {\n    console.log(textInput.current.value);\n\n    if(disableEditOtp){\n      setDisableEditOtp(false)\n    }else{\n      setVisble(true)\n      setModalString(\n        <div>\n          <p>Changing OTP Maximum Retrying!!</p>\n          <p>From ...</p>\n          </div>\n      )\n    }\n  }\n  const changeOtpMaximum = ()=>{\n    console.log(textInput.current.value);\n    //some action\n    setDisableEditOtp(true)\n    setVisble(false)\n  }\n  const changeOtpExpire = () => {\n\n  }\n  const confirmModal = ()=>{\n    if(disableEditOtp === false){\n      changeOtpMaximum()\n    }else{\n      changeOtpExpire()\n    }\n  }\n  return (\n    <div>\n      <Row gutter={[8, 8]}>\n        <Col span={8}>\n          <StyledInput prefix=\"OTP Maximum Retrying\" suffix=\"Times\" readOnly={disableEditOtp}  ref={textInput}/>\n        </Col>\n        <Col span={6}>\n          <Button onClick={editOtpMaximum}> {disableEditOtp ? 'Edit':'Submit'} </Button>\n        </Col>\n      </Row>\n      <Row gutter={[8, 8]}>\n        <Col span={8}>\n          <StyledInput prefix=\"OTP Expiration Perlod\" suffix=\"Seconds\" disabled={!disableEditOtp} readOnly={disableEditOtpExpire} />\n        </Col>\n        <Col span={6}>\n          <Button disabled={!disableEditOtp}> {disableEditOtpExpire ? 'Edit':'Submit'} </Button>\n        </Col>\n      </Row>\n      <SimpleModal\n        onOk={()=> confirmModal()}\n        onCancel={() => setVisble(false)}\n        okText=\"Confirm\"\n        cancelText=\"Cancel\"\n        modalString={modalString}\n        visible={visible}\n      />\n\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}