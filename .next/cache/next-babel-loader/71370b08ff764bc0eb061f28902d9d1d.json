{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/test-lazy-loading.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// import React,{ lazy, useState } from 'react'\n// export default function TestLazyLoading() {\n//   return (\n//     <div>\n//     </div>\n//   )\n// }\nimport React, { lazy, useState } from 'react'; // import shortid from 'shortid';\n\nconst importView = chartName => lazy(() => import(`../components/${chartName}`).catch(() => import(`../components/customer-services-menu`)));\n\nconst data = [{\n  id: 'php',\n  label: 'php',\n  value: 372,\n  color: 'hsl(233, 70%, 50%)'\n}, {\n  id: 'scala',\n  label: 'scala',\n  value: 363,\n  color: 'hsl(15, 70%, 50%)'\n}, {\n  id: 'go',\n  label: 'go',\n  value: 597,\n  color: 'hsl(79, 70%, 50%)'\n}, {\n  id: 'css',\n  label: 'css',\n  value: 524,\n  color: 'hsl(142, 70%, 50%)'\n}, {\n  id: 'hack',\n  label: 'hack',\n  value: 514,\n  color: 'hsl(198, 70%, 50%)'\n}];\n\nconst ChartList = ({\n  charts\n}) => {}; // Object.values(charts).map(Chart => (\n//   <Chart key={shortid.generate()} data={data} />\n// ));\n\n\nexport default function TestLazyLoading() {\n  const {\n    0: charts,\n    1: setCharts\n  } = useState({});\n\n  const addChart = chartName => {\n    // Optional step: Chart is already loaded. Don't load again.\n    if (charts[chartName]) return;\n    const Chart = importView(chartName);\n    setCharts(charts => _objectSpread(_objectSpread({}, charts), {}, {\n      [chartName]: Chart\n    }));\n  };\n\n  const loadPieChart = () => addChart('Pie');\n\n  const loadWaffleChart = () => addChart('Waffle');\n\n  return __jsx(\"main\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, __jsx(\"section\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    disabled: charts['Pie'],\n    onClick: loadPieChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"Pie Chart\"), __jsx(\"button\", {\n    disabled: charts['Waffle'],\n    onClick: loadWaffleChart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"Waffle Chart\")), __jsx(\"section\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, __jsx(React.Suspense, {\n    fallback: \"Loading charts...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, __jsx(ChartList, {\n    charts: charts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/pages/test-lazy-loading.js"],"names":["React","lazy","useState","importView","chartName","catch","data","id","label","value","color","ChartList","charts","TestLazyLoading","setCharts","addChart","Chart","loadPieChart","loadWaffleChart"],"mappings":"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","sourcesContent":["// import React,{ lazy, useState } from 'react'\n\n// export default function TestLazyLoading() {\n//   return (\n//     <div>\n\n//     </div>\n//   )\n// }\nimport React, { lazy, useState } from 'react';\n// import shortid from 'shortid';\n\nconst importView = chartName =>\n  lazy(() =>\n    import(`../components/${chartName}`).catch(() => import(`../components/customer-services-menu`))\n  );\n\nconst data = [\n  {\n    id: 'php',\n    label: 'php',\n    value: 372,\n    color: 'hsl(233, 70%, 50%)'\n  },\n  {\n    id: 'scala',\n    label: 'scala',\n    value: 363,\n    color: 'hsl(15, 70%, 50%)'\n  },\n  {\n    id: 'go',\n    label: 'go',\n    value: 597,\n    color: 'hsl(79, 70%, 50%)'\n  },\n  {\n    id: 'css',\n    label: 'css',\n    value: 524,\n    color: 'hsl(142, 70%, 50%)'\n  },\n  {\n    id: 'hack',\n    label: 'hack',\n    value: 514,\n    color: 'hsl(198, 70%, 50%)'\n  }\n];\n\nconst ChartList = ({ charts }) => {}\n  // Object.values(charts).map(Chart => (\n  //   <Chart key={shortid.generate()} data={data} />\n  // ));\n\nexport default function TestLazyLoading() {\n    const [charts, setCharts] = useState({});\n\n  const addChart = chartName => {\n    // Optional step: Chart is already loaded. Don't load again.\n    if (charts[chartName]) return;\n\n    const Chart = importView(chartName);\n    setCharts(charts => ({ ...charts, [chartName]: Chart }));\n  };\n  const loadPieChart = () => addChart('Pie');\n  const loadWaffleChart = () => addChart('Waffle');\n\n  return (\n    <main>\n      <section className=\"container\">\n        <button disabled={charts['Pie']} onClick={loadPieChart}>\n          Pie Chart\n        </button>\n        <button disabled={charts['Waffle']} onClick={loadWaffleChart}>\n          Waffle Chart\n        </button>\n      </section>\n      <section className=\"container\">\n        <React.Suspense fallback=\"Loading charts...\">\n          <div className=\"row\">\n            <ChartList charts={charts} />\n          </div>\n        </React.Suspense>\n      </section>\n    </main>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}