{"ast":null,"code":"import { ApisauceInstance, create, ApiResponse } from 'apisauce';\nimport Header from './api-integrations/header';\nimport getGeneralApiProblem from './api-integrations/error-handler';\nimport https from 'https';\nimport axios from 'axios';\nimport ExcuteApi from './api-integrations/excute-api';\n\nclass BusinessParameterSetupApi {\n  constructor() {\n    this.getOtpValue = async params => {\n      // const api = create(Header())\n      const response = await ExcuteApi('api/backoffice/v1/parameterstore', params); // const response = await api.get('api/backoffice/v1/parameterstore', params)\n\n      return response;\n    };\n\n    this.setOtpValue = async params => {\n      const api = create(Header());\n      const response = await api.post('api/backoffice/v1/changerequest', params);\n      return response;\n    };\n\n    this.getProductLimit = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n\n    this.getDetailProductLimit = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n\n    this.getChannelPartnerList = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n\n    this.deleteProductLimit = async params => {\n      const api = create(Header());\n      const response = await api.post('api/backoffice/v1/changerequest/productlimit', params);\n      return response;\n    };\n\n    this.getPendingList = async params => {\n      const api = create(Header());\n      const response = await api.get('api/backoffice/v1/changerequest', params);\n      return response;\n    };\n\n    this.approveRejectOtpRequest = async params => {\n      const api = create(Header());\n      const response = await api.put('api/backoffice/v1/changerequest/otp', params);\n      return response;\n    };\n\n    this.rejectRejectProductRequest = async params => {\n      const api = create(Header());\n      const response = await api.put('api/backoffice/v1/changerequest/productlimit', params);\n      return response;\n    };\n\n    this.getOtpValueAxios = async params => {\n      const httpsAgent = new https.Agent({\n        rejectUnauthorized: false,\n        requestCert: false\n      });\n      const response = await axios.get(\"https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore\", {\n        params,\n        httpsAgent,\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json' // 'x-apigw-api-id': 'dwl8p0fxml',\n          // 'Access-Control-Allow-Origin': \"*\",\n          // 'x-apigw-api-id': \"dwl8p0fxml\",\n          // \"Access-Control-Allow-Origin\": \"*\", // Required for CORS support to work\n          // \"Access-Control-Allow-Credentials\": true // Required for cookies, authorization headers with HTTPS\n          // 'x-api-language': \"TH\",\n          // 'x-api-key': '',\n          // 'x-api-signature': 'a94ks02304ldfgkorm1234llgdmfk',\n          // 'uuid': 'YYYYYYYY',\n\n        },\n        timeout: 15000\n      }).then(data => {\n        console.log(\"AXIOS CALLLL : \", data);\n        return data;\n      }).catch(err => {\n        console.log(\"AXIOS ERROR : \", err);\n        return err;\n      });\n      return response;\n    };\n\n    this.getPartnerChannel = async params => {\n      const api = create(header);\n      const response = await api.get('api/backoffice/v1/partnertransactionlimit', params);\n      return response;\n    };\n  } // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n\n}\n\nexport default new BusinessParameterSetupApi(); // HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n// customer service inquiry\n// bussiness parameter setup\n// customer service menu","map":{"version":3,"sources":["/Users/admin/Desktop/tcrb-ob-project/tcrb-ob-backoffice-frontend/services/business-parameter-setup-api.js"],"names":["ApisauceInstance","create","ApiResponse","Header","getGeneralApiProblem","https","axios","ExcuteApi","BusinessParameterSetupApi","getOtpValue","params","response","setOtpValue","api","post","getProductLimit","get","getDetailProductLimit","getChannelPartnerList","deleteProductLimit","getPendingList","approveRejectOtpRequest","put","rejectRejectProductRequest","getOtpValueAxios","httpsAgent","Agent","rejectUnauthorized","requestCert","headers","timeout","then","data","console","log","catch","err","getPartnerChannel","header"],"mappings":"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","sourcesContent":["import { ApisauceInstance, create, ApiResponse } from 'apisauce'\nimport Header from './api-integrations/header'\nimport getGeneralApiProblem from './api-integrations/error-handler'\nimport https from 'https';\nimport axios from 'axios'\nimport ExcuteApi from './api-integrations/excute-api'\n\nclass BusinessParameterSetupApi {\n\n  getOtpValue = async (params) => {\n    // const api = create(Header())\n    const response = await ExcuteApi('api/backoffice/v1/parameterstore', params)\n    // const response = await api.get('api/backoffice/v1/parameterstore', params)\n    return response\n  }\n\n  setOtpValue = async (params) => {\n    const api = create(Header())\n    const response = await api.post('api/backoffice/v1/changerequest', params)\n    return response\n  }\n\n  getProductLimit = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  getDetailProductLimit = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  getChannelPartnerList = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  deleteProductLimit = async (params) => {\n    const api = create(Header())\n    const response = await api.post('api/backoffice/v1/changerequest/productlimit', params)\n    return response\n  }\n\n  getPendingList = async (params) => {\n    const api = create(Header())\n    const response = await api.get('api/backoffice/v1/changerequest', params)\n    return response\n  }\n\n  approveRejectOtpRequest = async (params) => {\n    const api = create(Header())\n    const response = await api.put('api/backoffice/v1/changerequest/otp', params)\n    return response\n  }\n\n  rejectRejectProductRequest = async (params) => {\n    const api = create(Header())\n    const response = await api.put('api/backoffice/v1/changerequest/productlimit', params)\n    return response\n  }\n\n  getOtpValueAxios = async (params) => {\n    const httpsAgent = new https.Agent({\n      rejectUnauthorized: false,\n      requestCert: false,\n    })\n\n    const response = await axios.get(\"https://dwl8p0fxml-vpce-03ae60b10934425db.execute-api.ap-southeast-1.amazonaws.com/api/backoffice/v1/parameterstore\", {\n      params,\n      httpsAgent,\n      headers: {\n        'Content-Type': 'application/json',\n        'Accept': 'application/json',\n        // 'x-apigw-api-id': 'dwl8p0fxml',\n\n        // 'Access-Control-Allow-Origin': \"*\",\n        // 'x-apigw-api-id': \"dwl8p0fxml\",\n        // \"Access-Control-Allow-Origin\": \"*\", // Required for CORS support to work\n        // \"Access-Control-Allow-Credentials\": true // Required for cookies, authorization headers with HTTPS\n\n        // 'x-api-language': \"TH\",\n        // 'x-api-key': '',\n        // 'x-api-signature': 'a94ks02304ldfgkorm1234llgdmfk',\n        // 'uuid': 'YYYYYYYY',\n      },\n      timeout: 15000\n    }).then(data => {\n      console.log(\"AXIOS CALLLL : \", data)\n      return data\n    }).catch(err => {\n      console.log(\"AXIOS ERROR : \", err)\n      return err\n    })\n    return response\n  }\n\n  getPartnerChannel = async (params) => {\n    const api = create(header)\n    const response = await api.get('api/backoffice/v1/partnertransactionlimit', params)\n    return response\n  }\n\n  // submitPartnerLimit = async (params) => {\n  //   const api = create(header)\n  // }\n\n}\nexport default new BusinessParameterSetupApi()\n// HTTPS=true SSL_CRT_FILE=Certificate_chain.txt SSL_KEY_FILE=private_key.txt npm run dev\n\n\n// customer service inquiry\n// bussiness parameter setup\n// customer service menu\n"]},"metadata":{},"sourceType":"module"}